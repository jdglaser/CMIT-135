{
  "id": 238,
  "update_date": "Dec 25, 2017 6:36:48 AM",
  "isAdaptive": false,
  "is_public": true,
  "myLoadSolutions": true,
  "summary": "Self-Paced Exercises for Champlain College\u0027s CMIT-135 Course.  Based on the Introduction course to Python from jetBrains",
  "title": "Self-Paced Exercises for CMIT-135",
  "programming_language": "Python",
  "language": "en",
  "items": [
    {
      "id": 13416,
      "update_date": "Dec 21, 2017 6:52:27 AM",
      "title": "Week 2",
      "task_list": [
        {
          "name": "Our first program",
          "stepic_id": 186010,
          "task_files": {
            "hello_world.py": {
              "name": "hello_world.py",
              "text": "print(\"Hello, world! My name is type your name\")\n",
              "placeholders": [
                {
                  "offset": 32,
                  "length": 14,
                  "hints": [
                    "Type your name here."
                  ],
                  "possible_answer": "Liana",
                  "placeholder_text": "type your name"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_ASCII():\n    windows \u003d get_answer_placeholders()\n    for window in windows:\n        all_ascii \u003d all(ord(c) \u003c 128 for c in window)\n        if not all_ascii:\n            failed(\"Please use only English characters this time.\")\n            return\n    passed()\n\ndef test_initial():\n    window \u003d get_answer_placeholders()[0]\n    if window \u003d\u003d \"type your name\":\n        failed(\"You should modify the file\")\n    else:\n        passed()\n\ndef test_is_alpha():\n    window \u003d get_answer_placeholders()[0]\n    is_multiline \u003d window.find(\"\\n\")\n    if is_multiline !\u003d -1:\n        window \u003d window[:is_multiline-1]\n    splitted \u003d window.split()\n    for s in splitted:\n        if not s.isalpha():\n            failed(\"Please use only English characters this time.\")\n            return\n\n    passed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    test_ASCII()\n    run_common_tests(\"You should enter your name\")\n    test_is_alpha()\n    test_initial()\n\n\n"
          },
          "description_text": "\nTraditionally the first program you write in any programming language is \u003ccode\u003e\"Hello World!\"\u003c/code\u003e.\n\u003cbr\u003e\u003cbr\u003e\nIntroduce yourself to the World.\n\u003cbr\u003e\u003cbr\u003e\nHint: To run a script —Åhoose \u0027Run \u0026lt;name\u0026gt;\u0027 on the context menu. \u003cbr\u003e\nFor more information visit \u003ca href\u003d\"https://www.jetbrains.com/help/pycharm/running-and-rerunning-applications.html\"\u003eour help\u003c/a\u003e.\n\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:51:55 AM",
          "task_type": "edu"
        },
        {
          "name": "Comments",
          "stepic_id": 186011,
          "task_files": {
            "comments.py": {
              "name": "comments.py",
              "text": "# This is the comment for the comments.py file\nprint(\"Hello!\")  # this comment is for the second line\n\nprint(\"# this is not a comment\")\n# add new comment here\n",
              "placeholders": [
                {
                  "offset": 138,
                  "length": 20,
                  "hints": [
                    "Type your new comment here."
                  ],
                  "possible_answer": "new comment",
                  "placeholder_text": "add new comment here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"You should type new comment\")\n"
          },
          "description_text": "\nComments in Python start with the hash character (\u003ccode\u003e#\u003c/code\u003e) and include the whole line.\nYou can use Ctrl + / to comment or uncomment the whole line in PyCharm.\n\u003cbr\u003e\u003cbr\u003e\nAdd a new comment to the file.\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:52:22 AM",
          "task_type": "edu"
        },
        {
          "name": "Variable definition",
          "stepic_id": 186012,
          "task_files": {
            "variable_definition.py": {
              "name": "variable_definition.py",
              "text": "a \u003d b \u003d 2  # This is called a \"chained assignment\". It assigns the value 2 to variables \"a\" and \"b\".\nprint(\"a \u003d \" + str(a))   # We\u0027ll explain the expression str(a) later in the course. For now it is used to convert the  variable \"a\" to a string.\nprint(\"b \u003d \" + str(b))\n\ngreetings \u003d \"greetings\"\nprint(\"greetings \u003d \" + str(greetings))\ngreetings \u003d another value\nprint(\"greetings \u003d \" + str(greetings))\n",
              "placeholders": [
                {
                  "offset": 345,
                  "length": 13,
                  "hints": [
                    "Type value here."
                  ],
                  "possible_answer": "5",
                  "placeholder_text": "another value"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, import_task_file, get_answer_placeholders\n\n\ndef test_task_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"another value\" \u003d\u003d window:\n      failed(\"You should redefine the variable \u0027greetings\u0027\")\n    else:\n      passed()\n\ndef test_value():\n    file \u003d import_task_file()\n\n    if file.greetings \u003d\u003d \"greetings\":\n        failed(\"You should assign a different value to the variable\")\n    else:\n        passed()\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    test_task_window()\n    run_common_tests(\"You should redefine the variable \u0027greetings\u0027\")\n    test_value()\n"
          },
          "description_text": "\nVariables are used to store values so we can refer to them later. A variable is like a label, and you use the \u0027\u003ccode\u003e\u003d\u003c/code\u003e\u0027 symbol,\nknown as the assignment operator, to assign a value to a variable. An assignment can be chained, e.g. \u003ccode\u003ea \u003d b \u003d 2\u003c/code\u003e\n\u003cbr\u003e\u003cbr\u003e\nChange the value stored in the variable \u003ccode\u003egreetings\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:52:51 AM",
          "task_type": "edu"
        },
        {
          "name": "Undefined variable",
          "stepic_id": 186013,
          "task_files": {
            "undefined_variable.py": {
              "name": "undefined_variable.py",
              "text": "variable \u003d 1\nprint(other variable)\n",
              "placeholders": [
                {
                  "offset": 19,
                  "length": 14,
                  "hints": [
                    "Type the name of an undefined variable here. Note that variable names must start with a letter and may contain letters, \u0027_\u0027 and/or numbers."
                  ],
                  "possible_answer": "other_variable",
                  "placeholder_text": "other variable"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import test_is_not_empty, test_answer_placeholders_text_deleted, passed, failed, import_task_file\n\n\ndef test_is_identifier():\n    try:\n        import_task_file()\n    except NameError:\n        passed()\n        return\n    except SyntaxError:\n        failed(\"Used invalid identifier\")\n        return\n    failed(\"Use undefined variable\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    error_text \u003d \"You should type undefined variable here\"\n\n    test_is_not_empty()\n    test_answer_placeholders_text_deleted(error_text)\n    test_is_identifier()\n"
          },
          "description_text": "\nVariable names may only contain letters, digits, and/or the underscore character, and cannot start with a digit.\n\u003cbr\u003e\u003cbr\u003e\nCheck what happens if you use a variable which is not defined yet. Try to print out an undefined name.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:53:45 AM",
          "task_type": "edu"
        },
        {
          "name": "Variable types",
          "stepic_id": 186014,
          "task_files": {
            "variable_type.py": {
              "name": "variable_type.py",
              "text": "number \u003d 9\nprint(type(number))   # print type of variable \"number\"\n\nfloat_number \u003d 9.0\nprint(float_number type)\n",
              "placeholders": [
                {
                  "offset": 93,
                  "length": 17,
                  "hints": [
                    "Look how we found the \"number\" type on line 2 and do the same to float_number."
                  ],
                  "possible_answer": "type(float_number)",
                  "placeholder_text": "float_number type"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed\n\n\ndef test_type_used():\n    window \u003d get_answer_placeholders()[0]\n    if \"type\" in window and \"float_number\" in window:\n        passed()\n    else:\n        failed(\"Use the type() function\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_type_used()"
          },
          "description_text": "\nIn Python, there are two main types of numbers: integers and floats.\nThe most important difference between them is that a float is a number that has a decimal point, and an int is a number\nwithout a decimal point.\n\u003cbr\u003e\u003cbr\u003e\nDetermine the type of the variable \u003ccode\u003efloat_number\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:53:45 AM",
          "task_type": "edu"
        },
        {
          "name": "Type conversion",
          "stepic_id": 186015,
          "task_files": {
            "type_cast.py": {
              "name": "type_cast.py",
              "text": "number \u003d 9\nprint(type(number))   # print type of variable \"number\"\n\nfloat_number \u003d 9.0\nprint(float_number)\nprint(Convert float_number to integer)\n",
              "placeholders": [
                {
                  "offset": 113,
                  "length": 31,
                  "hints": [
                    "Use int() function."
                  ],
                  "possible_answer": "int(float_number)",
                  "placeholder_text": "Convert float_number to integer"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"int\" in window and \"float_number\" in window:\n        passed()\n    else:\n        failed(\"Use the int() function\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()"
          },
          "description_text": "\nThere are several built-in functions that let you convert one data type to another.\nThese functions return a new object representing the converted value.\n\u003ccode\u003eint(x)\u003c/code\u003e converts \u003ccode\u003ex\u003c/code\u003e to an integer.\n\u003ccode\u003efloat(x)\u003c/code\u003e converts \u003ccode\u003ex\u003c/code\u003e to a floating-point number.\n\u003ccode\u003estr(x)\u003c/code\u003e converts object \u003ccode\u003ex\u003c/code\u003e to a string representation.\n\u003cbr\u003e\u003cbr\u003e\nConvert \u003ccode\u003efloat_number\u003c/code\u003e to integer.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:53:45 AM",
          "task_type": "edu"
        },
        {
          "name": "Arithmetic operators",
          "stepic_id": 186016,
          "task_files": {
            "arithmetic_operators.py": {
              "name": "arithmetic_operators.py",
              "text": "number \u003d 9.0        # float number\n\nresult \u003d divide \u0027number\u0027 by two\n\nremainder \u003d calculate the remainder\n\nprint(\"result \u003d \" + str(result))\nprint(\"remainder \u003d \" + str(remainder))\n",
              "placeholders": [
                {
                  "offset": 45,
                  "length": 22,
                  "hints": [
                    "Use / operator."
                  ],
                  "possible_answer": "number / 2",
                  "placeholder_text": "divide \u0027number\u0027 by two"
                },
                {
                  "offset": 81,
                  "length": 23,
                  "hints": [
                    "Use % operator."
                  ],
                  "possible_answer": "number % 2",
                  "placeholder_text": "calculate the remainder"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders\n\n\ndef test_division():\n    file \u003d import_task_file()\n    if file.result \u003d\u003d 4.5:\n        passed()\n    else:\n        failed(\"Wrong result\")\n\n\ndef test_remainder():\n    file \u003d import_task_file()\n    if file.remainder \u003d\u003d 1.0:\n        passed()\n    else:\n        failed(\"Wrong remainder\")\n\n\ndef test_windows():\n    windows \u003d get_answer_placeholders()\n    if not \"/\" in windows[0]:\n        failed(\"Use / operator\")\n        return\n    if not \"%\" in windows[1]:\n        failed(\"Use % operator\")\n        return\n    if \"number\" in windows[0] and \"number\" in windows[1]:\n        passed()\n    else:\n        failed(\"Use the value stored in the variable \\\"number\\\"\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"Use / and % operators\")\n    test_windows()\n    test_division()\n    test_remainder()"
          },
          "description_text": "\nJust as with any other programming language, the addition (\u003ccode\u003e+\u003c/code\u003e), subtraction (\u003ccode\u003e-\u003c/code\u003e), multiplication (\u003ccode\u003e*\u003c/code\u003e), and division (\u003ccode\u003e/\u003c/code\u003e) operators can be used with numbers.\nIn addition Python has the power (\u003ccode\u003e**\u003c/code\u003e) and modulo (\u003ccode\u003e%\u003c/code\u003e) operators.\n\u003cbr\u003e\u003cbr\u003e\nDivide the value stored in the variable \u003ccode\u003enumber\u003c/code\u003e by \u003ccode\u003e2\u003c/code\u003e, and then calculate the remainder.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:53:45 AM",
          "task_type": "edu"
        },
        {
          "name": "Assignments",
          "stepic_id": 186017,
          "task_files": {
            "assignments.py": {
              "name": "assignments.py",
              "text": "number \u003d 9.0\nprint(\"number \u003d \" + str(number))\n\nnumber -\u003d 2\nprint(\"number \u003d \" + str(number))\n\nnumber operator 5\n\nprint(\"number \u003d \" + str(number))\n",
              "placeholders": [
                {
                  "offset": 100,
                  "length": 8,
                  "hints": [
                    "Use +\u003d operator."
                  ],
                  "possible_answer": "+\u003d",
                  "placeholder_text": "operator"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if file.number \u003d\u003d 12.0:\n        passed()\n    else:\n        failed(\"Use +\u003d operator\")\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"+\u003d\" in window:\n        passed()\n    else:\n        failed(\"Use +\u003d operator\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"You should modify the file\")\n    test_value()\n    test_window()"
          },
          "description_text": "\nAugmented assignment is a single statement combining a binary operation and an assignment statement such as \u003ccode\u003e+\u003d\u003c/code\u003e, \u003ccode\u003e-\u003d\u003c/code\u003e, etc.\n\u003cbr\u003e\u003cbr\u003e\nUse an augmented assignment to add \u003ccode\u003e5\u003c/code\u003e to \u003ccode\u003enumber\u003c/code\u003e and update the variable.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:53:45 AM",
          "task_type": "edu"
        },
        {
          "name": "Boolean operators",
          "stepic_id": 186018,
          "task_files": {
            "boolean_operators.py": {
              "name": "boolean_operators.py",
              "text": "two \u003d 2\nthree \u003d 3\n\nis_equal \u003d two operator three\n\nprint(is_equal)\n",
              "placeholders": [
                {
                  "offset": 34,
                  "length": 8,
                  "hints": [
                    "Use \u003d\u003d operator."
                  ],
                  "possible_answer": "\u003d\u003d",
                  "placeholder_text": "operator"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, import_task_file, get_answer_placeholders\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if not file.is_equal:\n        passed()\n    else:\n        failed(\"Use \u003d\u003d operator\")\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"\u003d\u003d\" in window:\n        passed()\n    else:\n        failed(\"Use \u003d\u003d operator\")\n\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"You should modify the file\")\n\n    test_value()\n    test_window()"
          },
          "description_text": "\nBoolean is a type of value that can only be \u003ccode\u003eTrue\u003c/code\u003e or \u003ccode\u003eFalse\u003c/code\u003e.\nThe \u003ccode\u003e\u003d\u003d\u003c/code\u003e (equality) operator checks whether the two variables being compared are equal.\n\u003cbr\u003e\u003cbr\u003e\nCheck whether the variable \u003ccode\u003etwo\u003c/code\u003e is equal to \u003ccode\u003ethree\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:53:45 AM",
          "task_type": "edu"
        },
        {
          "name": "Comparison operators",
          "stepic_id": 186019,
          "task_files": {
            "comparison_operators.py": {
              "name": "comparison_operators.py",
              "text": "one \u003d 1\ntwo \u003d 2\nthree \u003d 3\n\nprint(one \u003c two \u003c three)  # This chained comparison means that the (one \u003c two) and (two \u003c three) comparisons are performed at the same time.\n\nis_greater \u003d three operator two\nprint(is_greater)\n",
              "placeholders": [
                {
                  "offset": 188,
                  "length": 8,
                  "hints": [
                    "Use \u003e operator."
                  ],
                  "possible_answer": "\u003e",
                  "placeholder_text": "operator"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if file.is_greater:\n        passed()\n    else:\n        failed(\"Use \u003e operator\")\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"\u003e\" in window and \"\u003e\u003d\" not in window:\n        passed()\n    else:\n        failed(\"Use \u003e operator\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"You should modify the file\")\n    test_value()\n    test_window()"
          },
          "description_text": "\nPython has many types of comparison operators including \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, etc. All comparison operations in Python have the same priority.\nComparisons yield boolean values: either \u003ccode\u003eTrue\u003c/code\u003e or \u003ccode\u003eFalse\u003c/code\u003e. Comparisons can be chained arbitrarily.\n\u003cbr\u003e\u003cbr\u003e\nCheck whether the value of the variable \u003ccode\u003ethree\u003c/code\u003e is strictly greater than the value of the variable \u003ccode\u003etwo\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:53:45 AM",
          "task_type": "edu"
        },
        {
          "name": "Concatenation",
          "stepic_id": 186020,
          "task_files": {
            "concatenation.py": {
              "name": "concatenation.py",
              "text": "hello \u003d \"Hello\"\nworld \u003d \u0027World\u0027\n\nhello_world \u003d type here\nprint(hello_world)      # Note: you should print \"Hello World\"\n",
              "placeholders": [
                {
                  "offset": 47,
                  "length": 9,
                  "hints": [
                    "Use chained concatenation and one-space string \\\" \\\"."
                  ],
                  "possible_answer": "hello + \u0027 \u0027 + world",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if hasattr(file, \"hello_world\") and file.hello_world \u003d\u003d \"HelloWorld\":\n        failed(\"Use one-space string \u0027 \u0027 in concatenation.\")\n    else:\n        passed()\n\n\ndef test_value_2():\n    file \u003d import_task_file()\n    if hasattr(file, \"hello_world\") and file.hello_world \u003d\u003d \"Hello World\":\n        passed()\n    else:\n        failed(\"Use + operator\")\n\ndef test_concat_used():\n    window \u003d get_answer_placeholders()[0]\n    if \"hello\" in window and \"world\" in window and \"+\" in window:\n        passed()\n    else:\n        failed(\"Use previously defined variables and concatenation (+) to combine variables\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_value()\n    test_value_2()\n    test_concat_used()\n\n"
          },
          "description_text": "\nCombining two strings using the \u003ccode\u003e+\u003c/code\u003e symbol is called concatenation.\n\u003cbr\u003e\u003cbr\u003e\nUse the \u003ccode\u003ehello\u003c/code\u003e and \u003ccode\u003eworld\u003c/code\u003e variables to get a \u003ccode\u003e\"Hello World\"\u003c/code\u003e string.\n\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:54:37 AM",
          "task_type": "edu"
        },
        {
          "name": "String multiplication",
          "stepic_id": 186021,
          "task_files": {
            "string_multiplication.py": {
              "name": "string_multiplication.py",
              "text": "hello \u003d \"hello\"\nten_of_hellos \u003d hello operator 10\nprint(ten_of_hellos)\n",
              "placeholders": [
                {
                  "offset": 38,
                  "length": 8,
                  "hints": [
                    "Use multiplication."
                  ],
                  "possible_answer": "*",
                  "placeholder_text": "operator"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if hasattr(file, \"ten_of_hellos\") and file.ten_of_hellos \u003d\u003d \"hellohellohellohellohellohellohellohellohellohello\":\n        passed()\n    else:\n        failed(\"Use multiplication\")\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"*\" in window:\n        passed()\n    else:\n        failed(\"Use multiplication\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"You should modify the file\")\n\n    test_value()\n    test_window()\n"
          },
          "description_text": "\nPython supports a string-by-number multiplication (but not the other way around!).\n\u003cbr\u003e\u003cbr\u003e\nUse hello to get the \u003ccode\u003e\"hellohellohellohellohellohellohellohellohellohello\"\u003c/code\u003e string (\u003ccode\u003e\"hello\"\u003c/code\u003e repeated \u003ccode\u003e10\u003c/code\u003e times).\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:54:37 AM",
          "task_type": "edu"
        },
        {
          "name": "String indexing",
          "stepic_id": 186022,
          "task_files": {
            "string_indexing.py": {
              "name": "string_indexing.py",
              "text": "python \u003d \"Python\"\nprint(\"h \" + python[3])     # Note: string indexing starts with 0\n\np_letter \u003d type here\nprint(p_letter)\n",
              "placeholders": [
                {
                  "offset": 96,
                  "length": 9,
                  "hints": [
                    "Note that index starts with 0."
                  ],
                  "possible_answer": "python[0]",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"[\" in window and \"0\" in window and \"]\" in window:\n        passed()\n    else:\n        failed(\"Use indexing\")\n\ndef test_value():\n    file \u003d import_task_file()\n    if hasattr(file, \"p_letter\") and file.p_letter \u003d\u003d \"P\":\n        passed()\n    else:\n        failed(\"String index starts at 0.\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n\n    test_value()\n    test_window()\n"
          },
          "description_text": "\nYou can access a character of a string if you know its position.\nFor example, \u003ccode\u003estr[index]\u003c/code\u003e will yield the character at\nposition \u003ccode\u003eindex\u003c/code\u003e in the string \u003ccode\u003estr\u003c/code\u003e.\n\u003cbr/\u003e\nNote that string index always starts at \u003ccode\u003e0\u003c/code\u003e.\n\u003cbr\u003e\nIndices may also be negative numbers, to start counting from the right. Note that since \u003ccode\u003e-0\u003c/code\u003e is the same as \u003ccode\u003e0\u003c/code\u003e, negative indices start from \u003ccode\u003e-1\u003c/code\u003e.\n\n\n\u003cbr\u003e\u003cbr\u003e\nUse index operator to get \u003ccode\u003e\"P\"\u003c/code\u003e from \u003ccode\u003e\"python\"\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:54:37 AM",
          "task_type": "edu"
        },
        {
          "name": "String negative indexing",
          "stepic_id": 186023,
          "task_files": {
            "negative_indexing.py": {
              "name": "negative_indexing.py",
              "text": "long_string \u003d \"This is a very long string!\"\nexclamation \u003d type here\nprint(exclamation)\n",
              "placeholders": [
                {
                  "offset": 58,
                  "length": 9,
                  "hints": [
                    "Use negative index."
                  ],
                  "possible_answer": "long_string[-1]",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if hasattr(file, \"exclamation\") and file.exclamation \u003d\u003d \"!\":\n        passed()\n    else:\n        failed(\"Use -1 index to get the last character\")\n\n\ndef test_negative_index():\n    window \u003d get_answer_placeholders()[0]\n    if \"-\" in window:\n        passed()\n    else:\n        failed(\"Use negative index\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n\n    test_negative_index()\n    test_value()\n\n"
          },
          "description_text": "\nYou can use negative numbers in the indexing operator to count characters ‚Äòbackwards‚Äô from the end of the string.\n\u003cbr\u003e\u003cbr\u003e\nUse negative index to get the \u003ccode\u003e\u0027!\u0027\u003c/code\u003e sign from \u003ccode\u003elong_string\u003c/code\u003e\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:54:37 AM",
          "task_type": "edu"
        },
        {
          "name": "String slicing",
          "stepic_id": 186024,
          "task_files": {
            "slicing.py": {
              "name": "slicing.py",
              "text": "monty_python \u003d \"Monty Python\"\nmonty \u003d monty_python[:5]      # one or both index could be dropped. monty_python[:5] is equal to monty_python[0:5]\nprint(monty)\npython \u003d type here\nprint(python)\n",
              "placeholders": [
                {
                  "offset": 167,
                  "length": 9,
                  "hints": [
                    "You can leave one or both indices empty."
                  ],
                  "possible_answer": "monty_python[6:]",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, import_task_file, get_answer_placeholders\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if hasattr(file, \"python\") and file.python \u003d\u003d \"Python\":\n        passed()\n    else:\n        failed(\"Check indices used in slicing\")\n\n\ndef test_monty_python():\n    window \u003d get_answer_placeholders()[0]\n    if \"monty_python\" in window:\n        passed()\n    else:\n        failed(\"Use slicing\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_value()\n    test_monty_python()"
          },
          "description_text": "\nSlicing is used to get multiple characters (a substring) from a string.\nIts syntax is similar to that of indexing, but instead of just one index you use two indices (numbers)\nseparated by a colon, e.g. \u003ccode\u003estr[ind1:ind2]\u003c/code\u003e.\n\n\u003ch5\u003eExample\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003e\nstr[start:end] # items start through end-1\nstr[start:]    # items start through the rest of the array\nstr[:end]      # items from the beginning through end-1\nstr[:]         # a copy of the whole array\n\u003c/code\u003e\u003c/pre\u003e\n\nUse slicing to get \u003ccode\u003e\"Python\"\u003c/code\u003e from the \u003ccode\u003emonty_python\u003c/code\u003e variable.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:54:37 AM",
          "task_type": "edu"
        },
        {
          "name": "In operator",
          "stepic_id": 186025,
          "task_files": {
            "in_operator.py": {
              "name": "in_operator.py",
              "text": "ice_cream \u003d \"ice cream\"\nprint(\"cream\" in ice_cream)    # print boolean result directly\n\ncontains \u003d type here\nprint(contains)\n",
              "placeholders": [
                {
                  "offset": 99,
                  "length": 9,
                  "hints": [
                    "Use \u0027in\u0027 operator."
                  ],
                  "possible_answer": "\u0027ice\u0027 in ice_cream",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if hasattr(file, \"contains\") and file.contains:\n        passed()\n    else:\n        failed(\"Use \u0027in\u0027 operator for this check\")\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n\n    if \" in \" in window:\n        passed()\n    else:\n        failed(\"Use \u0027in\u0027 operator for this check\")\n\ndef test_ice_cream():\n    window \u003d get_answer_placeholders()[0]\n\n    if \"ice cream\" in window or \"ice_cream\":\n        passed()\n    else:\n        failed(\"Check if there is \u0027ice\u0027 in \u0027ice cream\u0027\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n\n    test_value()\n    test_window()\n    test_ice_cream()\n"
          },
          "description_text": "\nIf you want to check whether a string contains a specific letter or a substring, you can use the \u003ccode\u003ein\u003c/code\u003e keyword.\n\u003cbr\u003e\u003cbr\u003e\nCheck if there is \u003ccode\u003e\"ice\"\u003c/code\u003e in \u003ccode\u003e\"ice cream\"\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:54:37 AM",
          "task_type": "edu"
        },
        {
          "name": "String length",
          "stepic_id": 186026,
          "task_files": {
            "len_function.py": {
              "name": "len_function.py",
              "text": "phrase \u003d \"\"\"\nIt is a really long string\ntriple-quoted strings are used\nto define multi-line strings\n\"\"\"\nfirst_half \u003d type here\nprint(first_half)\n",
              "placeholders": [
                {
                  "offset": 117,
                  "length": 9,
                  "hints": [
                    "Remember about string slicing."
                  ],
                  "possible_answer": "phrase[:int(len(phrase)/2)]",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders, get_file_output\n\n\ndef test_value():\n    output \u003d get_file_output()\n    answer \u003d [\u0027It is a really long string\u0027, \u0027triple-quoted st\u0027]\n    if \u0027to define multi-line strings\u0027 in output:\n        failed(\"Too long string in the output\")\n    else:\n        passed()\n\n    if all(word in output for word in answer):\n        passed()\n    else:\n        failed(\"Too short string in the output\")\n\ndef test_value_python3():\n    import sys\n    if sys.version[0] !\u003d \"3\":\n        passed()\n        return\n    try:\n        import_task_file()\n        passed()\n    except TypeError:\n        failed(\"Division operator returns float in Python 3. Use int() function to convert float to integer.\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    test_value_python3()\n    run_common_tests()\n\n    test_value()\n"
          },
          "description_text": "\nThe \u003ccode\u003elen()\u003c/code\u003e function is used to count how many characters a string contains.\n\u003cbr\u003e\u003cbr\u003e\nGet the first half of the string stored in the variable \u003ccode\u003ephrase\u003c/code\u003e. \u003cbr\u003e\nNote: Remember about type conversion.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:54:37 AM",
          "task_type": "edu"
        },
        {
          "name": "Character escaping",
          "stepic_id": 186027,
          "task_files": {
            "character_escaping.py": {
              "name": "character_escaping.py",
              "text": "dont_worry \u003d \"Don\u0027t worry about apostrophes\"\nprint(dont_worry)\nprint(\"\\\"Sweet\\\" is an ice-cream\")\nprint(\u0027text\u0027)\n",
              "placeholders": [
                {
                  "offset": 105,
                  "length": 4,
                  "hints": [
                    "Use backslash \\\\ to escape quotes."
                  ],
                  "possible_answer": "The name of this ice-cream is \"Sweet\\\u0027n\\\u0027Tasty\"",
                  "placeholder_text": "text"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed, get_file_output\n\n\ndef test_value():\n    window \u003d get_answer_placeholders()[0]\n\n    first \u003d \"The name of this ice-cream is \\\\\\\"Sweet\u0027n\u0027Tasty\\\\\\\"\"\n    second \u003d \u0027The name of this ice-cream is \"Sweet\\\\\\\u0027n\\\\\\\u0027Tasty\"\u0027\n\n    if first in window or second in window:\n        passed()\n    else:\n        if \u0027\\\\\\\"Sweet\u0027 in window or \u0027Tasty\\\\\\\"\u0027 in window:\n            failed(\"There is no need to escape double quotation mark in single quoted string\")\n        failed(\"Sorry, the wrong string is printed\")\n\n\ndef test_output():\n    output \u003d get_file_output()\n    index \u003d output.index(\u0027\u0027\u0027\\\"Sweet\\\" is an ice-cream\u0027\u0027\u0027)\n    if index \u003e 0:\n        if len(output) \u003e index + 2:\n            failed(\"Print output in one line\")\n    passed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_output()\n    test_value()\n"
          },
          "description_text": "\nBackslash is used to escape single or double quotation marks,\nfor example \u003ccode\u003e\u0027It\\\u0027s me\u0027\u003c/code\u003e or \u003ccode\u003e\"She said \\\"Hello\\\"\"\u003c/code\u003e.\nThe special symbol \u003ccode\u003e\u0027\\n\u0027\u003c/code\u003e is used to add a line break to a string.\n\u003cbr\u003e\nSingle quotation mark could be used in double quoted string without escaping and vice versa.\n\u003cbr\u003e\u003cbr\u003e\nPrint out the following text using one string:\u003cbr\u003e\nThe name of this ice-cream is \"Sweet\u0027n\u0027Tasty\"\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:54:37 AM",
          "task_type": "edu"
        },
        {
          "name": "Basic string methods",
          "stepic_id": 186028,
          "task_files": {
            "string_methods.py": {
              "name": "string_methods.py",
              "text": "monty_python \u003d \"Monty Python\"\nprint(monty_python)\n\nprint(monty_python.lower())    # print lower-cased version of the string\n\nprint(upper cased monty_python)\n",
              "placeholders": [
                {
                  "offset": 131,
                  "length": 24,
                  "hints": [
                    "Look at the lower() method usage."
                  ],
                  "possible_answer": "monty_python.upper()",
                  "placeholder_text": "upper cased monty_python"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_value():\n    window \u003d get_answer_placeholders()[0]\n\n    if \"monty_python.upper()\" in window:\n        passed()\n    else:\n        failed(\"Use upper() method\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_value()\n\n"
          },
          "description_text": "\nThere are a lot of useful string methods. You can use the \u003ccode\u003elower()\u003c/code\u003e\nmethod to get rid of any capitalization in your strings.\nThe \u003ccode\u003eupper()\u003c/code\u003e method is used to make a string uppercase.\nTo call any string method, type a dot after the string (or a variable containing the string)\nand the method name after it, e.g. \u003ccode\u003e\"John\".upper()\u003c/code\u003e.\nIn PyCharm, you can explore all available string methods by using Ctrl+Space after a dot.\n\u003cbr\u003e\u003cbr\u003e\nPrint \u003ccode\u003emonty_python\u003c/code\u003e in upper case.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:54:37 AM",
          "task_type": "edu"
        },
        {
          "name": "String formatting",
          "stepic_id": 186029,
          "task_files": {
            "string_formatting.py": {
              "name": "string_formatting.py",
              "text": "name \u003d \"John\"\nprint(\"Hello, PyCharm! My name is %s!\" % name)     # Note: %s is inside the string, % is after the string\n\nprint(\"I\u0027m special symbol years old\" % years)\n",
              "placeholders": [
                {
                  "offset": 132,
                  "length": 14,
                  "hints": [
                    "Use %d special symbol."
                  ],
                  "possible_answer": "%d",
                  "placeholder_text": "special symbol"
                },
                {
                  "offset": 160,
                  "length": 5,
                  "hints": [
                    "How old are you?"
                  ],
                  "possible_answer": "17",
                  "placeholder_text": "years"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, get_answer_placeholders, import_task_file, get_file_output\n\n\ndef test_window1():\n    windows \u003d get_answer_placeholders()\n\n    if windows[1].isdigit():\n        passed()\n        return\n    else:\n        output \u003d get_file_output()\n        if len(output) \u003e 1:\n            import re\n\n            p \u003d re.compile(\"I\u0027m (\\d*) years old\")\n            if p.match(output[1]) is not None:\n                passed()\n                return\n    failed(\"Print digit\")\n\n\ndef test_window():\n    windows \u003d get_answer_placeholders()\n\n    if windows[0] \u003d\u003d \"%d\":\n        passed()\n    else:\n        failed(\"Use %d special symbol\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_window1()\n"
          },
          "description_text": "\nThe \u003ccode\u003e%\u003c/code\u003e operator after a string is used to combine a string with variables.\nThe \u003ccode\u003e%\u003c/code\u003e operator will replace \u003ccode\u003e%s\u003c/code\u003e in a string with the string variable that comes after it.\nThe \u003ccode\u003e%d\u003c/code\u003e special symbol is used as a placeholder for numeric or decimal values.\n\u003cbr\u003e\u003cbr\u003e\nTell PyCharm how old you are.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:54:37 AM",
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 13422,
      "update_date": "Dec 21, 2017 6:56:08 AM",
      "title": "Week 3",
      "task_list": [
        {
          "name": "Boolean operators",
          "stepic_id": 186037,
          "task_files": {
            "boolean_operators.py": {
              "name": "boolean_operators.py",
              "text": "name \u003d \"John\"\nage \u003d 17\n\nprint(name \u003d\u003d \"John\" or age \u003d\u003d 17)    # checks that either name equals to \"John\" OR age equals to 17\n\nprint(John is not 23 years old)\n",
              "placeholders": [
                {
                  "offset": 132,
                  "length": 24,
                  "hints": [
                    "Use and keyword and !\u003d operator."
                  ],
                  "possible_answer": "name \u003d\u003d \u0027John\u0027 and age !\u003d 23",
                  "placeholder_text": "John is not 23 years old"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"name\" in window and \"John\" in window and \"and\" in window and \"23\" in window:\n        passed()\n    else:\n        failed(\"Use \u0027and\u0027 keyword and !\u003d operator\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"Use \u0027and\u0027 keyword and !\u003d operator\")\n    test_window()"
          },
          "description_text": "\nBoolean operators compare statements and return results in boolean values.\nThe boolean operator \u003ccode\u003eand\u003c/code\u003e returns \u003ccode\u003eTrue\u003c/code\u003e when the expressions on both sides of \u003ccode\u003eand\u003c/code\u003e are \u003ccode\u003eTrue\u003c/code\u003e.\nThe boolean operator \u003ccode\u003eor\u003c/code\u003e returns \u003ccode\u003eTrue\u003c/code\u003e when at least one expression on either side of \u003ccode\u003eor\u003c/code\u003e is \u003ccode\u003eTrue\u003c/code\u003e.\nThe boolean operator \u003ccode\u003enot\u003c/code\u003e inverts the boolean expression it precedes.\n\u003cbr\u003e\u003cbr\u003e\nCheck if \u003ccode\u003ename\u003c/code\u003e is equal to \u003ccode\u003e\"John\"\u003c/code\u003e and he is not \u003ccode\u003e23\u003c/code\u003e years old.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:07 AM",
          "task_type": "edu"
        },
        {
          "name": "Boolean operators order",
          "stepic_id": 186038,
          "task_files": {
            "boolean_order.py": {
              "name": "boolean_order.py",
              "text": "name \u003d \"John\"\nage \u003d 17\n\nprint(name \u003d\u003d \"John\" or not age \u003e 17)\n\nprint(name \u003d\u003d \"John\" or not age \u003e 17)\n\nprint(\"name\" is \"Ellis\" or not (\"name\" equal \"John\" and he is 17 years old))\n",
              "placeholders": [
                {
                  "offset": 108,
                  "length": 69,
                  "hints": [
                    "Combine \u0027and\u0027, \u0027or\u0027 and \u0027not\u0027 keywords."
                  ],
                  "possible_answer": "name is \"Ellis\" or not (name is \"John\" and age \u003d\u003d 17)",
                  "placeholder_text": "\"name\" is \"Ellis\" or not (\"name\" equal \"John\" and he is 17 years old)"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \" and \" in window and \" or \" in window and \" not \" in window:\n        passed()\n    else:\n        failed(\"Use \u0027and\u0027, \u0027or\u0027 and \u0027not\u0027 keywords\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"Use \u0027and\u0027, \u0027or\u0027 and \u0027not\u0027 keywords\")\n    test_window()"
          },
          "description_text": "\nBoolean operators are not evaluated from left to right. There\u0027s an order of operations for boolean operators:\n\u003ccode\u003enot\u003c/code\u003e is evaluated first, \u003ccode\u003eand\u003c/code\u003e is evaluated next, \u003ccode\u003eor\u003c/code\u003e is evaluated last.\n\u003cbr\u003e\u003cbr\u003e\nCheck if \u003ccode\u003ename\u003c/code\u003e is \u003ccode\u003e\"Ellis\"\u003c/code\u003e or\nit\u0027s not true that \u003ccode\u003ename\u003c/code\u003e equal \u003ccode\u003e\"John\"\u003c/code\u003e and\nhe is \u003ccode\u003e17\u003c/code\u003e years old at the same time.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:07 AM",
          "task_type": "edu"
        },
        {
          "name": "If statement",
          "stepic_id": 186039,
          "task_files": {
            "if_statement.py": {
              "name": "if_statement.py",
              "text": "name \u003d \"John\"\nage \u003d 17\n\nif name \u003d\u003d \"John\" or age \u003d\u003d 17:   # check that name is \"John\" or age is 17. If so print next 2 lines.\n    print(\"name is John\")\n    print(\"John is 17 years old\")\n\ntasks \u003d [\u0027task1\u0027, \u0027task2\u0027]    # create new list\n\ncheck if \u0027tasks\u0027 is empty\n    print(\"empty\")\n",
              "placeholders": [
                {
                  "offset": 236,
                  "length": 25,
                  "hints": [
                    "Use len function to check if tasks is empty."
                  ],
                  "possible_answer": "if len(tasks) \u003d\u003d 0:",
                  "placeholder_text": "check if \u0027tasks\u0027 is empty"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \":\" in window:\n        passed()\n    else:\n        failed(\"Don\u0027t forget a column at the end\")\n\n\ndef test_len():\n    window \u003d get_answer_placeholders()[0]\n    if \"len\" in window:\n        passed()\n    elif \"not\" in window:\n        passed()\n    else:\n        failed(\"Use len function to check that tasks is empty\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_len()"
          },
          "description_text": "\nThe \u003ccode\u003eif\u003c/code\u003e keyword is used to form a conditional statement that executes some specified code after checking if its expression is \u003ccode\u003eTrue\u003c/code\u003e.\nPython uses indentation to define code blocks.\n\u003cbr\u003e\u003cbr\u003e\nPrint \u003ccode\u003e\"empty\"\u003c/code\u003e if the \u003ccode\u003etasks\u003c/code\u003e list is empty.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:07 AM",
          "task_type": "edu"
        },
        {
          "name": "Else, elif part in if statement",
          "stepic_id": 186040,
          "task_files": {
            "else_elif.py": {
              "name": "else_elif.py",
              "text": "x \u003d 28\n\nif x \u003c 0:\n    print(\u0027x \u003c 0\u0027)                      # executes only if x \u003c 0\nelif x \u003d\u003d 0:\n    print(\u0027x is zero\u0027)                 # if it\u0027s not true that x \u003c 0, check if x \u003d\u003d 0\nelif x \u003d\u003d 1:\n    print(\u0027x \u003d\u003d 1\u0027)                    # if it\u0027s not true that x \u003c 0 and x !\u003d 0, check if x \u003d\u003d 1\nelse:\n    print(\u0027non of the above is true\u0027)\n\nname \u003d \"John\"\n\ncheck if name equal to \"John\"\n    print(True)\notherwise\n    print(False)\n",
              "placeholders": [
                {
                  "offset": 352,
                  "length": 29,
                  "hints": [
                    "Use if keyword and \u003d\u003d operator."
                  ],
                  "possible_answer": "if name \u003d\u003d \u0027John\u0027:",
                  "placeholder_text": "check if name equal to \"John\""
                },
                {
                  "offset": 398,
                  "length": 9,
                  "hints": [
                    "Use else keyword."
                  ],
                  "possible_answer": "else:",
                  "placeholder_text": "otherwise"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed\n\n\ndef test_window1():\n    window \u003d get_answer_placeholders()[0]\n    if \"John\" in window and \"if \" in window:\n        if \"\u003d\u003d\" in window or \"is\" in window:\n            passed()\n        else:\n            failed(\"Check equality\")\n    else:\n        failed(\"Use if keyword\")\n\n\ndef test_window2():\n    window \u003d get_answer_placeholders()[1]\n    if \"else\" in window:\n        passed()\n    else:\n        failed(\"Use else keyword\")\n\n\ndef test_columns():\n    windows \u003d get_answer_placeholders()\n    if \":\" in windows[0] and \":\" in windows[1]:\n        passed()\n    else:\n        failed(\"Don\u0027t forget a colon at the end\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"Use if/else keywords\")\n    test_window1()\n    test_window2()\n    test_columns()\n"
          },
          "description_text": "\nThe \u003ccode\u003eelse\u003c/code\u003e statement complements the \u003ccode\u003eif\u003c/code\u003e\nstatement. The \u003ccode\u003eelif\u003c/code\u003e keyword is short for \"else if\".\n\u003cbr\u003e\u003cbr\u003e\nPrint \u003ccode\u003eTrue\u003c/code\u003e if name is equal to \u003ccode\u003e\"John\"\u003c/code\u003e\nand \u003ccode\u003eFalse\u003c/code\u003e otherwise.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:07 AM",
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 13423,
      "update_date": "Dec 21, 2017 6:56:34 AM",
      "title": "Week 4",
      "task_list": [
        {
          "name": "For loop",
          "stepic_id": 186041,
          "task_files": {
            "for_loop.py": {
              "name": "for_loop.py",
              "text": "for i in range(5):    # for each number i in range 0-4. range(5) function returns list [0, 1, 2, 3, 4]\n    print(i)          # this line is executed 5 times. First time i equals 0, then 1, ...\n\n\nprimes \u003d [2, 3, 5, 7]   # create new list\n\niterate over primes using for loop\n    print(prime)\n",
              "placeholders": [
                {
                  "offset": 238,
                  "length": 34,
                  "hints": [
                    "Use for loop to iterate over \u0027primes\u0027."
                  ],
                  "possible_answer": "for prime in primes:",
                  "placeholder_text": "iterate over primes using for loop"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"prime\" in window and \"for \" in window  and \" in \" in window:\n        passed()\n    else:\n        failed(\"Use for loop to iterate over \u0027primes\u0027\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n"
          },
          "description_text": "\n\u003ccode\u003efor\u003c/code\u003e loops are used to iterate over a given sequence.\nOn each iteration, the variable defined in the \u003ccode\u003efor\u003c/code\u003e\nloop will be assigned to the next value in the list.\n\n\u003cbr\u003e\u003cbr\u003e\nPrint each prime number from the \u003ccode\u003eprimes\u003c/code\u003e list using the \u003ccode\u003efor\u003c/code\u003e loop.\nA prime number is a natural number greater than \u003ccode\u003e1\u003c/code\u003e that has no positive divisors other than \u003ccode\u003e1\u003c/code\u003e and itself.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:29 AM",
          "task_type": "edu"
        },
        {
          "name": "For loop using string",
          "stepic_id": 186042,
          "task_files": {
            "for_string.py": {
              "name": "for_string.py",
              "text": "hello_world \u003d \"Hello, World!\"\n\nfor ch in hello_world:    # print each character from hello_world\n    print(ch)\n\nlength \u003d 0      # initialize length variable\n\ncount how many characters are in the hello_world using loop\n    length +\u003d 1     # add 1 to the length on each iteration\n\nprint(len(hello_world) \u003d\u003d length)\n",
              "placeholders": [
                {
                  "offset": 158,
                  "length": 59,
                  "hints": [
                    "Use for loop to iterate over \u0027hello_world\u0027 string."
                  ],
                  "possible_answer": "for ch in hello_world:",
                  "placeholder_text": "count how many characters are in the hello_world using loop"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, import_task_file\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if hasattr(file, \"length\") and file.length \u003d\u003d 13:\n        passed()\n    else:\n        failed(\"Count again\")\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"for \" in window:\n        passed()\n    else:\n        failed(\"Use a for loop to iterate over the hello_world string\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_value()"
          },
          "description_text": "\nStrings are very similar to lists in Python. You can use string to iterate over it.\n\u003cbr\u003e\u003cbr\u003e\nUse a loop to count how many characters \u003ccode\u003ehello_world\u003c/code\u003e contains. Store this number in the \u003ccode\u003elength\u003c/code\u003e variable.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:29 AM",
          "task_type": "edu"
        },
        {
          "name": "While loop",
          "stepic_id": 186043,
          "task_files": {
            "while_loop.py": {
              "name": "while_loop.py",
              "text": "square \u003d 1\n\nwhile square \u003c\u003d 10:\n    print(square)    # This code is executed 10 times\n    square +\u003d 1      # This code is executed 10 times\n\nprint(\"Finished\")  # This code is executed once\n\nsquare \u003d 0\nnumber \u003d 1\n\nprint all squares from 0 to 99\n    square \u003d number ** 2\n    print(square)\n    number +\u003d 1\n",
              "placeholders": [
                {
                  "offset": 213,
                  "length": 30,
                  "hints": [
                    "Check if \u0027number\u0027 is strictly less than 10 in condition."
                  ],
                  "possible_answer": "while square \u003c 81:",
                  "placeholder_text": "print all squares from 0 to 99"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, get_file_output\n\n\ndef test_column():\n    window \u003d get_answer_placeholders()[0]\n    if \":\" in window:\n        passed()\n    else:\n        failed(\"Don\u0027t forget a colon at the end\")\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"while \" in window:\n        passed()\n    else:\n        failed(\"Use a while loop to iterate\")\n\n\ndef test_window1():\n    window \u003d get_answer_placeholders()[0]\n    if \"number\" in window:\n        passed()\n    elif \u0027square\u0027 in window:\n        passed()\n    else:\n        failed(\"Use \u0027number\u0027 variable in the while condition\")\n\n\ndef test_window2():\n    window \u003d get_answer_placeholders()[0]\n    if \"10\" in window:\n        if \"\u003c\" in window or \"10 \u003e\" in window:\n            passed()\n    elif \u0027square\u0027 in window:\n        if \"\u003c\" and \"81\" in window:\n            passed()\n    else:\n        failed(\"Check that \u0027number\u0027 is strictly less than 10 in the condition\")\n\n\ndef test_output():\n    output \u003d get_file_output()\n    if \"Finished\" not in output:\n        failed(\"Sorry, this answer is wrong\")\n        return\n    border \u003d output.index(\"Finished\")\n    user_squares \u003d output[border + 1:]\n    user_squares \u003d [x for x in user_squares if x]\n    correct_answer \u003d list(map(str, [x * x for x in range(1, 10)]))\n    if correct_answer \u003d\u003d user_squares:\n        passed()\n    else:\n        failed(\"Sorry, this answer is wrong\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_window1()\n    test_window2()\n    test_column()\n    test_output()\n"
          },
          "description_text": "\nA \u003ccode\u003ewhile\u003c/code\u003e loop is similar to an \u003ccode\u003eif\u003c/code\u003e statement: it executes some code if some condition is true.\nThe key difference is that it will continue to execute indented code for as long as the condition is \u003ccode\u003eTrue\u003c/code\u003e.\n\u003cbr\u003e\u003cbr\u003e\nPrint all squares from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e99\u003c/code\u003e \u003ccode\u003e(1, 4, ... , 81)\u003c/code\u003e.\nUse \u003ccode\u003enumber\u003c/code\u003e variable in \u003ccode\u003ewhile\u003c/code\u003e loop.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:29 AM",
          "task_type": "edu"
        },
        {
          "name": "Break keyword",
          "stepic_id": 186044,
          "task_files": {
            "break_keyword.py": {
              "name": "break_keyword.py",
              "text": "count \u003d 0\n\nwhile True:  # this condition cannot possibly be false\n    print(count)\n    count +\u003d 1\n    if count \u003e\u003d 5:\n        break           # exit loop if count \u003e\u003d 5\n\n\nzoo \u003d [\"lion\", \u0027tiger\u0027, \u0027elephant\u0027]\nwhile True:                         # this condition cannot possibly be false\n    animal \u003d zoo.pop()       # extract one element from the list end\n    print(animal)\n    if exit loop if animal is \u0027elephant\u0027:\n        break           # exit loop\n",
              "placeholders": [
                {
                  "offset": 377,
                  "length": 33,
                  "hints": [
                    "Use \u003d\u003d to check if animal is equal to \u0027elephant\u0027."
                  ],
                  "possible_answer": "animal \u003d\u003d \u0027elephant\u0027",
                  "placeholder_text": "exit loop if animal is \u0027elephant\u0027"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"elephant\" in window and \"animal\" in window:\n        passed()\n    else:\n        failed(\"Use \u003d\u003d to check that animal is equal to \u0027elephant\u0027\")\n\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()"
          },
          "description_text": "\nAn infinite loop is a loop that never exits. If the loop condition happens to always be \u003ccode\u003eTrue\u003c/code\u003e, such a loop becomes infinite.\nThe \u003ccode\u003ebreak\u003c/code\u003e keyword is used to exit the current loop.\n\u003cbr\u003e\u003cbr\u003e\nExit the loop correctly using \u003ccode\u003ebreak\u003c/code\u003e statement.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:29 AM",
          "task_type": "edu"
        },
        {
          "name": "Continue keyword",
          "stepic_id": 186045,
          "task_files": {
            "continue_keyword.py": {
              "name": "continue_keyword.py",
              "text": "for i in range(5):\n    if i \u003d\u003d 3:\n        continue   # skip the rest of the code inside loop for current i value\n    print(i)\n\nfor x in range(10):\n    if Check if x is even:\n        continue   # skip print(x) for this loop\n    print(x)\n",
              "placeholders": [
                {
                  "offset": 154,
                  "length": 18,
                  "hints": [
                    "Use % operator to check if x is even."
                  ],
                  "possible_answer": "x % 2 \u003d\u003d 0",
                  "placeholder_text": "Check if x is even"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, get_answer_placeholders, get_file_output\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"x\" in window and \"%\" in window:\n        passed()\n    else:\n        failed(\"Use % operator to check that x is even\")\n\n\ndef test_output():\n    numbers \u003d [\u00270\u0027, \u00272\u0027, \u00274\u0027, \u00276\u0027, \u00278\u0027]\n    output \u003d get_file_output()\n    if len(output) \u003e 4:\n        output \u003d output[4:]\n    if any(number in output for number in numbers):\n        failed(\"Print only odd the numbers\")\n    else:\n        passed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_output()\n    test_window()\n"
          },
          "description_text": "\nThe \u003ccode\u003econtinue\u003c/code\u003e keyword is used to skip the rest of the code inside the loop for the currently executed loop and return to the \u003ccode\u003efor\u003c/code\u003e or \u003ccode\u003ewhile\u003c/code\u003e statement.\n\u003cbr\u003e\u003cbr\u003e\nPrint only odd the numbers \u003ccode\u003e1, 3, 5, 7, 9\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:29 AM",
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 13420,
      "update_date": "Dec 21, 2017 6:55:46 AM",
      "title": "Week 5",
      "task_list": [
        {
          "name": "Lists introduction",
          "stepic_id": 186030,
          "task_files": {
            "lists.py": {
              "name": "lists.py",
              "text": "squares \u003d [1, 4, 9, 16, 25]   # create new list\nprint(squares)\n\nprint(slice)\n",
              "placeholders": [
                {
                  "offset": 70,
                  "length": 5,
                  "hints": [
                    "Use list slicing lst[index1:index2]"
                  ],
                  "possible_answer": "squares[1:4]",
                  "placeholder_text": "slice"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed, get_file_output, test_file_importable\n\n\ndef test_value():\n    output \u003d get_file_output()[1]\n    if \"[4, 9, 16]\" in output:\n        passed()\n    else:\n        failed(\"Use list slicing lst[index1:index2]\")\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"squares\" in window and \"[\" in window and \"]\" in window and \":\" in window:\n        passed()\n    else:\n        failed(\"Use list slicing lst[index1:index2]\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    test_file_importable()\n    test_value()\n    test_window()\n    run_common_tests(\"Use list slicing lst[index1:index2]\")\n\n"
          },
          "description_text": "\nA list is a data structure you can use to store a collection of different pieces of information under a single variable name.\nA list can be written as an array of comma-separated values (items) between square brackets,\ne.g. \u003ccode\u003elst \u003d [item1, item2]\u003c/code\u003e.\nLists might contain items of different types, but usually all the items in the list are of the same type.\nLike strings, lists can be indexed and sliced (see \u003ca href\u003d\"#lesson3#task3#\"\u003eLesson 3\u003c/a\u003e).\n\u003cbr\u003e\u003cbr\u003e\nUse list slicing to print \u003ccode\u003e[4, 9, 16]\u003c/code\u003e.\n\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:55:41 AM",
          "task_type": "edu"
        },
        {
          "name": "Lists operations",
          "stepic_id": 186031,
          "task_files": {
            "list_operations.py": {
              "name": "list_operations.py",
              "text": "animals \u003d [\u0027elephant\u0027, \u0027lion\u0027, \u0027tiger\u0027, \"giraffe\"]  # create new list\nprint(animals)\n\nanimals +\u003d [\"monkey\", \u0027dog\u0027]    # add two items to the list\nprint(animals)\n\nanimals.append(\"dino\")   # add one more item to the list using append() method\nprint(animals)\n\nreplace \u0027dino\u0027 with \u0027dinosaur\u0027\nprint(animals)\n",
              "placeholders": [
                {
                  "offset": 257,
                  "length": 30,
                  "hints": [
                    "Use indexing operation and assignment."
                  ],
                  "possible_answer": "animals[-1] \u003d \u0027dinosaur\u0027",
                  "placeholder_text": "replace \u0027dino\u0027 with \u0027dinosaur\u0027"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, import_task_file, passed, failed, get_answer_placeholders\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if hasattr(file, \"animals\") and \"dinosaur\" in file.animals and not \"dino\" in file.animals:\n        passed()\n    else:\n        failed(\"Replace \u0027dino\u0027 with \u0027dinosaur\u0027\")\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"animals\" in window and \"[\" in window:\n        passed()\n    else:\n        failed(\"Replace \u0027dino\u0027 with \u0027dinosaur\u0027\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"Use indexing and assignment\")\n    test_value()\n    test_window()\n"
          },
          "description_text": "\nYou can add new items at the end of the list, by using the \u003ccode\u003eappend()\u003c/code\u003e method and concatenation.\nUnlike strings, lists are a mutable type, i.e. it is possible to change their content using\n\u003ccode\u003elst[index] \u003d new_item\u003c/code\u003e\n\u003cbr\u003e\u003cbr\u003e\nReplace \u003ccode\u003e\u0027dino\u0027\u003c/code\u003e with \u003ccode\u003e\u0027dinosaur\u0027\u003c/code\u003e in the \u003ccode\u003eanimals\u003c/code\u003e list.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:55:41 AM",
          "task_type": "edu"
        },
        {
          "name": "List items",
          "stepic_id": 186032,
          "task_files": {
            "list_items.py": {
              "name": "list_items.py",
              "text": "animals \u003d [\u0027elephant\u0027, \u0027lion\u0027, \u0027tiger\u0027, \"giraffe\", \"monkey\", \u0027dog\u0027]   # create new list\nprint(animals)\n\nanimals[1:3] \u003d [\u0027cat\u0027]    # replace 2 items -- \u0027lion\u0027 and \u0027tiger\u0027 with one item -- \u0027cat\u0027\nprint(animals)\n\nanimals[1:3] \u003d []     # remove 2 items -- \u0027cat\u0027 and \u0027giraffe\u0027 from the list\nprint(animals)\n\nclear list\nprint(animals)\n",
              "placeholders": [
                {
                  "offset": 301,
                  "length": 10,
                  "hints": [
                    "Use assignment to an empty list []."
                  ],
                  "possible_answer": "animals[:] \u003d []",
                  "placeholder_text": "clear list"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, import_task_file, get_answer_placeholders\n\n\ndef test_value():\n    file \u003d import_task_file()\n    if hasattr(file, \"animals\") and not file.animals:\n        passed()\n    else:\n        failed(\"Clear animals list\")\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"animals\" in window:\n        passed()\n    else:\n        failed(\"Clear animals list\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"Use assignment to empty list\")\n    test_window()\n    test_value()\n"
          },
          "description_text": "\nAssignment to slices is also possible, and this can even change the size of a list or clear it entirely.\n\u003cbr\u003e\u003cbr\u003e\nClear \u003ccode\u003eanimals\u003c/code\u003e list.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:55:41 AM",
          "task_type": "edu"
        },
        {
          "name": "Tuples",
          "stepic_id": 186033,
          "task_files": {
            "tuples.py": {
              "name": "tuples.py",
              "text": "alphabet \u003d (\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027e\u0027, \u0027f\u0027, \u0027g\u0027, \u0027h\u0027, \u0027i\u0027, \u0027j\u0027, \u0027k\u0027, \u0027l\u0027, \u0027m\u0027, \u0027n\u0027, \u0027o\u0027,\n            \u0027p\u0027, \u0027q\u0027, \u0027r\u0027, \u0027s\u0027, \u0027t\u0027, \u0027u\u0027, \u0027v\u0027, \u0027w\u0027, \u0027x\u0027, \u0027y\u0027, \u0027z\u0027)\n\nprint(alphabet length)\n",
              "placeholders": [
                {
                  "offset": 161,
                  "length": 15,
                  "hints": [
                    "Use len() function."
                  ],
                  "possible_answer": "len(alphabet)",
                  "placeholder_text": "alphabet length"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"len(\" in window:\n        passed()\n    else:\n        failed(\"Use len() function\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"Use len() function\")\n    test_window()"
          },
          "description_text": "\nTuples are almost identical to lists. The only significant difference between tuples and lists is that\ntuples cannot be changed:\nyou cannot add, change, or delete elements from the tuple.\nTuples are constructed by a comma operator enclosed in parentheses, for example \u003ccode\u003e(a, b, c)\u003c/code\u003e.\nA single item tuple must have a trailing comma, such as \u003ccode\u003e(d,)\u003c/code\u003e.\n\n\u003cbr\u003e\u003cbr\u003e\nPrint the length of the \u003ccode\u003ealphabet\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:55:41 AM",
          "task_type": "edu"
        },
        {
          "name": "Dictionaries",
          "stepic_id": 186034,
          "task_files": {
            "dicts.py": {
              "name": "dicts.py",
              "text": "# create new dictionary.\nphone_book \u003d {\"John\": 123, \"Jane\": 234, \"Jerard\": 345}    # \"John\", \"Jane\" and \"Jerard\" are keys and numbers are values\nprint(phone_book)\n\n# Add new item to the dictionary\nphone_book[\"Jill\"] \u003d 345\nprint(phone_book)\n\n# Remove key-value pair from phone_book\ndel phone_book[\u0027John\u0027]\n\nprint(Jane\u0027s phone)\n",
              "placeholders": [
                {
                  "offset": 311,
                  "length": 12,
                  "hints": [
                    "Use dict indexing e.g. dct[key]"
                  ],
                  "possible_answer": "phone_book[\u0027Jane\u0027]",
                  "placeholder_text": "Jane\u0027s phone"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"phone_book\" in window and \"Jane\" in window:\n        passed()\n    else:\n        failed(\"Use indexing e.g. dct[key]\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"Use indexing e.g. dct[key]\")\n    test_window()\n"
          },
          "description_text": "\nA dictionary is similar to a list, except that you access its values by looking up a key instead of an index.\nA key can be any string or a number. Dictionaries are enclosed in curly braces e.g.\n\u003ccode\u003edct \u003d {\u0027key1\u0027 : \"value1\", \u0027key2\u0027 : \"value2\"}\u003c/code\u003e.\n\u003cbr\u003e\u003cbr\u003e\nPrint Jane\u0027s phone number from \u003ccode\u003ephone_book\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:55:41 AM",
          "task_type": "edu"
        },
        {
          "name": "Dictionary keys() and values()",
          "stepic_id": 186035,
          "task_files": {
            "dict_key_value.py": {
              "name": "dict_key_value.py",
              "text": "phone_book \u003d {\"John\": 123, \"Jane\": 234, \"Jerard\": 345}  # create new dictionary\nprint(phone_book)\n\n# Add new item to the dictionary\nphone_book[\"Jill\"] \u003d 456\nprint(phone_book)\n\nprint(phone_book.keys())\n\nprint(phone_book values)\n",
              "placeholders": [
                {
                  "offset": 208,
                  "length": 17,
                  "hints": [
                    "Use values() method."
                  ],
                  "possible_answer": "phone_book.values()",
                  "placeholder_text": "phone_book values"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, passed, failed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"phone_book\" in window and \"values()\" in window:\n        passed()\n    else:\n        failed(\"Use values() method\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n"
          },
          "description_text": "\nThere are a lot of useful methods in dictionaries such as \u003ccode\u003ekeys()\u003c/code\u003e and \u003ccode\u003evalues()\u003c/code\u003e. You can explore the rest using\nCtrl + Space after a \u003ccode\u003edict_name\u003c/code\u003e followed by a dot.\n\u003cbr\u003e\u003cbr\u003e\nPrint all values from \u003ccode\u003ephone_book\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:55:41 AM",
          "task_type": "edu"
        },
        {
          "name": "In keyword",
          "stepic_id": 186036,
          "task_files": {
            "in_keyword.py": {
              "name": "in_keyword.py",
              "text": "grocery_list \u003d [\"fish\", \"tomato\", \u0027apples\u0027]   # create new list\n\nprint(\"tomato\" in grocery_list)    # check that grocery_list contains \"tomato\" item\n\ngrocery_dict \u003d {\"fish\": 1, \"tomato\": 6, \u0027apples\u0027: 3}   # create new dictionary\n\nprint(is \u0027fish\u0027 in grocery_dict keys)\n",
              "placeholders": [
                {
                  "offset": 236,
                  "length": 30,
                  "hints": [
                    "Use in keyword."
                  ],
                  "possible_answer": "\u0027fish\u0027 in grocery_dict.keys()",
                  "placeholder_text": "is \u0027fish\u0027 in grocery_dict keys"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"grocery_dict\" in window and \" in \" in window:\n        passed()\n    else:\n        failed(\"Use in keyword\")\n\ndef test_fish():\n    window \u003d get_answer_placeholders()[0]\n    if \"fish\" in window:\n        passed()\n    else:\n        failed(\"Check if grocery_dict keys contain fish\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests(\"Use in keyword\")\n    test_window()\n    test_fish()"
          },
          "description_text": "\nThe \u003ccode\u003ein\u003c/code\u003e keyword is used to check if a list or a dictionary contains a specific item.\nYou can apply \u003ccode\u003ein\u003c/code\u003e to lists or dictionaries the same way as you did with strings.\n\u003cbr\u003e\u003cbr\u003e\nCheck if \u003ccode\u003egrocery_dict\u003c/code\u003e keys contain \u003ccode\u003e\"fish\"\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:55:41 AM",
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 13424,
      "update_date": "Dec 21, 2017 6:56:58 AM",
      "title": "Week 6",
      "task_list": [
        {
          "name": "Definition",
          "stepic_id": 186046,
          "task_files": {
            "functions.py": {
              "name": "functions.py",
              "text": "def hello_world():  # function named my_function\n    print(\"Hello, World!\")\n\nfor i in range(5):\n    hello_world()   # call function defined above 5 times\n\nprint(\u0027I want to be a function\u0027)\nprint(\u0027I want to be a function\u0027)\nprint(\u0027I want to be a function\u0027)\n\n\ndefine a function named \u0027fun\u0027 to replace three lines above\n    print(\u0027I want to be a function\u0027)\n\nfor i in range(3):\n    fun()\n",
              "placeholders": [
                {
                  "offset": 256,
                  "length": 58,
                  "hints": [
                    "Use \u0027def\u0027 keyword to define \u0027fun\u0027 function."
                  ],
                  "possible_answer": "def fun():",
                  "placeholder_text": "define a function named \u0027fun\u0027 to replace three lines above"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, get_answer_placeholders, passed\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"fun\" in window:\n        passed()\n    else:\n        failed(\"Name your function \u0027fun\u0027\")\n\n\ndef test_window1():\n    window \u003d get_answer_placeholders()[0]\n    if \"def \" in window:\n        passed()\n    else:\n        failed(\"Use \u0027def\u0027 keyword to define a function\")\n\n\ndef test_column():\n    window \u003d get_answer_placeholders()[0]\n    if \":\" in window:\n        passed()\n    else:\n        failed(\"Don\u0027t forget a colon at the end of the statement\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_column()\n    test_window1()"
          },
          "description_text": "\nFunctions are a convenient way to divide your code into useful blocks, make it more readable and help reuse it.\nFunctions are defined using the keyword \u003ccode\u003edef\u003c/code\u003e, followed by the function\u0027s name.\n\n\u003cbr\u003e\u003cbr\u003e\nDefine a function to replace duplicate lines in the file.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:53 AM",
          "task_type": "edu"
        },
        {
          "name": "Parameters and call arguments",
          "stepic_id": 186047,
          "task_files": {
            "param_args.py": {
              "name": "param_args.py",
              "text": "def foo(x):                 # x is a function parameter\n    print(\"x \u003d \" + str(x))\n\nfoo(5)   # pass 5 to foo(). Here 5 is an argument passed to function foo.\n\ndefine a function named \u0027square\u0027 that prints square of passed parameter\n    print(x ** 2)\n\nsquare(4)\nsquare(8)\nsquare(15)\nsquare(23)\nsquare(42)\n",
              "placeholders": [
                {
                  "offset": 159,
                  "length": 71,
                  "hints": [
                    "Put parameter \u0027x\u0027 inside parentheses in function definition."
                  ],
                  "possible_answer": "def square(x):",
                  "placeholder_text": "define a function named \u0027square\u0027 that prints square of passed parameter"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, get_answer_placeholders, passed\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"square\" in window and \"def \" in window:\n        passed()\n    else:\n        failed(\"Name your function \u0027square\u0027\")\n\n\ndef test_column():\n    window \u003d get_answer_placeholders()[0]\n    if \":\" in window:\n        passed()\n    else:\n        failed(\"Don\u0027t forget a colon at the end of the statement\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_column()\n    test_window()"
          },
          "description_text": "\nFunction parameters are defined inside the parentheses \u003ccode\u003e()\u003c/code\u003e, following the function name.\nA parameter acts as a variable name for the passed argument.\n\u003cbr\u003e\u003cbr\u003e\nDefine a function that prints the square of the passed parameter.\n\u003cbr\u003e\n\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:53 AM",
          "task_type": "edu"
        },
        {
          "name": "Return value",
          "stepic_id": 186048,
          "task_files": {
            "return_keyword.py": {
              "name": "return_keyword.py",
              "text": "def sum_two_numbers(a, b):\n    return a + b            # return result to the function caller\n\nc \u003d sum_two_numbers(3, 12)  # assign result of function execution to variable \u0027c\u0027\n\n\ndef fib(n):\n    \"\"\"This is documentation string for function. It\u0027ll be available by fib.__doc__()\n    Return a list containing the Fibonacci series up to n.\"\"\"\n    result \u003d []\n    a \u003d 1\n    b \u003d initialize variable b\n    while a \u003c n:\n        result.append(a)\n        tmp_var \u003d b\n        update variable b\n        update variable a\n    return result\n\nprint(fib(10))\n",
              "placeholders": [
                {
                  "offset": 373,
                  "length": 21,
                  "hints": [
                    "Initialize \u0027b\u0027 with 1."
                  ],
                  "possible_answer": "1",
                  "placeholder_text": "initialize variable b"
                },
                {
                  "offset": 465,
                  "length": 17,
                  "hints": [
                    "Update \u0027b\u0027 with \u0027a + b\u0027."
                  ],
                  "possible_answer": "b \u003d a + b",
                  "placeholder_text": "update variable b"
                },
                {
                  "offset": 491,
                  "length": 17,
                  "hints": [
                    "Update \u0027a\u0027 with \u0027tmp_var\u0027."
                  ],
                  "possible_answer": "a \u003d tmp_var",
                  "placeholder_text": "update variable a"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed, import_task_file\n\ndef test_window1():\n    window \u003d get_answer_placeholders()[0]\n    if \"1\" in window:\n        passed()\n    else:\n        failed(\"Initialize b with 1\")\n\n\ndef test_window2():\n    window \u003d get_answer_placeholders()[1]\n    if \"b\" in window and \"a\" in window:\n        passed()\n    else:\n        failed(\"Update b with a + b\")\n\ndef test_window3():\n    window \u003d get_answer_placeholders()[2]\n    if \"tmp_var\" in window:\n        passed()\n    else:\n        failed(\"Update a with tmp_var\")\n\ndef test_function():\n    try:\n        my_file \u003d import_task_file()\n        if hasattr(my_file, \"fib\") and my_file.fib(10) \u003d\u003d [1, 1, 2, 3, 5, 8]:\n            passed()\n        else:\n            failed(\"Check your function for n \u003d 10\")\n    except:\n        failed(\"The file contains syntax errors\")\n\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window1()\n    test_window2()\n    test_window3()\n    test_function()"
          },
          "description_text": "\nFunctions may return a value to the caller, using the keyword \u003ccode\u003ereturn\u003c/code\u003e. You can use the returned value to assign it to a variable or just print it out.\n\u003cbr\u003e\u003cbr\u003e\nIn the Fibonacci sequence, the first two numbers are \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e, and each subsequent number is the sum of the previous two.\nWrite a function that returns a list of the numbers of the Fibonacci series up to \u003ccode\u003en\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:53 AM",
          "task_type": "edu"
        },
        {
          "name": "Default parameters",
          "stepic_id": 186049,
          "task_files": {
            "default_parameter.py": {
              "name": "default_parameter.py",
              "text": "def multiply_by(a, b\u003d2):\n    return a * b\n\nprint(multiply_by(3, 47))\nprint(multiply_by(3))    # call function using default value for b parameter\n\n\ndef hello(add parameters for function, set default value for name):\n    print(\"Hello %s! My name is %s\" % (subject, name))\n\nhello(\"PyCharm\", \"Jane\")    # call \u0027hello\u0027 function with \"PyCharm as a subject parameter and \"Jane\" as a name\nhello(\"PyCharm\")            # call \u0027hello\u0027 function with \"PyCharm as a subject parameter and default value for the name\n",
              "placeholders": [
                {
                  "offset": 158,
                  "length": 55,
                  "hints": [
                    "Set default value for parameter \u0027name\u0027."
                  ],
                  "possible_answer": "subject, name\u003d\u0027John\u0027",
                  "placeholder_text": "add parameters for function, set default value for name"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"\u003d\" in window:\n        passed()\n    else:\n        failed(\"Add a default value to the parameter\")\n\ndef test_window_names():\n    window \u003d get_answer_placeholders()[0]\n    if \"subject\" in window and \"name\" in window:\n        passed()\n    else:\n        failed(\"Add a default value to the parameter\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_window_names()"
          },
          "description_text": "\nSometimes it\u0027s useful to specify a default value for one or more function parameters.\nThis creates a function that can be called with fewer arguments than it is defined to allow.\n\u003cbr\u003e\u003cbr\u003e\nAdd parameters for the \u003ccode\u003ehello\u003c/code\u003e function, and set a default value for the name parameter.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:56:53 AM",
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 13425,
      "update_date": "Dec 21, 2017 6:57:26 AM",
      "title": "Beyond Scope of CMIT-135 - Classes and objects",
      "task_list": [
        {
          "name": "Definition",
          "stepic_id": 186050,
          "task_files": {
            "class_definition.py": {
              "name": "class_definition.py",
              "text": "class MyClass:\n    variable \u003d assign any value to variable\n\n    def foo(self):   # we\u0027ll explain self parameter later in task 4\n        print(\"Hello from function foo\")\n\nmy_object \u003d MyClass()  # variable \"my_object\" holds an object of the class \"MyClass\" that contains the variable and the \"foo\" function\n",
              "placeholders": [
                {
                  "offset": 30,
                  "length": 28,
                  "hints": [
                    "Assign any value to variable."
                  ],
                  "possible_answer": "4",
                  "placeholder_text": "assign any value to variable"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n"
          },
          "description_text": "\nAn object combines variables and functions into a single entity.\nObjects get their variables and functions from classes.\nClasses are essentially templates for creating your objects.\nYou can think of an object as a single data structure that contains data as well as functions.\nFunctions of objects are called methods.\n\u003cbr\u003e\u003cbr\u003e\nAssign value to a variable inside \u003ccode\u003eMyClass\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:57:21 AM",
          "task_type": "edu"
        },
        {
          "name": "Variable access",
          "stepic_id": 186051,
          "task_files": {
            "access_variable.py": {
              "name": "access_variable.py",
              "text": "class MyClass:\n    variable1 \u003d 1\n    variable2 \u003d 2\n\n    def foo(self):     # we\u0027ll explain self parameter later in task 4\n        print(\"Hello from function foo\")\n\nmy_object \u003d MyClass()\nmy_object1 \u003d MyClass()\n\nmy_object.variable2 \u003d 3     # change value stored in variable2 in my_object\n\nprint(my_object.variable2)\nprint(my_object1.variable2)\n\nmy_object.foo()   # call method foo() of object my_object\n\nprint(value of variable1 from my_object)\n\n",
              "placeholders": [
                {
                  "offset": 408,
                  "length": 33,
                  "hints": [
                    "Access \u0027variable1\u0027 using my_object.variable1"
                  ],
                  "possible_answer": "my_object.variable1",
                  "placeholder_text": "value of variable1 from my_object"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"my_object\" in window and \"variable1\" in window:\n        passed()\n    else:\n        failed(\"Access \u0027variable1\u0027 using my_object.variable1\")\n\ndef test_window1():\n    window \u003d get_answer_placeholders()[0]\n    if \"my_object \" in window or \"my_object.\" in window:\n        passed()\n    else:\n        failed(\"Access \u0027variable1\u0027 using my_object.variable1\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_window1()\n"
          },
          "description_text": "\nTo access a variable inside an object, see example below. You can change the values of variables defined in a class for different instances (objects) of this class.\n\u003cbr\u003e\u003cbr\u003e\nPrint the value of \u003ccode\u003evariable1\u003c/code\u003e from \u003ccode\u003emy_object\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:57:21 AM",
          "task_type": "edu"
        },
        {
          "name": "Variable access (1)",
          "stepic_id": 186052,
          "task_files": {
            "access_variable.py": {
              "name": "access_variable.py",
              "text": "class Car:\n    color \u003d \"\"\n    def description(self):\n        description_string \u003d \"This is a %s car.\" % self.color    # we\u0027ll explain self parameter later in task 4\n        return description_string\n\ncar1 \u003d Car()\ncar2 \u003d create object of Car\n\ncar1.color \u003d \"blue\"\nset car2 color\n\nprint(car1.description())\nprint(car2.description())\n",
              "placeholders": [
                {
                  "offset": 220,
                  "length": 20,
                  "hints": [
                    "Create new car using Car()"
                  ],
                  "possible_answer": "Car()",
                  "placeholder_text": "create object of Car"
                },
                {
                  "offset": 262,
                  "length": 14,
                  "hints": [
                    "Change color using car2.color \u003d \"new color\"."
                  ],
                  "possible_answer": "car2.color \u003d \"red\"",
                  "placeholder_text": "set car2 color"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed, get_file_output\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"Car\" in window and \"(\" in window and \")\" in window:\n        passed()\n    else:\n        failed(\"Create a new car using Car()\")\n\n\ndef test_window2():\n    window \u003d get_answer_placeholders()[1]\n    output \u003d get_file_output()\n    if len(output) \u003e 1 and output[1] \u003d\u003d \"This is a red car.\":\n        passed()\n    else:\n        failed(\"Change color using assignment to the car2.color\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_window2()\n"
          },
          "description_text": "\nCreate a new \u003ccode\u003eCar\u003c/code\u003e object \u003ccode\u003ecar2\u003c/code\u003e. Set the \u003ccode\u003ecolor\u003c/code\u003e of \u003ccode\u003ecar2\u003c/code\u003e to \u003ccode\u003e\"red\"\u003c/code\u003e.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:57:21 AM",
          "task_type": "edu"
        },
        {
          "name": "Self explanation",
          "stepic_id": 186053,
          "task_files": {
            "self_parameter.py": {
              "name": "self_parameter.py",
              "text": "class Complex:\n    def create(self, real_part, imag_part):\n        self.r \u003d real_part\n        self.i \u003d imag_part\n\nclass Calculator:\n    current \u003d 0\n\n    def add(self, amount):\n        add number to current\n\n    def get_current(self):\n        return self.current\n",
              "placeholders": [
                {
                  "offset": 184,
                  "length": 21,
                  "hints": [
                    "Add amount to the self.current variable."
                  ],
                  "possible_answer": "self.current +\u003d amount",
                  "placeholder_text": "add number to current"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"self\" in window and \"amount\" in window:\n        passed()\n    else:\n        failed(\"Access the current variable of the class using self.current\")\n\ndef test_window2():\n    window \u003d get_answer_placeholders()[0]\n    if \"amount\" in window:\n        passed()\n    else:\n        failed(\"Add the value of \u0027amount\u0027 to self.current\")\n\ndef test_window3():\n    window \u003d get_answer_placeholders()[0]\n    if \"+\u003d\" in window or (\"+\" in window and \"\u003d\" in window):\n        passed()\n    else:\n        failed(\"Add amount value to self.current\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_window2()\n    test_window3()"
          },
          "description_text": "\nIt\u0027s time to explain the \u003ccode\u003eself\u003c/code\u003e parameter used in previous tasks.\nThe \u003ccode\u003eself\u003c/code\u003e parameter is a Python convention.\n\u003ccode\u003eself\u003c/code\u003e is the first parameter passed to any class method.\nPython will use the \u003ccode\u003eself\u003c/code\u003e parameter to refer to the object being created.\n\u003cbr\u003e\u003cbr\u003e\nImplement the \u003ccode\u003eadd\u003c/code\u003e method. It should add \u003ccode\u003eamount\u003c/code\u003e to the \u003ccode\u003ecurrent\u003c/code\u003e field.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:57:21 AM",
          "task_type": "edu"
        },
        {
          "name": "Special __init__ method",
          "stepic_id": 186054,
          "task_files": {
            "init_method.py": {
              "name": "init_method.py",
              "text": "class Square:\n\n    def __init__(self):    # special method __init__\n        self.sides \u003d 4\n\nsquare \u003d Square()\nprint(square.sides)\n\nclass Car:\n    def __init__(add parameters here):\n        self.color \u003d color\n\ncar \u003d Car(\"blue\")    # Note: you should not pass self parameter explicitly, only color parameter\n\nprint(car.color)\n",
              "placeholders": [
                {
                  "offset": 159,
                  "length": 19,
                  "hints": [
                    "Add two parameters -- self and color."
                  ],
                  "possible_answer": "self, color",
                  "placeholder_text": "add parameters here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"color\" in window:\n        passed()\n    else:\n        failed(\"Add a color parameter\")\n\n\ndef test_window1():\n    window \u003d get_answer_placeholders()[0]\n    if \"self\" in window:\n        passed()\n    else:\n        failed(\"Don\u0027t forget about the self parameter\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_window1()\n"
          },
          "description_text": "\n\u003ccode\u003e__init__\u003c/code\u003e function is used to initialize the objects it creates. \u003ccode\u003e__init__\u003c/code\u003e is short for \"initialize\".\n\u003ccode\u003e__init__()\u003c/code\u003e always takes at least one argument, self, which refers to the object being created.\n\u003ccode\u003e__init__()\u003c/code\u003e function sets up each object the class creates.\n\u003cbr\u003e\u003cbr\u003e\nAdd parameters to the \u003ccode\u003eCar\u003c/code\u003e class so we can create it with a specific color.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:57:21 AM",
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 13427,
      "update_date": "Dec 21, 2017 6:57:44 AM",
      "title": "Beyond Scope of CMIT-135 - Modules and packages",
      "task_list": [
        {
          "name": "Import module",
          "stepic_id": 186055,
          "task_files": {
            "calculator.py": {
              "name": "calculator.py",
              "text": "\"\"\"\nThis module contains Calculator class\n\"\"\"\n\n\nclass Calculator:\n    def __init__(self):\n        self.current \u003d 0\n\n    def add(self, amount):\n        self.current +\u003d amount\n\n    def get_current(self):\n        return self.current",
              "placeholders": []
            },
            "imports.py": {
              "name": "imports.py",
              "text": "\nimport calculator\n\ncalc \u003d calculator.Calculator()    # create new instance of Calculator class defined in calculator module\ncalc.add(2)\nprint(calc.get_current())\n\nhere import my_module\n\ncall function hello_world from my_module\n",
              "placeholders": [
                {
                  "offset": 164,
                  "length": 21,
                  "hints": [
                    "Use \u0027import\u0027 keyword and my_module reference."
                  ],
                  "possible_answer": "import my_module",
                  "placeholder_text": "here import my_module"
                },
                {
                  "offset": 187,
                  "length": 40,
                  "hints": [
                    "Access \u0027hello_world\u0027 function from module \u0027my_module\u0027 as my_module.hello_world()"
                  ],
                  "possible_answer": "my_module.hello_world(\u0027John\u0027)",
                  "placeholder_text": "call function hello_world from my_module"
                }
              ]
            },
            "my_module.py": {
              "name": "my_module.py",
              "text": "\"\"\" documentation string for module my_module\nThis module contains hello_world function\n\"\"\"\n\n\ndef hello_world(name):\n    print(\"Hello, World! My name is %s\" % name)",
              "placeholders": []
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"import \" in window:\n        passed()\n    else:\n        failed(\"Use \u0027import\u0027 keyword\")\n\n\ndef test_window1():\n    window \u003d get_answer_placeholders()[0]\n    if \"my_module\" in window:\n        passed()\n    else:\n        failed(\"Import module my_module\")\n\n\ndef test_window2():\n    window \u003d get_answer_placeholders()[0]\n    if \"my_module.py\" in window:\n        failed(\"Don\u0027t use the file extension here\")\n    else:\n        passed()\n\n\ndef test_window3():\n    window \u003d get_answer_placeholders()[1]\n    if \"my_module\" in window and \"hello_world(\" in window:\n        passed()\n    else:\n        failed(\"Call hello_world function using my_module.hello_world\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window1()\n    test_window()\n    test_window2()\n    test_window3()\n"
          },
          "description_text": "\nModules in Python are simply Python files with the \u003ccode\u003e.py\u003c/code\u003e extension containing Python definitions and statements.\nModules can be handy when you want to use your function in a number of programs without copying its definition into each program.\nModules are imported from other modules using the \u003ccode\u003eimport\u003c/code\u003e keyword and the file name without an extension.\nThe first time a module is loaded into a running Python script, it is initialized by executing the code in the module once.\n\u003cbr\u003e\u003cbr\u003e\nImport the module \u003ccode\u003emy_module\u003c/code\u003e and use the \u003ccode\u003ehello_world\u003c/code\u003e function.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:57:44 AM",
          "task_type": "edu"
        },
        {
          "name": "Builtin modules",
          "stepic_id": 186056,
          "task_files": {
            "builtin_modules.py": {
              "name": "builtin_modules.py",
              "text": "import datetime\n\nprint(current date)\n",
              "placeholders": [
                {
                  "offset": 23,
                  "length": 12,
                  "hints": [
                    "Use datetime.datetime.today() function."
                  ],
                  "possible_answer": "datetime.datetime.today()",
                  "placeholder_text": "current date"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, get_file_output\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    output \u003d get_file_output()\n    if \"datetime\" not in window:\n        failed(\"Use datetime module\")\n    elif len(output) \u003e 0 and \"\u003c\" not in output[0]:\n        passed()\n    else:\n        failed(\"Print the current date\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n"
          },
          "description_text": "\nPython comes with a \u003ca href\u003d\"https://docs.python.org/3/library/\"\u003elibrary of standard modules\u003c/a\u003e.\nRemember that you can use Ctrl + Space after a dot (.) to explore available methods of a module.\n\u003cbr\u003e\u003cbr\u003e\nPrint the current date using an imported built-in module datetime.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:57:44 AM",
          "task_type": "edu"
        },
        {
          "name": "From import",
          "stepic_id": 186057,
          "task_files": {
            "calculator.py": {
              "name": "calculator.py",
              "text": "\"\"\"\nThis module contains Calculator class\n\"\"\"\n\n\nclass Calculator:\n    def __init__(self):\n        self.current \u003d 0\n\n    def add(self, amount):\n        self.current +\u003d amount\n\n    def get_current(self):\n        return self.current",
              "placeholders": []
            },
            "from_import.py": {
              "name": "from_import.py",
              "text": "\nfrom calculator import Calculator\n\ncalc \u003d Calculator()    # here we can use Calculator class directly without prefix calculator.\ncalc.add(2)\nprint(calc.get_current())\n\nimport hello_world from my_module\n\nprint(hello_world())    # Note: hello_world function used without prefix\n",
              "placeholders": [
                {
                  "offset": 169,
                  "length": 33,
                  "hints": [
                    "Use \u0027from my_module import hello_world\u0027"
                  ],
                  "possible_answer": "from my_module import hello_world",
                  "placeholder_text": "import hello_world from my_module"
                }
              ]
            },
            "my_module.py": {
              "name": "my_module.py",
              "text": "\"\"\" documentation string for module my_module\nThis module contains hello_world function\n\"\"\"\n\n\ndef hello_world():\n    return \"Hello, World!\"",
              "placeholders": []
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"from \" in window:\n        passed()\n    else:\n        failed(\"Use hello_world imported from my_module\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n"
          },
          "description_text": "\nOne form of the import statement imports names \u003ccode\u003efrom\u003c/code\u003e a module directly into the importing module\u0027s symbol table.\nThis way you can use the imported name directly without the \u003ccode\u003emodule_name\u003c/code\u003e prefix.\n\u003cbr\u003e\u003cbr\u003e\nImport \u003ccode\u003ehello_world\u003c/code\u003e function from \u003ccode\u003emy_module\u003c/code\u003e. Check the difference with task1.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:57:44 AM",
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 13428,
      "update_date": "Dec 21, 2017 6:58:00 AM",
      "title": "Beyond Scope of CMIT-135 - File input output",
      "task_list": [
        {
          "name": "Read file",
          "stepic_id": 186058,
          "task_files": {
            "read_file.py": {
              "name": "read_file.py",
              "text": "\nf \u003d open(\"input.txt\", \"r\")   # here we open file \"input.txt\". Second argument used to identify that we want to read file\n                             # Note: if you want to write to the file use \"w\" as second argument\n\nfor line in f.readlines():   # read lines\n    print each line\n\nf.close()                   # It\u0027s important to close the file to free up any system resources.\n\nf1 \u003d open(\"input1.txt\", \"r\")\n\nprint only first line of f1\n\ndo not forget to close file\n",
              "placeholders": [
                {
                  "offset": 266,
                  "length": 15,
                  "hints": [
                    "Use print function."
                  ],
                  "possible_answer": "print(line)",
                  "placeholder_text": "print each line"
                },
                {
                  "offset": 410,
                  "length": 27,
                  "hints": [
                    "Use \u0027readline\u0027 method."
                  ],
                  "possible_answer": "print(f1.readline())",
                  "placeholder_text": "print only first line of f1"
                },
                {
                  "offset": 439,
                  "length": 27,
                  "hints": [
                    "Use f1.close() method."
                  ],
                  "possible_answer": "f1.close()",
                  "placeholder_text": "do not forget to close file"
                }
              ]
            },
            "input1.txt": {
              "name": "input1.txt",
              "text": "My first line\nMy second line\nMy third line",
              "placeholders": []
            },
            "input.txt": {
              "name": "input.txt",
              "text": "I am a temporary file. Maybe someday, I\u0027ll become a real file.",
              "placeholders": []
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, get_file_output\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"print\" in window and \"line\" in window:\n        passed()\n    else:\n        failed(\"Use print function\")\n\n\ndef test_window2():\n    default_error \u003d \"Use \u0027readline\u0027 method\"\n    window \u003d get_answer_placeholders()[1]\n    output \u003d list(filter(lambda x: x !\u003d \"\", get_file_output()))\n    if len(output) \u003d\u003d 2 and output[1] \u003d\u003d \"My first line\":\n        passed()\n        return\n    if \"print\" not in window:\n        failed(\"Don\u0027t forget to print the line\")\n        return\n    failed(default_error)\n\n\ndef test_window3():\n    window \u003d get_answer_placeholders()[2]\n    if \"close(\" not in window:\n        failed(\"Call \u0027close\u0027 method\")\n        return\n    if \"f1\" not in window:\n        failed(\"Close file f1\")\n        return\n    passed()\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_window2()\n    test_window3()"
          },
          "description_text": "\nPython has a number of built-in functions to read and write information from a file on your computer.\nThe \u003ccode\u003eopen\u003c/code\u003e function is used to open a file.\nThe file can be opened in read mode (using \u003ccode\u003e\"r\"\u003c/code\u003e as the\nsecond argument) or in write mode (using \u003ccode\u003e\"w\"\u003c/code\u003e as the second\nargument). The \u003ccode\u003eopen\u003c/code\u003e function returns the file object.\nYou need to store it to close the file later.\n\n\u003cbr\u003e\u003cbr\u003e\nPrint the contents of \"input.txt\" to output. Print the first line of \"input1.txt\". Then close the file.\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:58:00 AM",
          "task_type": "edu"
        },
        {
          "name": "Write to file",
          "stepic_id": 186059,
          "task_files": {
            "write_to_file.py": {
              "name": "write_to_file.py",
              "text": "zoo \u003d [\u0027lion\u0027, \"elephant\", \u0027monkey\u0027]\n\nif __name__ \u003d\u003d \"__main__\":\n    f \u003d open(\"output.txt\", add modifier)\n\n    for i in zoo:\n        add the whole zoo to the output.txt\n\n    close the file\n",
              "placeholders": [
                {
                  "offset": 92,
                  "length": 12,
                  "hints": [
                    "Use \u0027a\u0027 modifier to append lines to the end of file."
                  ],
                  "possible_answer": "\u0027a\u0027",
                  "placeholder_text": "add modifier"
                },
                {
                  "offset": 133,
                  "length": 35,
                  "hints": [
                    "Use \u0027write\u0027 method."
                  ],
                  "possible_answer": "f.write(i)",
                  "placeholder_text": "add the whole zoo to the output.txt"
                },
                {
                  "offset": 174,
                  "length": 14,
                  "hints": [
                    "Call f.close method."
                  ],
                  "possible_answer": "f.close()",
                  "placeholder_text": "close the file"
                }
              ]
            },
            "output.txt": {
              "name": "output.txt",
              "text": "This is output file.\n",
              "placeholders": []
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, get_answer_placeholders, passed, failed\n\n\ndef test_window():\n    window \u003d get_answer_placeholders()[0]\n    if \"\u0027a\u0027\" in window or \u0027\"a\"\u0027 in window:\n        passed()\n    else:\n        failed(\"Use \u0027a\u0027 modifier to append lines to the end of file\")\n\n\ndef test_window1():\n    window \u003d get_answer_placeholders()[1]\n    if \"write\" in window:\n        passed()\n    else:\n        failed(\"Use \u0027write\u0027 method\")\n\n\ndef test_window3():\n    window \u003d get_answer_placeholders()[2]\n    if \"f\" in window and \"close\" in window and \"(\" in window:\n        passed()\n    else:\n        failed(\"Call \u0027close\u0027 method\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_window()\n    test_window1()\n    test_window3()\n"
          },
          "description_text": "\nIf you open a file using \u003ccode\u003e\"w\"\u003c/code\u003e (write) as the second argument, a new empty file will be created. Note that if another file with the same name exists, it will be deleted.\nIf you want to add some content to an existing file, you should use the \u003ccode\u003e\"a\"\u003c/code\u003e (append) modifier.\n\u003cbr\u003e\u003cbr\u003e\nAdd elements from the \u003ccode\u003ezoo\u003c/code\u003e list to \"output.txt\".\n\u003cbr\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Dec 21, 2017 6:58:00 AM",
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 0,
      "title": "Edu additional materials",
      "task_list": [
        {
          "name": "Edu additional materials",
          "stepic_id": 0,
          "task_files": {},
          "test_files": {},
          "description_format": "html",
          "additional_files": {
            "test_helper.py": "import sys\n\n\ndef get_file_text(path):\n    \"\"\" Returns file text by path\"\"\"\n    file_io \u003d open(path, \"r\")\n    text \u003d file_io.read()\n    file_io.close()\n    return text\n\n\ndef get_file_output(encoding\u003d\"utf-8\", path\u003dsys.argv[-1], arg_string\u003d\"\"):\n    \"\"\"\n    Returns answer file output\n    :param encoding: to decode output in python3\n    :param path: path of file to execute\n    :return: list of strings\n    \"\"\"\n    import subprocess\n\n    proc \u003d subprocess.Popen([sys.executable, path], stdin\u003dsubprocess.PIPE, stdout\u003dsubprocess.PIPE,\n                            stderr\u003dsubprocess.STDOUT)\n    if arg_string:\n        for arg in arg_string.split(\"\\n\"):\n            proc.stdin.write(bytearray(str(arg) + \"\\n\", encoding))\n            proc.stdin.flush()\n\n    return list(map(lambda x: str(x.decode(encoding)), proc.communicate()[0].splitlines()))\n\n\ndef test_file_importable():\n    \"\"\" Tests there is no obvious syntax errors\"\"\"\n    path \u003d sys.argv[-1]\n    if not path.endswith(\".py\"):\n        import os\n\n        parent \u003d os.path.abspath(os.path.join(path, os.pardir))\n        python_files \u003d [f for f in os.listdir(parent) if os.path.isfile(os.path.join(parent, f)) and f.endswith(\".py\")]\n        for python_file in python_files:\n            if python_file \u003d\u003d \"tests.py\":\n                continue\n            check_importable_path(os.path.join(parent, python_file))\n        return\n    check_importable_path(path)\n\n\ndef check_importable_path(path):\n    \"\"\" Checks that file is importable.\n        Reports failure otherwise.\n    \"\"\"\n    saved_input \u003d patch_input()\n    try:\n        import_file(path)\n    except:\n        failed(\"The file contains syntax errors\", test_file_importable.__name__)\n        return\n    finally:\n        revert_input(saved_input)\n\n    passed(test_file_importable.__name__)\n\n\ndef patch_input():\n    def mock_fun(_m\u003d\"\"):\n        return \"mock\"\n\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        save_input \u003d builtins.input\n        builtins.input \u003d mock_fun\n        return save_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        save_input \u003d __builtin__.raw_input\n        __builtin__.raw_input \u003d mock_fun\n        __builtin__.input \u003d mock_fun\n        return save_input\n\n\ndef revert_input(saved_input):\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        builtins.input \u003d saved_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        __builtin__.raw_input \u003d saved_input\n        __builtin__.input \u003d saved_input\n\n\ndef import_file(path):\n    \"\"\" Returns imported file \"\"\"\n    if sys.version_info[0] \u003d\u003d 2 or sys.version_info[1] \u003c 3:\n        import imp\n\n        return imp.load_source(\"tmp\", path)\n    elif sys.version_info[0] \u003d\u003d 3:\n        import importlib.machinery\n\n        return importlib.machinery.SourceFileLoader(\"tmp\", path).load_module(\"tmp\")\n\n\ndef import_task_file():\n    \"\"\" Returns imported file.\n        Imports file from which check action was run\n    \"\"\"\n    path \u003d sys.argv[-1]\n    return import_file(path)\n\n\ndef test_is_not_empty():\n    \"\"\"\n        Checks that file is not empty\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if len(file_text) \u003e 0:\n        passed()\n    else:\n        failed(\"The file is empty. Please, reload the task and try again.\")\n\n\ndef test_text_equals(text, error_text):\n    \"\"\"\n        Checks that answer equals text.\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if file_text.strip() \u003d\u003d text:\n        passed()\n    else:\n        failed(error_text)\n\n\ndef test_answer_placeholders_text_deleted(error_text\u003d\"Don\u0027t just delete task text\"):\n    \"\"\"\n        Checks that all answer placeholders are not empty\n    \"\"\"\n    windows \u003d get_answer_placeholders()\n\n    for window in windows:\n        if len(window) \u003d\u003d 0:\n            failed(error_text)\n            return\n    passed()\n\n\ndef set_congratulation_message(message):\n    \"\"\" Overrides default \u0027Congratulations!\u0027 message \"\"\"\n    print(\"#educational_plugin CONGRATS_MESSAGE \" + message)\n\n\ndef failed(message\u003d\"Please, reload the task and try again.\", name\u003dNone):\n    \"\"\" Reports failure \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" FAILED + \" + message)\n\n\ndef passed(name\u003dNone):\n    \"\"\" Reports success \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" test OK\")\n\n\ndef get_answer_placeholders():\n    \"\"\"\n        Returns all answer placeholders text\n    \"\"\"\n    prefix \u003d \"#educational_plugin_window \u003d \"\n    path \u003d sys.argv[-1]\n    import os\n\n    file_name_without_extension \u003d os.path.splitext(path)[0]\n    windows_path \u003d file_name_without_extension + \"_windows\"\n    windows \u003d []\n    f \u003d open(windows_path, \"r\")\n    window_text \u003d \"\"\n    first \u003d True\n    for line in f.readlines():\n        if line.startswith(prefix):\n            if not first:\n                windows.append(window_text.strip())\n            else:\n                first \u003d False\n            window_text \u003d line[len(prefix):]\n        else:\n            window_text +\u003d line\n\n    if window_text:\n        windows.append(window_text.strip())\n\n    f.close()\n    return windows\n\n\ndef check_samples(samples\u003d()):\n    \"\"\"\n      Check script output for all samples. Sample is a two element list, where the first is input and\n      the second is output.\n    \"\"\"\n    for sample in samples:\n        if len(sample) \u003d\u003d 2:\n            output \u003d get_file_output(arg_string\u003dstr(sample[0]))\n            if \"\\n\".join(output) !\u003d sample[1]:\n                failed(\n                    \"Test from samples failed: \\n \\n\"\n                    \"Input:\\n{}\"\n                    \"\\n \\n\"\n                    \"Expected:\\n{}\"\n                    \"\\n \\n\"\n                    \"Your result:\\n{}\".format(str.strip(sample[0]), str.strip(sample[1]), \"\\n\".join(output)))\n                return\n        set_congratulation_message(\"All test from samples passed. Now we are checking your solution on Stepik server.\")\n\n    passed()\n\n\ndef run_common_tests(error_text\u003d\"Please, reload file and try again\"):\n    test_is_not_empty()\n    test_answer_placeholders_text_deleted()\n    test_file_importable()\n",
            "Introduction_to_Python.zip": "PK\u0003\u0004\u0014\u0000\b\b\b\u0000/zÔøΩL\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000course.jsonÔøΩÔøΩÔøΩFÔøΩ.ÔøΩÔøΩ\u0002.ÔøΩ\"HÔøΩD\u0015ÔøΩ\"…µÔøΩPÔøΩÔøΩÔøΩfÔøΩÔøΩ\u000eK3ÔøΩ\tÔøΩÔøΩ\u0001ÔøΩ`\u0011-\u0010`\u0003ÔøΩÔøΩÔøΩ\u0013\u001dÔøΩÔøΩ[ÔøΩÔøΩXÔøΩ\u0015ÔøΩÔøΩÔøΩuÔøΩ\u001bÔøΩ ÔøΩÔøΩTV[ÔøΩÔøΩ\u0002\u0012yYÔøΩÔøΩ÷ó+ÔøΩÔøΩÔøΩ%\bNÔøΩÔøΩÔøΩup~ÔøΩÔøΩ\u0014ÔøΩX-ÔøΩa\u0019ÔøΩÔøΩ?ÔøΩÔøΩÔøΩÔøΩh\u0012ÔøΩ_ÔøΩ\u0006ÔøΩgÔøΩ\u0017ÔøΩÔøΩÔøΩÔøΩ◊ó/ÔøΩW?ÔøΩPŸ∏x5\rÔøΩeÔøΩ\tÔøΩÔøΩ¬§ÔøΩÔøΩÔøΩhÔøΩ\u001a\u0027ÔøΩ\u0004ÔøΩÔøΩÔøΩÔøΩ\u001f.ÔøΩÔøΩÔøΩÔøΩÔøΩ,YÔøΩqÔøΩ\u0016ÔøΩÔøΩbÔøΩXÔøΩÔøΩ\u001aÔøΩ{ÔøΩÔøΩy6]MÔøΩL0ÔøΩVy\u0011\u0005e\u0016ÔøΩÔøΩ.ÔøΩY çÔøΩqÔøΩDÔøΩÔøΩÔøΩBÔøΩ\u003cÔøΩÔøΩÔøΩÔøΩ\"NoGIÔøΩﬁÆÔøΩ[ÔøΩÔøΩ.c?ÔøΩÔøΩY\\F\u000bÔøΩÔøΩ{ÔøΩ#\bÔøΩÔøΩÔøΩÔøΩ(4ÔøΩÔøΩ\u001c\u003e?UÔøΩ|t\u001aj:]ÔøΩ_ÔøΩÔøΩPtÔøΩÔøΩ€øEÔøΩÔøΩÔøΩÔøΩz\u0011\u0016\u001fGI\\ÔøΩÔøΩYÔøΩi*ÔøΩÔøΩ\u000bÔøΩÔøΩÔøΩU\u001eÔøΩÔøΩ(\u0003\u0019ÔøΩÔøΩÔøΩÔøΩ\u0015eÔøΩÔøΩ\u0027#ÔøΩÔøΩÔøΩÔøΩgÔøΩ3ÔøΩ554ÔøΩÔøΩ\b\u0007hÔøΩ\u000fÔøΩÔøΩQÔøΩdÔøΩÔøΩ,OÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩCÔøΩÔøΩiÔøΩ\\\u0019ÔøΩÔøΩH`\u0006ÔøΩÔøΩ›úÔøΩ\u001bÔøΩ?\rÔøΩoÔøΩÔøΩÔøΩ\u0001V\u0014ÔøΩEPÔøΩÔøΩQÔøΩÔøΩ)ÔøΩ\u00277\u0027ÔøΩÔøΩÔøΩ^ÔøΩ2\t\u0027ÔøΩ\u003cKÔøΩQ^8ÔøΩÔøΩÔøΩIÔøΩÔøΩfEÔøΩÔøΩÔøΩ8ÔøΩÔøΩHÔøΩ(ÔøΩ-ÔøΩHÔøΩKÔøΩÔøΩ9tÔøΩÔøΩ\u001cÔøΩ~ÔøΩÔøΩ\u003cÔøΩGy48ÔøΩ\u0014ÔøΩÔøΩ|ÔøΩ\u0015E\u003cNÔøΩQÔøΩ\u0016wQÔøΩÔøΩÔøΩs\u001cÔøΩamÔøΩU\u0002ÔøΩ\u0014i]ÔøΩÔøΩ[ÔøΩGÔøΩ…áizÔøΩ\u000fwÔøΩDEŸ¥@ÔøΩ]ÔøΩKÔøΩdÔøΩgÔøΩÔøΩ\nÔøΩbXFy\u0010/ÔøΩY^\u0006ÔøΩ*\u001dMÔøΩÔøΩ\"KGTÔøΩ\u0014x\u0002ÔøΩ6\u003d\rÔøΩaQÔøΩÔøΩ€®ÔøΩaÔøΩÏôΩIÔøΩÔøΩÔøΩ—åk}ÔøΩÔøΩÔøΩÔøΩ7ÔøΩÔøΩÔøΩMÔøΩMÔøΩÔøΩÔøΩ4ÔøΩ+ÔøΩÔøΩÔøΩÔøΩÔøΩ≈¥ÔøΩÔøΩ^ÔøΩKœ≤\\ÔøΩ\bÔøΩT}+5ÔøΩ0IFa1ÔøΩcU\u001f\u003cÔøΩeÔøΩÔøΩ7ÔøΩÔøΩI0\u003cIÔøΩLL\r}SA\u003c\u000b“¨4ÔøΩXuSÔøΩ4bXÔøΩÔøΩ$Q\bÔøΩk\u0005ÔøΩÔøΩÔøΩÔøΩ:ÔøΩ!ÔøΩÔøΩM\u003e\u000f\u0026ÔøΩ0\u000f\u0027%t9(ÔøΩ\rÔøΩE4ÔøΩÔøΩoWÔøΩGÔøΩ*OÔøΩ\u0019\u0013\u000f\u0007hÔøΩ(NÔøΩ2\u000eÔøΩ\nÔøΩZÔøΩÔøΩÔøΩÔøΩ\u0003ÔøΩÔøΩa8ÔøΩ»á7\u0027ÔøΩmiÔøΩOÔøΩÔøΩUPÃ≥U2\r\u0016ÔøΩ4ÔøΩÔøΩa(QÔøΩ+G\u000f$\u0002a`}ÔøΩ\u001fC1\nÔøΩÔøΩ\u003cÔøΩ}\u0010ÔøΩhÔøΩJÔøΩ8ÔøΩÔøΩH}ÔøΩu\ffÔøΩ\u0003zz\u0003\rÔøΩ.ÔøΩÔøΩÔøΩ\u000fÔøΩÔøΩ/ÔøΩ\u000eÔøΩÔøΩÔøΩ]ÔøΩÔøΩ_ÔøΩÔøΩ\u003d\u001dJÔøΩÔøΩ2ÔøΩÔøΩ2ÔøΩVZÔøΩÔøΩÔøΩr,p\u001dÔøΩÔøΩ◊µÔøΩT\fÔøΩÔøΩ%√ëÔøΩR}5›§–áÔøΩ\b\u0027z4ÔøΩ,\u0004ÔøΩqÔøΩb4ZÔøΩq:\u001aÔøΩ_ÔøΩ\u003d{ÔøΩÔøΩÔøΩÔøΩwÔøΩHÔøΩB\u000f+ÔøΩ^ÔøΩc÷ÄÔøΩP-nÔøΩÔøΩI#«öFÔøΩ$ÔøΩÔøΩÔøΩ\u00004wÔøΩIÔøΩÔøΩÔøΩ4ÔøΩgÔøΩIÔøΩ“¥ÔøΩ\u0026v%ÔøΩÔøΩAÔøΩÔøΩƒÑÔøΩ:ÔøΩÔøΩBÔøΩP\u0001ÔøΩ(f\bÔøΩl\u001aÔøΩoÔøΩHÔøΩÔøΩ7\u0012fÔøΩÔøΩÔøΩÔøΩ3S`\u0000›•gÔøΩ\\ÔøΩpÔøΩJ\u0015fÔøΩ-VDÔøΩ\fÔøΩ\u000bvÔøΩÔøΩlÔøΩÔøΩÔøΩ@2]\u0007ÔøΩ2$y\u0010\u0006\u003cÔøΩÔøΩÔøΩÔøΩÔøΩYVD2iÔøΩÔøΩ+ÔøΩÔøΩyRÔøΩ\u000fÔøΩ8ÔøΩq[ÔøΩ\u000f~\u001f \\ÔøΩ\u0016\u0027YÔøΩ4\u000b\u0016QÔøΩ\u001a\u0004’ñ~ÔøΩÔøΩÔøΩÔøΩrÔøΩ\u0011,ÔøΩEH(ÔøΩS\\ƒ•\u0014\rÔøΩy\u001eÔøΩd—úÔøΩÔøΩrY\\?{vww7ÔøΩkTÔøΩsX7ÔøΩ\u0000\u0016ÔøΩ3ÔøΩ\u0011œñk\\ÔøΩÔøΩgÔøΩÔøΩ\u0014ÔøΩÔøΩ4LÔøΩOÔøΩHÔøΩÔøΩÔøΩÔøΩ1ÔøΩ\u0026ÔøΩÔøΩÔøΩ\\$BÔøΩ\bÔøΩ\f~/ÔøΩ\u000e\rÔøΩÔøΩtrÔøΩÔøΩÔøΩ0ÔøΩÔøΩÔøΩ]ÔøΩjÔøΩ\\8U+ÔøΩ\b\u003ewÔøΩÔøΩÔøΩÔøΩÔøΩ’ïÔøΩÔøΩÔøΩ\u001bBZÔøΩH\tZNWf\u0001[u{\u0011ÔøΩkÔøΩE\u0011ÔøΩÔøΩÔøΩÔøΩnÔøΩ\u0019ÔøΩMÔøΩÔøΩ\u0016Tg\u0017kÔøΩtÔøΩÔøΩwÔøΩeÔøΩÔøΩÔøΩÔøΩOÔøΩÔøΩYc\u0015,\nR\u0007\u0002ÔøΩvÔøΩ\u0007ÔøΩ#fTÔøΩ[ÔøΩU}^DÔøΩ\u001eÔøΩ\u0001rXÔøΩ^ÔøΩÔøΩ|\u0000ÔøΩ#ÔøΩÔøΩÔøΩ$\u0026ÔøΩ(ÔøΩÔøΩ\u000bÔøΩÔøΩN◊áPÔøΩ\b0rÔøΩgÔøΩZ\u0001ÔøΩ#ÔøΩÔøΩÔøΩƒëÔøΩ1ÔøΩ\u0007\u0027ÔøΩ⁄∫ÔøΩJ\u001f)\u001f.ÔøΩÔøΩUvmÔøΩTÔøΩ},\"ÔøΩdKÈ£∂0\n\u0017\u003en\u0006E\u0019ÔøΩ\u0018ÔøΩÔøΩrNK}\u001e⁄≤;ÔøΩUÔøΩÃ£ÔøΩ\\ÈÉòÔøΩBÔøΩÔøΩd5ÔøΩÔøΩÔøΩ;ÔøΩÔøΩÔøΩv\u000bpC\u001cÔøΩ$L\t ÔøΩ.ÔøΩ$x\u0012\u003cCÔøΩÔøΩÔøΩ\u0012ÔøΩÔøΩ*UÔøΩ_s/_#sn\u0015\u003eÔøΩ`ÔøΩÔøΩÔøΩ\"\u0011ŸÖ\u0013;x \f\u0019\u000eÔøΩÔøΩ\u0007dÔøΩÔøΩ\u0019ÔøΩq\bÔøΩ+\u0000ÔøΩJÔøΩ$K[xÔøΩygÔøΩÔøΩIÔøΩ\u001eÔøΩÔøΩ[ÔøΩtÔøΩ\u0017ÔøΩ\u001c;TÔøΩtÔøΩ~9G\u001eÔøΩÔøΩÔøΩ\u0004\u0000RÔøΩszs\u0002ÔøΩ\u0011V\u0003ÔøΩ\u000eÔøΩÔøΩ6ÔøΩÔøΩ?\bﬁîÔøΩYÔøΩÔøΩ0YEP\u0005LÔøΩÔøΩ\tÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u0018\u003e2ÔøΩ[ÔøΩ\u000eÔøΩÔøΩ\u0026ÔøΩ{a\u001fd\u0000tÔøΩ7ÔøΩ$/ÔøΩ$ÔøΩÔøΩ\u001b≈åHÔøΩÔøΩ\u003cÔøΩÔøΩhÔøΩ`i@cÔøΩCb\u0005X\u00102\r\u0002ÔøΩ\u0026)\u001eÔøΩHÔøΩÔøΩÔøΩÔøΩÔøΩbO?E9ÔøΩoÔøΩ\u003dÔøΩ\u001dÔøΩ\u000eÔøΩJ\u0000\u001bVÔøΩ∆µÔøΩÔøΩÔøΩ\u00049oÔøΩ(*ÔøΩla\nÔøΩG\u0000Mt\u0005ÔøΩrRÔøΩ~ÔøΩ\u0015÷äÔøΩ ÀÄÔøΩ2\u003dÔøΩÔøΩÔøΩÔøΩZÔøΩÀ´\u00165ÔøΩÔøΩÔøΩ‚çóÔøΩÔøΩ2ÔøΩj\u000bIfSÔøΩ·ä∞ÔøΩvÔøΩ\u000bÔøΩ4ÔøΩÔøΩ/ÔøΩ\u000fÔøΩÔøΩÔøΩÔøΩ\u003eÔøΩ∆•\u001c,\u003eGÔøΩrÔøΩÔøΩÔøΩÔøΩS\u0006ÔøΩ\u0011ÔøΩHÔøΩÔøΩ⁄ÇÔøΩÔøΩÔøΩ\u0006ÔøΩ?ÔøΩÔøΩ\u0002ÔøΩÔøΩÔøΩzÔøΩ\u0007ÔøΩÔøΩQ√™\u0012ÔøΩ?ÔøΩÔøΩPÔøΩn)ÔøΩ~nÔøΩp0\u0003\u0004ÔøΩ1ÔøΩg3XÔøΩ ÔøΩxQÔøΩÔøΩSÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩLq\u0017(ÔøΩÔøΩTÔøΩÔøΩÔøΩ\u001eÔøΩÔøΩÔøΩÔøΩ\ba\u001eiÔøΩ\\ÔøΩxÔøΩÔøΩJÔøΩÔøΩ»ÇÔøΩÔøΩÔøΩ\nÔøΩ\u001caÔøΩ1\u0005\u0017ÔøΩÔøΩ\u0007ÔøΩ+ÔøΩQÔøΩÔøΩIÔøΩ1\u0002ÔøΩ\u0027ÔøΩ8JNIÔøΩÔøΩ\u001d!\u000e\u000eIÔøΩ^\u003dÔøΩ\u001bÔøΩÔøΩÔøΩIŒΩÔøΩz1Œí”õÔøΩ#H\u000fÔøΩQ\u0016jFÔøΩ\u0005\u0019lÔøΩ\u0010:|J\u0002CÕªÔøΩÔøΩPÔøΩ\u000fÔøΩÔøΩÔøΩ\u001fÔøΩÔøΩQ BÔøΩ4ÔøΩÔøΩ7ÔøΩi\u000f\u003c¬∏ÔøΩÔøΩ\u0016\b\u0006@-ÔøΩÔøΩ,aLÔøΩÔøΩ*\tÔøΩLÔøΩ›∂3ÔøΩ-*ÔøΩ/ÔøΩ‹ÆÔøΩ\u0007DnÔøΩÔøΩÔøΩ\u000eÔøΩjÔøΩÔøΩ\u0000ÔøΩÔøΩÔøΩÔøΩmÔøΩÔøΩ\u001eÔøΩ\u0005ÔøΩ\u0019ÔøΩÔøΩ?hÔøΩmÔøΩ4NÔøΩÔøΩÔøΩ\bÔøΩ\u003dÔøΩÔøΩc`ÔøΩÔøΩwGÔøΩ1ÔøΩ\u0005J\u0017\u0026ÔøΩ,ÔøΩÔøΩJm~\u0018\u0026\u0004ÔøΩJ,\u001cÔøΩÔøΩ\u0005~V\u0004ÔøΩUQÔøΩg)`\u000eQÔøΩÔøΩ\u0010ÔøΩÔøΩ\"\\ÔøΩF\u000bÔøΩ$?\u0006\t+lUÔøΩ?\u0014{ÔøΩÔøΩqÔøΩ\u0018ÔøΩÔøΩÔøΩÔøΩ\bÔøΩÔøΩ»ªÔøΩ|SÔøΩÔøΩÔøΩ;ÔøΩ\u000f\u0007ÔøΩ(e, ÔøΩQÔøΩXÔøΩÔøΩS~ÔøΩA\r4\u00168ÔøΩ\u0000ÔøΩmÔøΩÔøΩÔøΩLU(WÔøΩ\nÔøΩ\u0011OÔøΩg∆≥8 µT/ÔøΩ\u0019ÔøΩÔøΩu|\u001eÔøΩOÔøΩe\u0019ÔøΩ\u0005VÔøΩ\u000fyÔøΩÔøΩ^)ÔøΩÔøΩÔøΩW(ÔøΩÔøΩÔøΩ5ÔøΩÔøΩÔøΩÔøΩZÔøΩÔøΩGAÔøΩ\u0014\u0018k\f?u\u0027\u001dÔøΩÔøΩ]ÔøΩÔøΩÔøΩg9ÔøΩwÔøΩJÔøΩ\b;IÔøΩ6ÔøΩÔøΩÔøΩÔøΩÔøΩa\u0007ÔøΩ\tÔøΩ’∞ÔøΩIuÔøΩÔøΩmSÔøΩ3}ÔøΩhÔøΩÔøΩ\tÔøΩ\u001d(ÔøΩ]\r\u001bÔøΩn5jÔøΩw\u001aÔøΩ∆àÔøΩeÔøΩ\"ÔøΩÔøΩ!ÔøΩÔøΩ\u00041ÔøΩVÔøΩ08\u0000\u0011LÔøΩ)6{ÔøΩ\nZÔøΩ\u001aÔøΩÔøΩÔøΩÔøΩcpÔøΩ\fg\u001e.ÔøΩ\u0011\u001cvaÔøΩ\u0014ÔøΩ0B\u001fÔøΩƒìÔøΩRE*“ØÔøΩr\u0010ÔøΩÔøΩÔøΩ\b\u0010ÔøΩI\u0007Ÿ™tÔøΩ\u001bÔøΩÔøΩÔøΩŸãÔøΩÔøΩCjÔøΩÔøΩlÔøΩÔøΩmzÔøΩÔøΩÔøΩu#XmWÔøΩÔøΩ*ÔøΩ(XÔøΩÔøΩÔøΩ\u001dÔøΩÔøΩ\u0012ÔøΩÔøΩ]ÔøΩﬂâÔøΩÔøΩgÔøΩv\u0019H+KÔøΩÔøΩÔøΩxÔøΩÕí,,GÔøΩ:\u0007gÔøΩVÔøΩ5Vu\fyÔøΩÔøΩÔøΩhnÔøΩÔøΩÔøΩ]ÔøΩÔøΩÔøΩÔøΩÔøΩc0ÔøΩÔøΩ#ÔøΩÔøΩY\u0006+ÔøΩ1ÔøΩ\u001eÔøΩP\u0026e\u0015ÔøΩ9mÔøΩ)\u001fÔøΩ\nÔøΩÔøΩ\u0017ÔøΩÔøΩÔøΩ\u0027jivÔøΩÔøΩÔøΩÔøΩÔøΩmm\u000e\u001eÔøΩƒ≠ÔøΩ\u0003\u001aNÔøΩU\u0011[\u003dÔøΩ√®F+\u0012~ÔøΩÔøΩÔøΩÔøΩ\u001aÔøΩXmÔøΩ \u001a\u003dÔøΩÔøΩÔøΩÔøΩFÔøΩ[9ÔøΩ:2\u0012ÔøΩ\u0007ÔøΩf?ÔøΩÔøΩR2ÔøΩ\u0012!y\u0010]ÔøΩ-ÔøΩ,ÔøΩl+ÔøΩÔøΩ(ÔøΩÔøΩ)v\u0018$\rÔøΩgÀª,XÔøΩÔøΩ\u0012ÔøΩ\u001c2\u0005ÔøΩÔøΩÔøΩ@ÔøΩ2ÔøΩÔøΩ;xÔøΩ\u0018—´\u0000nÔøΩ\u000e∆∫ÔøΩ\u0000ÔøΩÔøΩtÔøΩÔøΩNÔøΩ\u0002a\u0012ÔøΩaÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩtÔøΩ\u0016ÔøΩÔøΩ\u0016}ÔøΩÔøΩÔøΩZÔøΩ,ÔøΩÔøΩÔøΩ4ÔøΩƒã0\tÔøΩ\u0019ÔøΩÔøΩB\u000fÔøΩLÔøΩ:\u001f‹§(ÔøΩH\u0004ÔøΩ\u001fÔøΩÔøΩÔøΩÔøΩAÔøΩÔøΩ\u000bÔøΩ2PÔøΩoÔøΩÔøΩY\u001c\u000fÔøΩ`y`ÔøΩGÔøΩ\u0019ÔøΩ6\u0017ÔøΩÔøΩ\u0001WÔøΩE\u001e-ÔøΩIXÔøΩ-ÔøΩÔøΩ)ÔøΩÔøΩD]_\u003d|-\nyÔøΩ\u0007gjÔøΩ\u001cÔøΩÔøΩ⁄†ÔøΩÔøΩÔøΩÔøΩbÔøΩÔøΩ8DﬁÖ#2lk?ÔøΩV#YwÔøΩÔøΩB‘ØOÔøΩ\u001dBÔøΩ\u001dÔøΩmÔøΩÔøΩEÔøΩÔøΩDÔøΩ%ÔøΩ\u0014AÔøΩÔøΩÔøΩ“≤ÔøΩÔøΩ`\tÔøΩ\\\u0018ÔøΩÔøΩ|\nÔøΩV]\u00169\u0004\u00070:ÔøΩÔøΩ\u001bÔøΩ\fd\u0002ÔøΩ÷êÔøΩ\u0004*BÔøΩÔøΩÔøΩÔøΩ\u001c\fÔøΩ|ÔøΩÔøΩcÔøΩ%ÔøΩÔøΩÔøΩ\u0026ÔøΩ\u0012\"ÔøΩÔøΩÔøΩ\u0013czÔøΩ\fÔøΩÔøΩ^:ÔøΩ\u0026+#(ÔøΩÔøΩ@JÔøΩÔøΩk\"E}YÔøΩÃ∫ÔøΩÔøΩÔøΩ~ÔøΩ}ÔøΩiÔøΩÔøΩÔøΩ ÔøΩÔøΩfDC\u0026ÔøΩÔøΩ\"ÔøΩ\u003dMÔøΩUÔøΩÔøΩ\u0006ÔøΩb]ÔøΩÔøΩ\u001bMC`ÔøΩÔøΩj?ÔøΩ ¥n%ÔøΩ-\u001eÔøΩÔøΩ\nÔøΩW9@ÔøΩETÔøΩ\u0013}\u0013ÔøΩvÔøΩ}ÔøΩYÔøΩÔøΩÔøΩÚëÆºEÔøΩ7}ÔøΩUÔøΩ\u000fÔøΩTÔøΩGÔøΩ,\u0015FÔøΩIaÔøΩÔøΩ\u0012ÔøΩ[ÔøΩ∆ü‚©∫T1+ÔøΩÔøΩE0^#ÔøΩÔøΩ/ÔøΩSMMÔøΩÔøΩ0ÔøΩÔøΩÔøΩÔøΩ6ÔøΩ~m[oÔøΩÔøΩÔøΩÔøΩl~ÔøΩÔøΩÔøΩ\u0005+ÔøΩ[eÔøΩÔøΩQÔøΩÔøΩÔøΩnÔøΩÔøΩÔøΩ\u000e\u0004\u001dÔøΩÔøΩ3ÔøΩÔøΩÔøΩ4ÔøΩÔøΩ9}fÔøΩÔøΩ4\u0011@3ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩz›õ\tÔøΩÔøΩ\u000fÔøΩ\fÔøΩv2\u0019@ÔøΩ\u003d\u003e,ÔøΩ\u001eoCÔøΩÔøΩ%ÔøΩÔøΩQUÔøΩÔøΩÔøΩÔøΩ\u0011\u0001ÔøΩ\u0019\u003cÔøΩtÔøΩhÔøΩ2ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩjk$ÔøΩ[ÔøΩÔøΩ\u003cÔøΩ⁄¥ÔøΩ\\wQÔøΩ«é}tYÔøΩÔøΩ[\u001bÔøΩÔøΩÔøΩMÔøΩÔøΩj\u003d\u0015ÔøΩÔøΩ\u001d}XÔøΩ1ÔøΩÔøΩÔøΩ\rK\u000bÔøΩÔøΩMÔøΩÔøΩ0ÔøΩÔøΩÔøΩ\n]ÔøΩcÔøΩÔøΩacÔøΩÔøΩ;Uj)\u0005ÔøΩÔøΩ\nÔøΩÔøΩÔøΩtÔøΩÔøΩ\u000eboÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩo{]ÔøΩxÔøΩ+ÔøΩÔøΩ8*CÔøΩ¬µÔøΩÔøΩÔøΩn\u003d3ÔøΩÔøΩzhÔøΩÔøΩmaÔøΩÔøΩÔøΩ%hXÔøΩ\u0015GÔøΩ\u000eÔøΩFÔøΩÔøΩÔøΩpÔøΩÔøΩ\rÔøΩÔøΩÔøΩvÔøΩOj(ÔøΩ\u001a\u0014ÔøΩqÔøΩÔøΩ*ÔøΩ/ÔøΩÔøΩÔøΩ ÔøΩ\u0018mÔøΩ_ÔøΩÔøΩ[ÔøΩGÔøΩ1\u0016ÔøΩÔøΩ?yVÔøΩÔøΩÔøΩ\\Y[ÔøΩÔøΩ\tÔøΩAÔøΩÔøΩÔøΩNÔøΩWÔøΩoÔøΩbÔøΩÔøΩÔøΩ|∆∂ÔøΩzÔøΩÔøΩ\u0017ÔøΩÔøΩtÔøΩdÔøΩ\u000f\u001eoÔøΩ[ÔøΩÔøΩÔøΩEÔøΩÔøΩ\u0006\u001cMÔøΩ\u001c\u0004zÔøΩh›™ÔøΩÔøΩ\rÔøΩÔøΩMÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩHÔøΩ\r øÔøΩ\u000eÔøΩMÔøΩm\bÔøΩ-ÔøΩ\u001dÔøΩ\u001bdÔøΩ“∞XÔøΩÔøΩÔøΩIÔøΩÔøΩRÔøΩ|ÔøΩÔøΩÔøΩ\n\u000eÔøΩlÔøΩÔøΩÔøΩÔøΩÔøΩ5xg~W\n\r,ÔøΩÔøΩ\u0018\u001dpÔøΩ\u0013\u0019ÔøΩa–•‘∂ÔøΩÔøΩ4ÔøΩœÄ%ÔøΩÔøΩÔøΩÔøΩ2\nÔøΩ9\u000bN!ÔøΩÔøΩ\u001d ÔøΩo∆õpÔøΩ~ÔøΩEieo\rbco\u000fÔøΩÔøΩÔøΩÔøΩÔøΩ\u001aÔøΩÔøΩ\u0027ÔøΩj\u001c_ÔøΩnÔøΩÔøΩ9^\u0005|WU\u0000LIPÔøΩÔøΩ\u0010`\u0003ÔøΩl1ÔøΩÔøΩ\u0017\u0010^ÔøΩ/aÔøΩ\u0016:ÔøΩ ÔøΩÔøΩ.ÔøΩ\u0012ÔøΩaÔøΩÔøΩÔøΩ\u0011\u000eÔøΩÔøΩMÔøΩ\u0014ÔøΩÔøΩVÔøΩic…®ÔøΩÔøΩÔøΩsÔøΩ9ÔøΩoÔøΩÔøΩÔøΩÔøΩNk\r^yÔøΩk]\u0005\u003e\u0012ÔøΩEÔøΩ\u0003\u0018ÔøΩZ\u0001ÔøΩÔøΩ,K\"ÔøΩpWÔøΩÔøΩÔøΩÔøΩb|ÔøΩ5wVÔøΩyÔøΩ7ÔøΩtÔøΩ06\u0002ÔøΩÔøΩÔøΩfÔøΩ\u0017ÔøΩÔøΩÔøΩQÔøΩÔøΩUÔøΩÔøΩÔøΩX^\u000ba*n\u0004ÔøΩ*{\u001cÔøΩ#ÔøΩ[ÔøΩU\u001dFÔøΩÔøΩU~]ÔøΩÔøΩPÔøΩ ;I^ÔøΩ\u000bÔøΩÔøΩUÔøΩl\u0027ÔøΩÔøΩÔøΩÔøΩ\\ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ~.ÔøΩ{\u0014\u0001ÔøΩx\u0027ÔøΩ\\sÔøΩOÔøΩ\fx—á\u0007i2ÔøΩ\u001cÔøΩ\u000fÔøΩÔøΩÔøΩUTÔøΩ\u003eY^+ÔøΩ#ÔøΩ}ÔøΩÔøΩ\u0014\u000bÔøΩjagÔøΩjÔøΩÔøΩhÔøΩÔøΩÔøΩ⁄úÔøΩÔøΩ\tZg\u0016ÔøΩÔøΩ\u003c\"\u003d\u0007Ÿ¶ÔøΩÔøΩÔøΩÔøΩÔøΩ\ba\u0003P{\u0019ÔøΩA\u001a/8ÔøΩÔøΩÔøΩvÔøΩÔøΩÔøΩÔøΩÔøΩ7^ÔøΩÔøΩz\u000bTe\u000eÔøΩÔøΩÔøΩÔøΩ\u003dDÔøΩ:ÔøΩÔøΩkÔøΩ~\\dÔøΩÔøΩÔøΩwÔøΩÔøΩÔøΩDWÔøΩYT7}ÔøΩ(ÔøΩÔøΩÔøΩvÔøΩhÔøΩÔøΩ‚å°ÔøΩÔøΩ\u0004ÔøΩÔøΩ\tÔøΩÔøΩÔøΩÔøΩU~ÔøΩÔøΩGÔøΩ\u0002ÔøΩÔøΩ‹¥„¢´ÔøΩÔøΩ ß^ÔøΩFS\u0003{XÔøΩÔøΩpÔøΩÔøΩÔøΩ/-ÔøΩÀòmÔøΩ\u0011_ÔøΩÔøΩ\u0011ÔøΩÔøΩ*ÔøΩAÔøΩ0\u0018\u0003ÔøΩÔøΩ4ÔøΩÔøΩÔøΩG9“ølÔøΩÔøΩÔøΩ\u001fƒà\u000e\t.ÔøΩÔøΩÔøΩÔøΩ\u001dÔøΩÔøΩ/ÔøΩ7KkwÔøΩ\u001c}\u000e8ÔøΩ3~udÔøΩ\tÔøΩ\u0003`ÔøΩÔøΩp~ÔøΩ\u0007|K√æÔøΩÔøΩ\bm\u001b;ÔøΩÔøΩ\u0003\t_ÔøΩÔøΩ⁄á\ntÔøΩÔøΩNÔøΩvÔøΩ\"ÔøΩÔøΩ\u000bÔøΩÔøΩ6ÔøΩ◊ï\u0002ÔøΩÔøΩ$ÔøΩÔøΩÔøΩ\fÔøΩbÔøΩÔøΩÔøΩSdÔøΩ20ÔøΩ,\u0007d3ÔøΩ\u0000!ÔøΩÔøΩÔøΩÔøΩ\bÔøΩKNÔøΩÔøΩ\u0026{\u001dD1AÔøΩCCÔøΩÔøΩnÔøΩuY\u0005ÔøΩ2ÔøΩÔøΩ\u001c^\u0026ÎùÄ\u0013bÔøΩ6sa?(B\u001cÔøΩÔøΩLÔøΩ\u0012ÔøΩÔøΩ\u0012Y \u001dÔøΩmjÔøΩ‡≥Ø\u0018lÔøΩ\u0013h)\r€ÉÔøΩÔøΩwÔøΩ\u0000:ÔøΩkmÔøΩWÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u0003ÔøΩ\u0004ÔøΩ\u0016ÔøΩ\u0014\u000eT?\u0027ÔøΩF\u0001ÔøΩÔøΩWdÔøΩVÔøΩQ\r`ÔøΩ\u0004ÔøΩ!ÔøΩ\u0018ÔøΩXeÔøΩÔøΩÔøΩ#ÔøΩ\u001eÔøΩ\u0026ÔøΩEÔøΩlÔøΩÔøΩnÔøΩ\u001e\u001cﬁîÔøΩÔøΩiÔøΩQÔøΩﬂ±ÔøΩ\u0003ÔøΩ1\u0010“¢:I(@ÔøΩOÔøΩ%ÔøΩZY\u0002ÔøΩ7ÔøΩg?(ƒ≥ÔøΩD\u0026FÔøΩxÔøΩA\\ÔøΩÔøΩSÔøΩÔøΩÔøΩH}aÔøΩ\u0004ÔøΩ3,ÀºÔøΩ\rÔøΩÔøΩÔøΩu1\\\u001a9ÔøΩ ÔøΩÔøΩo\u0006wK…™nÔøΩ\u001dÔøΩuÔøΩLlÔøΩÔøΩkkÔøΩ%ÔøΩEuÔøΩÔøΩ/5ÔøΩÔøΩ\u003eÔøΩ-n]ÔøΩ`LÔøΩÔøΩIr\u0000œ™93ÔøΩ\u001aÔøΩÔøΩÔøΩ÷û?ÔøΩ[ÔøΩÔøΩÃ£OqÔøΩ*@ÔøΩV\u003dÔøΩÔøΩKÔøΩe%ÔøΩ\u0027}ÔøΩ\u00166FÔøΩ\u001f]ÔøΩX\u0016ÔøΩu\u0000ÔøΩWÔøΩÔøΩÃ°ÔøΩ.a@_ÔøΩ;%\u003cLÔøΩÔøΩÔøΩpQÔøΩ\fÔøΩ\n\"ÔøΩÔøΩ0\u00121ÔøΩ\nÔøΩUÔøΩ\u0027\u001d.ÔøΩ|-Òä®µFÔøΩ_)zÔøΩÔøΩÔøΩ[ÔøΩL\u0027L\u001cÔøΩÔøΩ ÔøΩÔøΩÿäƒ´\u000fNÔøΩÔøΩz0@ÔøΩÔøΩÔøΩÔøΩÔøΩ\u0001ÔøΩÔøΩ[fvÔøΩ}R\u000b`ÔøΩ\u001eYÔøΩÔøΩ7rko\u0001NÔøΩÔøΩt\u0005Ps\u0005ÔøΩ`\rÔøΩÔøΩŸàÔøΩÔøΩvÔøΩ\\XkxÔøΩ⁄åÔøΩ)}ÔøΩ[ÔøΩcÔøΩx*ÔøΩÔøΩ\u000bÔøΩ|ÔøΩÔøΩrÔøΩhÔøΩÔøΩYaÔøΩÔøΩÔøΩÔøΩTw\u003doÔøΩÔøΩ\u001dÂºªÔøΩÔøΩÔøΩÔøΩ\u0010ZÔøΩoÔøΩ\u0016ÔøΩÔøΩ\u003e\u003eÔøΩÔøΩÔøΩEÔøΩÔøΩÔøΩZÔøΩB*ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩTÔøΩG«´ÔøΩ\u0014mÔøΩ\u003d6mÔøΩ\u000bÔøΩAÔøΩc\u0014ÔøΩoÔøΩÔøΩD.ÔøΩA\u0011ÔøΩ\u003eÔøΩÔøΩ€∫kÔøΩÔøΩu\u0013Q√ßkÔøΩÔøΩÔøΩ\u00125\u001cuA\u000fÃ∫V\u0018ÔøΩÔøΩÔøΩgÔøΩ_ÔøΩ|F\u0003ÔøΩ{ÔøΩÔøΩE2wÔøΩÔøΩ*RVÔøΩÔøΩM\u0026€•\u001bÔøΩÔøΩ◊≥f_ÔøΩÔøΩÌê†sÔøΩÔøΩÔøΩÔøΩ/\u003eÔøΩ^BÔøΩ%\nwÔøΩ\u001cÔøΩFlÔøΩÔøΩÔøΩfi$!ÔøΩÔøΩT\u001eÔøΩÔøΩQbÔøΩ\u003c?ÔøΩ\u0006ÔøΩDÔøΩQÔøΩCÔøΩOÔøΩ\u000bÔøΩÔøΩ\u003eÔøΩÔøΩÔøΩÔøΩ\nÔøΩCHÔøΩÔøΩÔøΩ\u0003ÔøΩÔøΩŸáÔøΩÔøΩÔøΩÔøΩ\u0014UÔøΩ|\u0010xÔøΩÔøΩÔøΩÔøΩL*ÔøΩÔøΩÔøΩÔøΩ\u001d0ÔøΩÔøΩÔøΩÔøΩ\u001aÔøΩ568ÔøΩ\u0019ÔøΩÔøΩDÔøΩÔøΩ!\u001eN\u0026QÔøΩÔøΩÔøΩ\u0004(ÔøΩx}ÔøΩuqdÔøΩÔøΩ\u001cÔøΩ\b`[ÔøΩr\u0016∆∞ÔøΩÔøΩ}ÔøΩX\u0026ÔøΩ+\u0015ÔøΩÔøΩ\u003d\u0011ÔøΩC]ÔøΩÔøΩÔøΩI\"7!ÔøΩ\u001eÔøΩ\u001b\u000eK`{ÔøΩ@ÔøΩFÔøΩÔøΩsÔøΩÔøΩÔøΩ\u0006ÔøΩÔøΩÔøΩ“çM\u0017\u0005œîÔøΩ5\\ÔøΩfÔøΩAÔøΩ\u0000\u0018)ÔøΩÔøΩÔøΩÔøΩ_\u0017ÔøΩ\u001eÔøΩÔøΩ\u0026ÔøΩÔøΩ\u0013ÔøΩ|\u0016\u0026EÔøΩÔøΩ0it\u001bb\"5ÔøΩÔøΩrÔøΩÔøΩS1ÔøΩÔøΩ\u0004ÔøΩ\u000fÔøΩÔøΩ3\u0007AÔøΩÔøΩÔøΩv^⁄Å\u0012ÔøΩ\u0018ÔøΩÔøΩT;ÔøΩÔøΩ\u0003)$y\u0003ÔøΩIyÔøΩfÔøΩ_ÔøΩÔøΩÔøΩÔøΩÔøΩoÔøΩ\u0016ÔøΩÔøΩÔøΩÔøΩÔøΩKÔøΩÔøΩÔøΩÔøΩ\u0003€òÔøΩÔøΩ\u003eÔøΩÔøΩ[\u001d[ÔøΩÔøΩÔøΩUÔøΩÔøΩ‹àÔøΩËî©ÔøΩÔøΩ\u0002UÔøΩÔøΩuAW›ÉÔøΩÔøΩÔøΩÔøΩÔøΩ+oÔøΩFÔøΩÔøΩdÔøΩÔøΩÔøΩÕã\fY≈´\u000fÔøΩOQÔøΩ\u000eÔøΩÔøΩÔøΩKL¬ìFÔøΩÔøΩ$ÔøΩ\f5MÔøΩÔøΩ*s\fÔøΩt’¢ÔøΩÔøΩÔøΩÔøΩ«ùÔøΩÔøΩÔøΩEÔøΩÔøΩOÔøΩÔøΩÔøΩ#ÔøΩCÔøΩÔøΩÔøΩ@ÔøΩÔøΩR’ãÔøΩÔøΩ\u001d5\u001bOÔøΩÔøΩ9ÔøΩ\u0003o\u0012\u0016ÔøΩÔøΩÔøΩuÔøΩ\u0019wOÔøΩ\u0010ÔøΩÔøΩÔøΩÔøΩ5~ÔøΩ[\u0007\u000b\u001cUGÔøΩCRÔøΩ\u0003ÔøΩUQÔøΩÔøΩ\nÔøΩÔøΩ\u0003ÔøΩ-ÔøΩHÔøΩÔøΩ9ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ]ÔøΩOÔøΩÔøΩÔøΩÔøΩ?#ÔøΩ#ÔøΩÔøΩYÔøΩÔøΩÔøΩ\u001aÔøΩ%ÔøΩF}\b\u0011ÔøΩ\u001bÔøΩÔøΩQs`\u001ctÔøΩÔøΩÔøΩ8JÔøΩ\\ÔøΩ\u0016I\u003ci\u0017ÔøΩÔøΩ\u0003ÔøΩJ}mÔøΩ\nSÔøΩQÔøΩÔøΩÔøΩ/◊£ÔøΩÔøΩÔøΩ\u0027|\u001a\u0018ÔøΩ\u0005ÔøΩRÔøΩÔøΩOÔøΩ__}ÔøΩ\u001a\u001fQÔøΩ\u0027XÔøΩÔøΩ\f\u000eÎºä\u0026ÔøΩB\u0004ÔøΩ:Õ≥ÔøΩ2ÔøΩ\u000eÔøΩÔøΩÔøΩvÔøΩÔøΩÔøΩ3xÔøΩÔøΩ1ÔøΩÔøΩ\u00000N7ÔøΩÔøΩ\u000ez}\u0014ÔøΩÔøΩÔøΩ«∞ÔøΩPÔøΩ ÔøΩÔøΩÔøΩÔøΩB\u003e\u0002ÔøΩ\u0014ÔøΩy?9ÔøΩ\u0010ÔøΩÔøΩÔøΩÔøΩ\u0026»øÔøΩ/LMq \u001bÔøΩV\u001bÔøΩKÔøΩÔøΩ\nÔøΩZ\u0002ÔøΩ5ÔøΩZ\u001e+ÔøΩAÔøΩÔøΩK]t€ìÔøΩÔøΩÔøΩkÔøΩ[ÔøΩWÔøΩÔøΩ\u0019ÔøΩ\u0006\\Jl+ÔøΩÔøΩrÔøΩÔøΩ\fR(\u001eÔøΩ:\"ÔøΩÔøΩr/ƒ®\u0018,ÔøΩÔøΩ,\bÔøΩlRoJ8\u0011S`yÔøΩdÔøΩ\u0017q\u0012Jj\u00138ÔøΩÔøΩÔøΩVÔøΩÔøΩ4ÔøΩÔøΩÔøΩ8\u0005!\u0011ÔøΩ\u003cÔøΩ+ÔøΩÔøΩÔøΩR%ÔøΩuzÔøΩÔøΩL/\u0007qÔøΩÔøΩ;ÔøΩ\"ZBÔøΩÔøΩÔøΩ`ÔøΩÔøΩDÔøΩ\tFÔøΩÔøΩf\u001a\u0011eÔøΩÔøΩ\u001aÔøΩs^WÔøΩXWÔøΩsvFÔøΩ~`ÔøΩÔøΩ\u0014UOUÔøΩenÔøΩÔøΩÔøΩÔøΩ!≈¶H\u001fp\r ÔøΩ\u0003ÔøΩ\f †.*ÔøΩrÔøΩgÔøΩÔøΩ9‚óßCÔøΩ,\t\u0018Y\u000eKQÔøΩ\nÔøΩÔøΩy\u001eÔøΩÔøΩ[n\"ÔøΩÔøΩÔøΩ\u0010i\u001cÔøΩÔøΩ)\u001b{ÔøΩ\u001bÔøΩÔøΩÔøΩWÔøΩ#\"ÔøΩrÔøΩÔøΩÔøΩLxÔøΩH\u001dÔøΩÔøΩ\u00033ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\r:ÔøΩ\u0026ÔøΩÔøΩÔøΩqÔøΩ#g;ÔøΩ\u003e{x~ÔøΩ\u0007ÔøΩUoÔøΩÔøΩx\u000bÔøΩÔøΩ\u001eQ76ÔøΩ?-ÔøΩÔøΩRÔøΩ\u0011[ÔøΩÔøΩ\u001cMÔøΩ(\\\u0018`\u0005ÔøΩ\u0002zd_\u0003ÔøΩ\u0003dÔøΩÔøΩÔøΩ\u003eÔøΩ?ÔøΩGU\u0026ÔøΩ\u00129k\u001aÔøΩ\u0011\u001a@ÔøΩ\u0002ÔøΩ\u003c\bE#(R\u0005ÔøΩr\u0007‘íÔøΩegE\u0006sÔøΩ8ÔøΩ\u0007ÔøΩŸÅJ\u0027rÔøΩqÔøΩÔøΩÔøΩÔøΩÔøΩ\u0007ÔøΩÔøΩP+ÔøΩÔøΩEÔøΩÔøΩŒû1ÔøΩÔøΩ!ÔøΩ…ë\u000e`ÔøΩ\u0001ÔøΩ6, ÔøΩÔøΩÔøΩ nÔøΩÔøΩ\u000f@ÔøΩÔøΩ}ÔøΩ`q!ÔøΩn\u000e}C\fÔøΩÔøΩ\u001dÔøΩÔøΩ$\u0012ÔøΩÔøΩDÔøΩl9ÔøΩHzÔøΩÔøΩYÔøΩÔøΩÔøΩÔøΩ~dÔøΩv{ÔøΩÔøΩ\u001bÔøΩÔøΩ\u000b9ÔøΩÔøΩÔøΩÔøΩx—óaÔøΩS√ìe4ÔøΩgÔøΩDÔøΩÔøΩ ®ÔøΩBÔøΩÔøΩ\u001cOYÔøΩD\u003eÔøΩ\u001f{dÔøΩÔøΩh}ÔøΩÔøΩÔøΩIÔøΩÔøΩÔøΩÔøΩ\u0002\u0012ÔøΩ0\u000f\u001aÔøΩÔøΩÔøΩjÔøΩDÔøΩgÔøΩ7\u0011AÔøΩ\u0019ÔøΩtÔøΩÔøΩ\u000b’çtÔøΩÔøΩÔøΩ\u0010ÔøΩZÔøΩÔøΩ\beÔøΩÔøΩ:n\u0001z)ÔøΩÔøΩÔøΩ1ÔøΩoH`ﬁíƒπ#ÔøΩIÔøΩ\u0007ÔøΩÔøΩÔøΩ[ex|PÔøΩÔøΩ*M#ÔøΩÔøΩÔøΩNÔøΩÔøΩ?O)ÔøΩÔøΩ\u0014ÔøΩIU\u000bÔøΩ8G9\u0015\u0026ÔøΩFdbÔøΩ\u001c\u0027ÔøΩÔøΩ1T6ÔøΩFÔøΩÔøΩ,ÔøΩÔøΩ1ÔøΩÔøΩ(\u001cÔøΩﬁû\u0006*4SÔØë4ÔøΩÔøΩ\u001eÔøΩÔøΩvÔøΩÔøΩÔøΩt6;ÔøΩ\u0013~ÔøΩEF@ÔøΩÔøΩÔøΩ\bWÔøΩÔøΩ-\u001cÔøΩ/\u0015ÔøΩÔøΩVTÔøΩÔøΩ,X6l\u000fzÔøΩr\u0005VÔøΩ\n?ÔøΩÔøΩ\u0026\\j”ÜÔøΩrÔøΩÔøΩÔøΩ\u0013ÔøΩÔøΩÔøΩÓÇ∫\u0026\u0010\ntÔøΩÔøΩÔøΩXz(\"LkÔøΩ7ÔøΩ#ÔøΩDkÔøΩÔøΩÔøΩ+ÔøΩ8”çÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩBOÔøΩ,ÔøΩb]ÔøΩÔøΩÔøΩÔøΩ\u0003IÔøΩÔøΩ\u0001bÔøΩÔøΩ\u001cÔøΩb\u00032ÔøΩvÔøΩÔøΩnÔøΩ\u0002\u003dcÔøΩ\u0014ÔøΩÔøΩÔøΩÔøΩ1\u0001ÔøΩÔøΩ* ÔøΩFoÔøΩrÔøΩ\u0012ÔøΩhÔøΩﬁãAPO\nbg!ÔøΩ\u000fÔøΩÔøΩÔøΩ_kÔøΩÔøΩÔøΩ\u001dNÔøΩ!WDÔøΩÔøΩ\u0027ÔøΩ\u0018ÔøΩu}ÔøΩ\u001aÔøΩÔøΩÔøΩ\u001doÔøΩ0\u0018ÔøΩÔøΩ[ÔøΩÔøΩ\u001atj\u00057ÔøΩ*wV$Z\u0002ÔøΩ\u003eÔøΩUXÔøΩ\u0000ÔøΩÔøΩ{ÔøΩx\u0026ÔøΩ6»ñÔøΩ\u0015ÔøΩPÔøΩ9ÔøΩZ\u0014ÔøΩZÔøΩ^ÔøΩ\u0000ÔøΩeÔøΩ\u0005WÔøΩÔøΩÔøΩz\u0015ÔøΩTÔøΩm^ÔøΩÔøΩ\u000f\u001aaÔøΩ\u0014V\u0014z\tÔøΩk\u0003ÔøΩÔøΩÔøΩÔøΩ\u003cV\u0006ÔøΩÔøΩg3\u0004Y]ÔøΩÔøΩrÔøΩ\u003en\nÔøΩÔøΩÔ≠º\u0004ÔøΩKÔøΩÔøΩ.ÔøΩJÔøΩE\tB\u001aÔøΩÔøΩ\u0002ÔøΩMIn\u0005ÔøΩ¬ø\u001d\u00274jKÔøΩÔøΩÔøΩRÔøΩ\"\u001bÔøΩ[ÔøΩ\"\tÔøΩ9ÔøΩ\u000eÔøΩÔøΩ\u000e\u0026ÔøΩG\u0001ÔøΩÔøΩ\u003d3Âæ≥ÔøΩÔøΩÔøΩAX”èN*ÔøΩÔøΩDÔøΩTÔøΩÔøΩ.,ÔøΩÔøΩÔøΩÔøΩ\u00160\t\u003e`ÔøΩÔøΩ1ÔøΩÔøΩvxh{e\u0001ÔøΩQÔøΩAZ\u0026ÔøΩÔøΩÔøΩ\u0014ÔøΩ\u0004YÔøΩ#ÔøΩq\u000faÔøΩE\u0004\u001cÔøΩÔøΩÔøΩÔøΩuÔøΩoÔøΩ\u0015pSY\u0005ÔøΩQ0ÔøΩÔøΩGÔøΩÔøΩ9ÔøΩÔøΩ8\u001aÔøΩy\u0006[—§xF^)fÔøΩKÔøΩ÷ÄJ\u001dÔøΩÔøΩ,H#\u0016ÔøΩÔøΩ≈¶ÔøΩ\nÔøΩ\u0015ÔøΩ46\u000bZÔøΩÔøΩGÔøΩ\u0001ÔøΩ\u0018ÔøΩŒ°ÔøΩ\tÔøΩolÔøΩÔøΩiqÔøΩÔøΩÔøΩÔøΩFÔøΩ\u0005+ÔøΩÔøΩiÔøΩ\u001aQAÔøΩmÔøΩ5_SI\u0019~5`S\u001aÔøΩÔøΩÔøΩﬂçÔøΩÔøΩV‹®\u001aÔøΩFÔøΩÔøΩÃù(ÔøΩ ÔøΩn_ÔøΩÔøΩÔøΩOÔøΩÔøΩ\u0026ÔøΩÔøΩÔøΩrÔøΩ.ÔøΩÔøΩÔøΩÔøΩ\u0010ÔøΩkRÔøΩNÔøΩ\u0007ÔøΩÔøΩtIÔøΩ\u001f,ÔøΩÔøΩÔøΩÔøΩ\u0016ÿíu$ÔøΩ\u0005÷©wE\u0015ÔøΩpÔøΩ7\u0006ÔøΩ\r\u0026@o4#.ÔøΩEd\u0026ÔøΩ5ÔøΩ\fL6Y\u0015ÔøΩS\n?ÔøΩq\u003eÔøΩ5x4HÔøΩ\u0014Ha\u0016\u0026ÔøΩÔøΩÔøΩﬂüÔøΩÔøΩÔøΩÔøΩ\u0013\u0016\u00050ÔøΩn»©h«∞ÔøΩ\u003eÔøΩ…±\u003cHÔøΩÔøΩX÷é”Ü-ÔøΩ\u0006ÔøΩ\"ÔøΩÔøΩÔøΩJÔøΩÔøΩ\u0010\tiÔøΩ?ÔøΩÔøΩ\fÔøΩaÿäfÔøΩjdLÔøΩ\u0001ÔøΩÔøΩÔøΩ\"\u0011\u0013}ÔøΩkzÔøΩÔøΩÔøΩÔøΩ’ØÔøΩ1ÔøΩ:ÔøΩ\u003eÔøΩZÔøΩÔøΩÔøΩ\"ÔøΩÔøΩÔøΩYD07”ñÔøΩÔøΩÔøΩÔøΩÔøΩ\u0003+gmÔøΩÔøΩÔøΩgÔøΩ)ÔøΩÔøΩ}ÔøΩe\u00265ÔøΩVPÔøΩ«É\u0004\u0013[ÔøΩÔøΩÔøΩÔøΩ\"\u003d{:\tq-ÀôÔøΩ\u003d6ÔøΩÔøΩVKÔøΩ-\\ÔøΩÔøΩÔøΩÔøΩ!lCÔøΩMÔøΩ6j\u0027\fKÔøΩ%\nÔøΩPCV\u0003ÔøΩÔøΩ6:ÔøΩÔøΩ’ÄÔøΩÔøΩÔøΩ\"ag\u0013y\u001f2VÔøΩZ`ÔøΩrÔøΩÔøΩÔøΩ\u003dÔøΩÔøΩÔøΩ{ÔøΩÔøΩI\u003dÔøΩ\u0026ÔøΩ\u001eÔøΩd\u0027}ÔøΩÔøΩÔøΩ\u00049ÔøΩÔøΩÔøΩ\u000bÔøΩÔøΩÔøΩ*ÔøΩÔøΩAÔøΩ_-ÔøΩHÔøΩÔøΩkÔøΩÔøΩ\u0026ÔøΩ\r!\u0026+yL\u0026HÔøΩÔøΩ\u0001IVÔøΩIÔøΩwÔøΩÔøΩ@ÔøΩuÔøΩ ï:ÔøΩ!ÔøΩÔøΩÔøΩÔøΩÔøΩ\\ÔøΩf,ÔøΩ\b?FFÔøΩC\u001fÔøΩvÔøΩÔøΩ3ÔøΩÔøΩBÔøΩp\u0006zÔøΩ\nÔøΩ\u0010ÔøΩ0ÔøΩÔøΩgÔøΩÔøΩÔøΩSÔøΩÔøΩtÔøΩÔøΩ5\u003dÔøΩJRa]ÔøΩNÔøΩ\u0026ÔøΩÔøΩ7ÔøΩG$8ÔøΩÔøΩÔøΩl0ÔøΩÔøΩ9ÔøΩÔøΩl\u000eÔøΩwÔøΩ4ÔøΩÔøΩÔøΩ\u0007G\u003dÔøΩÔøΩÔøΩÔøΩEÔøΩÔøΩ$ÔøΩÔøΩÔøΩÔøΩ|ÔøΩÔøΩG\u001dsÔøΩ\u000eÕ∂X¬ø.ÔøΩÔøΩÔøΩ[ÔøΩÔøΩÔøΩÔøΩÔøΩqvÔøΩ\u000eÔøΩ.o6\u001bÔøΩÔøΩ4\fÔøΩÔøΩZÔøΩÔøΩ\u001dwÔøΩlWZuÔøΩ\u003d,bÔøΩÔøΩÔøΩ\r\u0006ÔøΩÔøΩ\u001bÔøΩ\u0000-IÔøΩ\u0000xÔøΩ\u0019ÔøΩ\u0013ÔøΩÔøΩSÔøΩÿæ\t~ZÔøΩ\u001aÔøΩÔøΩÔøΩÔøΩÔøΩ\u0006ÔøΩÔøΩcÔøΩÔøΩÔøΩ0LÔøΩRqZÔøΩ,SÔøΩ\u0002ÔøΩ1\u001dÔøΩ*[ÔøΩÔøΩÔøΩÔøΩ9›¢ÔøΩÔøΩÔøΩQÔøΩ\u0017AFÔøΩÔøΩ\u001eÔøΩ_«Å\u0006ÔøΩTÔøΩ\u001a\u001a\fwVo\u003dÔøΩV∆¥\u001f\u001exÔøΩE\b\u003cÔøΩÔøΩ\u0003ÔøΩÔøΩ\u001c\u003eo…èÔøΩÔøΩ\u0011ÔøΩPÔøΩÔøΩP√ëpÔøΩtÔøΩiÔøΩs/ÔøΩ\f_tÔøΩ\u000f-ÔøΩÔøΩ\fÔøΩ|ÔøΩ9ÔøΩ\u001aÔøΩÔøΩŸ¨ÔøΩc83ÔøΩ!EÔøΩFK\u0026ÔøΩÔøΩ .ÔøΩÔøΩmlÔøΩ9ÔøΩoÔøΩ\u003dZ\u0005/uR\u0000IÔøΩ\u001e5Ã∞ÔøΩ~QÔøΩTwuÔøΩT\u00139\u001aÔøΩ-ÔøΩxggÔøΩÔøΩÔøΩÔøΩÔøΩ€æÔøΩsÔøΩÔøΩÔøΩgÔøΩr\u0000ÔøΩu2ÔøΩ.ÔøΩÔøΩÔøΩÔøΩY+ÔøΩ\u0005ÔøΩQÔøΩ#~BÔøΩ\bRÔøΩ\u0018\u0011\u003d;∆õÔøΩiÔøΩÔøΩ\u003eT]\b\u001eÔøΩ\u001aƒ∞ÔøΩÔøΩÔøΩgÔøΩÔøΩ1ÔøΩÔøΩ+ÔøΩ0ÔøΩÔøΩÔøΩ\u003d\n\u0027u\u001dÔøΩÔøΩÔøΩQpÔøΩ+G\u000e^\u0018⁄ö\u001a\u0013\u0026ÔøΩ\u0001ÔøΩnjÔøΩÔøΩ\u0012ÔøΩ\u0011ÔøΩcÔøΩÔøΩ¬ãÔøΩÔøΩÔøΩ-»™ÔøΩ*ÔøΩÔøΩÔøΩ\u0016QÔøΩÔøΩhSÔøΩ\u003caÔøΩ*ÔøΩYÔøΩ?ƒãUkÔøΩÔøΩ\u0011@ÔøΩZD9ÔøΩ2œÉ)|ÔøΩÔøΩÔøΩ8ÔøΩt+ÔøΩ|\u0007ÔøΩCÔøΩ\u000eÔøΩÔøΩE—ÄP\u0017ÔøΩÔøΩÔøΩ\u0017CÔøΩoZÔøΩÔøΩÔøΩbÔøΩxÔøΩÔøΩÔøΩÔøΩ\u0003%:N\u00183^\\\u001aÀ£ÔøΩ`ÔøΩWÔøΩvÔøΩN ∏LÔøΩÔøΩÔøΩÔøΩhÔøΩÔøΩÔøΩ\u0026qÔøΩ4zÔøΩcœæÔøΩ⁄≥ÔøΩÔøΩÀÜÔøΩ1~\u003elÔøΩLÔøΩÔøΩÔøΩ~\u003dÔøΩ\u003e{ÔøΩÔøΩÔøΩoQÔøΩ1ÔøΩhÔøΩVÔøΩfpÔøΩÔøΩa\u0017ÔøΩÔ±èÔøΩ6ÔøΩ$\boMzÔøΩ\u0017\u0006ÔøΩ[ÔøΩ+ÔøΩÔøΩÔøΩÔøΩmÔøΩÔøΩÔøΩÔøΩÔøΩ\b%ÔøΩ\u000eÔøΩ\"ÔøΩ5OUÔøΩÔøΩ\u0026ÔøΩ\u0014ÔøΩÔøΩÔøΩÔøΩ+ÔøΩcÔøΩÔøΩÔøΩc\u0019%{ÔøΩ/ÔøΩÔøΩÔøΩ\"ÔøΩÔøΩTÔøΩÔøΩÔøΩoÔøΩlmÔøΩweÔøΩtÔøΩ\u003cÔøΩÔøΩI\"iK\u0004ÔøΩÔøΩCJp\bTV\rÔøΩ_tGÔøΩMsÔøΩ\u0015ÔøΩÔøΩ#ÔøΩÔøΩÔøΩÔøΩÔøΩDÔøΩÔøΩÔøΩ^}\fÔøΩÔøΩ\u003c\u003dÔøΩ8ÔøΩÔøΩ\u0000VÔøΩ\u000b`ÔøΩÔøΩ;F\u001eÔøΩÔøΩ«∫\u000eÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u0019ÔøΩL.O\u000eMÕê\\ÔøΩÔøΩ(ÔøΩÔøΩÔøΩ\u001dCÔøΩ“∏R_\r\u003eÔøΩÔøΩÔøΩ\u0017ŸúÔøΩZÿüYÔøΩ\u000e\u0013fSÔøΩÔøΩÔøΩ%ÔøΩÔøΩÔøΩ\u0004\u001fYÔøΩÔøΩ‹®`ÔøΩ\\\u0027ÔøΩ\u001a∆ÅvjÔøΩÔøΩÔøΩ2OjÔøΩ\u001dF\u0007\u0002\u0000ÔøΩ\u00117T3L\u001cÔøΩ\b\u0006R$yÔøΩÔøΩÔøΩÔøΩÔøΩ`ÔøΩA\u0002OÔøΩÔøΩl4ÔøΩÔøΩ0VÔøΩ\u0006ÔøΩÔøΩqÔøΩÔøΩÔøΩ\u0027—¥\u0003ÔøΩ’é\u0013ÔøΩÔøΩ√Ö?QIcÔøΩ7-ÔøΩÔøΩSÔøΩb`f≈¢ÔøΩÔøΩ\u00013ÔøΩ}ÔøΩyÔøΩÔøΩ\u0001€ÄÔøΩ\u000ezo[ÔøΩ\u0006ÔøΩ}ÔøΩ\u0016ÔøΩœã\u001dRÔøΩbÔøΩ]ÔøΩ*ÔøΩ9ÔøΩ\u0019.\u0005ÔøΩaÔøΩÔøΩÔøΩ\u0010_\u001aÔøΩÔøΩÔøΩ\u0000?$\u0000ÔøΩÔøΩGÔøΩÔøΩUÔøΩÔøΩ\u0005\nsm0ÔøΩqL\u0018[ÔøΩd\u003dÔøΩ…ÖÔøΩ\u001cÔøΩ+bMÔøΩÔøΩ3ÔøΩ\u0012ÔøΩ≈ø\ng1ÔøΩoO#GÔøΩÔøΩÔøΩS›ºÔøΩÔøΩÔøΩÔøΩÔøΩ!ÔøΩAÔøΩÔøΩ!ÔøΩÔøΩÔøΩÔøΩ\u000fÔøΩ\u0013\u0005ÔøΩ’∞\u001f{TÔøΩ\u001f\u0013k?0*ÔøΩjÔøΩ~\u0006ÔøΩÔøΩ}ÔøΩÔøΩ\u0003ÔøΩF\u0004RHÔøΩ\bÔøΩ E√†ÔøΩD3ÔøΩ»òtÔøΩÔøΩ\u003d\"ÔøΩCÔøΩÔøΩbÔøΩLm3ÔøΩÔøΩSÔøΩÔøΩZIÔøΩ6\u0010RÔøΩ\u003d@kÔøΩzÔøΩS/\u0010t\u003eLaÔøΩÔøΩÔøΩ\u001aÔøΩÔøΩÔøΩ\fÔøΩÔøΩ\u001d\u0001ÔøΩÔøΩ!ÔøΩÔøΩÔøΩziÔøΩb\u001aÔøΩÔøΩÔøΩ\u0014ÔøΩ\u003dWIÔøΩÔøΩÔøΩgÔøΩ\u003eÔä¢0\u0027ÔøΩÔøΩÔøΩCÔøΩuÔøΩÔøΩoÔøΩÔøΩ_%ÔøΩz33GÔøΩ\u0016 ÔøΩÔøΩÔøΩ;ÔøΩÔøΩtÔøΩm!4*EÔøΩÔøΩQÔøΩÔøΩ|[ÔøΩÔøΩuÔøΩÔøΩ[ÔøΩ\u0018kÔøΩWÔøΩ#)8\bÔøΩfÔøΩÔøΩÔøΩÔøΩf\fÔøΩ…å\u0014O\u000eÔøΩe\u001bUÔøΩ\u0027\\GÔøΩ}ÔøΩ\u00140ÔøΩT\u0015nÔøΩÔøΩÔøΩwC‚ààœÜ.CÔøΩGÔøΩÔøΩÔøΩ\u0004∆ôP\u001aDÔøΩÔøΩ]ÔøΩÔøΩNÔøΩ\nbÔøΩgÔøΩFÔøΩ\u001aJT1ÔøΩ_ÔøΩÔøΩÔøΩ\u00180ÔøΩÔøΩÔøΩ%RÔøΩÔøΩNÔøΩÔøΩ(sÔøΩ\n◊üNÔøΩÔøΩ\u0013-ÔøΩ\u0004PÔøΩ;LÔøΩÔøΩÔÆ°ÔøΩÔøΩÔøΩ8ÔøΩ√îÔøΩÔøΩÔøΩ|ÔøΩÔøΩz/ÔøΩd9u\u0001ÔøΩÔøΩWÔøΩ,Y-RÔøΩÔøΩÔøΩÔøΩÔøΩ@ÔøΩÔøΩÔøΩÔøΩ\u001a*ÔøΩÔøΩoV5\u0002nÔøΩ\u0017\u0011ÔøΩw\u0003ÔøΩ\u000ewÔøΩÔøΩgÔøΩÔøΩ%J\u001eÔøΩ7ÔøΩÔøΩ%ÔøΩREZwÔøΩ(ÔøΩiÔøΩS%qÔøΩÔøΩÔøΩKÔøΩÔøΩhÔøΩ*14yÔøΩÔøΩT,\u000eJÔøΩ6U6vD:ÔøΩ`ÔøΩÔøΩÔøΩmÔøΩQwÔøΩÔøΩÔøΩÔøΩBÔøΩ\nr\u003dI≈ÖÔøΩ8ÔøΩSÔøΩÔøΩ$ÔøΩ|lÔøΩ?ÔøΩ-ÔøΩ4ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩSs\u001eÔøΩ4ÔøΩ\u000eÔøΩ1ÔøΩVÔøΩÔøΩ\u0003ÔøΩSÔøΩtK\f$ÔøΩ1ÔøΩ:CÔøΩÔøΩÔøΩ\trqÔøΩÔøΩÔøΩÔøΩ\u0016\u001cÔøΩk\u0004A⁄èÔøΩÔøΩÔøΩl[y2ÔøΩNOÔøΩgÔøΩyÔøΩÔøΩ\u0003ÔøΩGf\u0027diÔøΩ\u000eÔøΩjoR\"ÔøΩ}UÔøΩÔøΩZÔøΩUÔøΩÔøΩ(œö\u001a{ƒªÔøΩ\u00000-ÔøΩ\u001aÔøΩ]mÔøΩﬂôaÔøΩÔøΩuÔøΩ\r\u0004ÔøΩÔøΩ-:ÔøΩÔøΩÎãé\rÔøΩ\u001cb75{ÔøΩ{ÔøΩ\u001aÔøΩÔøΩpÔøΩ}ÔøΩÔøΩ\nÔøΩ4ÔøΩY\u0027ÔøΩ«π\u0016ÔøΩ3wÔøΩÔøΩÔøΩÔøΩÔøΩ\u0016ÔøΩ!ÔøΩÔøΩÔøΩ`ÔøΩÔøΩEdÔøΩÔøΩ$ÔøΩGÔøΩÔøΩwÔøΩv”∫s\u00108\u0018ÔøΩ}ÔøΩÔøΩÔøΩÔøΩ0ÔøΩÔøΩÔøΩSÔøΩ ΩpÔøΩ\u0005ÔøΩÔøΩ\u0027ÔøΩ\u0000\u0016ÔøΩ\u0017ÔøΩ\u001d+w\u0000.]\u001dDj/ÔøΩÔøΩ\u0026ÔøΩ\"{ÔøΩZÔøΩ\u000f\u0019ÔøΩvtÔøΩÔøΩdÔøΩÔøΩ%ÔøΩlÔøΩnÔøΩÔøΩÔøΩjÔøΩÔøΩÔøΩÔøΩKÔøΩ\u0013ÔøΩhÔøΩ\u0016ÔøΩÔøΩ- +ÔøΩ\u0013ÔøΩUÔøΩÔøΩÔøΩZÔøΩ\u0005Zz\u003eqÔøΩ7ÔøΩÔøΩd2yÔøΩ5…Ü6…∞ÔøΩ·¥Ω!ÔøΩÔøΩÔøΩ3DÔøΩÔøΩmÔøΩÔøΩsÔøΩ!\u0013OÔøΩÔøΩÔøΩÔøΩÔøΩC\u001dz2œôÔøΩ\u001aÔøΩxÔøΩÃ¶ÔøΩWÔøΩ;ÔøΩ\u001c\u0017ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ1\u0010ÔøΩÔøΩP\u0003ÔøΩÔøΩDÔøΩÔøΩ\u0005ÔøΩX\u0014xCÔøΩÔøΩO\u001d\u0018\u0026XÔøΩÔøΩ\u0002ÔøΩ-g\u0015\u000eÔøΩ4ÔøΩÔøΩH$ÔøΩÔøΩ\u0027;\u001e\u0000ÔøΩÔøΩÔøΩJ\u0006ÔøΩt\u000bÔøΩÔøΩPÔøΩÔøΩ\u0004!ÔøΩ-iÔøΩÔøΩÔøΩ\u003d3ÔøΩo;ÔøΩ.ÔøΩdHÔøΩ›∫ÔøΩÔøΩ`ÔøΩxÔøΩÔøΩÔøΩ\"ÔøΩQKÔøΩlÔøΩrrÈû©\u001affÔøΩ\u0015ÔøΩ\u001c\\ÔøΩbÔøΩÔøΩ\u0016\\ÔøΩ1ÔøΩ\u003cLoÔøΩÔøΩU\u001fUÔøΩ\u0000ÔøΩ)ÔøΩ@8ÔøΩKÔøΩ\u0013ÔøΩLpÔøΩÔøΩrÔøΩÔøΩ\u001buÔøΩÔøΩVÔøΩSÔøΩ{\u0000ÔøΩHÔøΩÔøΩÔøΩÔøΩ4ÔøΩÔøΩ`ÔøΩÔøΩÿÇÔøΩÔøΩÔøΩÔøΩ\\ÔøΩq\u001fÔøΩag\u001a\\qÔøΩÔøΩAÔøΩ#\u0005\u0006ÔøΩ?ÔøΩ\u0007bÔøΩxFÔøΩ1RÔøΩ0ÔøΩldP5ÔøΩ`+ÔøΩ,ÔøΩ{u\u001aÔøΩ\u0002÷´ÔøΩKÔøΩÔøΩÔøΩ9\u003eÔøΩÔøΩÔøΩsvÔøΩÔøΩ|ŸùÔøΩ\u0002ÔøΩQÔøΩÔøΩÔøΩ≈ãÔøΩÔøΩ ÔøΩ8(jÔøΩ\u003dZÔøΩ\u0014\u003cfÔøΩ}?4ÔøΩ\rQmÔøΩFÔøΩÔøΩ-ÔøΩeÔøΩD\u003cdÔøΩÔøΩÂîÆD*\u000fÔøΩÔøΩÔøΩÔøΩeÔøΩ\u003dw›áÔøΩÔøΩÔøΩÔøΩZ;ÔøΩjs[PR\u0015ÔøΩ3ﬂç-ÔøΩÔøΩÔøΩXÔøΩÔøΩ3\fnÔøΩOÔøΩÔøΩ\n`RQ:AQÔøΩsÔøΩ\u001cÔøΩÔøΩ≈òÔøΩÔøΩÔøΩhÔøΩ\nF\u001dÔøΩK/nR\"2ÔøΩÔøΩÔøΩ1ÔøΩ#ÔøΩrÔøΩÔøΩ`\u0015tÔøΩEfÔøΩÔøΩRÔøΩvVzÔøΩÕ∏ÔøΩzÔøΩ\u001bYÔøΩ~cr\u00033ÔøΩ\u001e\u0015%ÔøΩﬁÆc\"ÔøΩB\u001f_ÔøΩMStÔøΩ4\u0004ÔøΩ\u0002ÔøΩHÔøΩÔøΩ\u0012\u001bGÔøΩ◊∞\u001eÁ∏ûÔøΩÔøΩÔøΩDÔøΩÔøΩ4qÔøΩÔøΩO@v\f\nI\u0026jd\u000fŸµ.ÔøΩ,qYDÔøΩÔøΩ!ÔøΩÔøΩÔøΩÔøΩ\u000eÔøΩyU@E\u0026ÔøΩ]ÔøΩZPKÔøΩ,ÔøΩ\bG$ÔøΩO;n1\u0005\u001bÔøΩ\u000bÔøΩdÔøΩ\u0000ÔøΩ\tQÔøΩ|ÔøΩ√ßﬂ∞z\u000eY\u0013ÔøΩÔøΩ4ÔøΩÔøΩ\u0010ÔøΩÔøΩ4ÔøΩÔøΩdÔøΩÔøΩEoÔøΩÔøΩqÔøΩdNÃãÔøΩÔøΩjÔøΩÔøΩ{ÔøΩ\b⁄ÄÔøΩÔøΩÔøΩ\u000bÔøΩƒù÷õÔøΩÔøΩ@4FÔøΩÔøΩÔøΩÔøΩÔøΩGÔøΩÔøΩ`ÔøΩÔøΩÔøΩÔøΩD)3ÔøΩU\fÔøΩ4T,@ÔøΩdUÔøΩcÔøΩ\nÔøΩÔøΩjÔøΩr_ÔøΩÔøΩ\u001fÔøΩVÔøΩ-ÔøΩÔøΩÔøΩŒäÔøΩ\u0016ÔøΩcÔøΩ%\u003dPÔøΩÔøΩÔøΩF\u003dÔøΩuÔøΩÔøΩ\u0026rÔøΩÔøΩÔøΩ\u0015\u0000ÔøΩÔøΩÔøΩÔøΩ1ÔøΩZÔøΩÔøΩrÔøΩZ8[WÔøΩÔøΩ\u0013)ÔøΩÏÖ∑\u0000Q\u000eÔøΩÔøΩBÔøΩQ\u0007q;ÔøΩÔøΩÔøΩycT◊ñ\u0015ÔøΩÔøΩsÔøΩ:ÔøΩ\u0004oÔøΩÔøΩÀävOŸÉÔøΩ\f]ÔøΩ\u003e\n\u0013ÔøΩŸçÔøΩ#ÔøΩÔøΩUJÔøΩÔøΩwLKEÔøΩÔøΩ}[E\u0011\u0015ÔøΩÔøΩÔøΩ\t\u001d09xÔøΩ\u0001ÔøΩÔøΩ ÔøΩÔøΩÔøΩ\u001f\u0011ÔøΩjÔøΩUÔøΩÔøΩrI\u001d\u0018ÔøΩÔøΩ6ÔøΩÔøΩÔøΩAÔøΩÔøΩ\u003dÔøΩÔøΩ\u001dVÔøΩEÔøΩÔøΩ\u0016lD#ÔøΩÔøΩVÔøΩ\u0027ÔøΩÔøΩ\u0019oRÔøΩ2ÔøΩ_LÔøΩkÔøΩÔøΩÔøΩÔøΩÔøΩ/\u0027ÔøΩÔøΩ\u0026ÔøΩ\u0003[!2\u003ccÔøΩ\b\u0026uÔøΩ@ÔøΩ√∑∆ØÔøΩGÔøΩ*≈ú\u0002ÔøΩ6ÔøΩÔøΩ9\u0006?rÔøΩvvÔøΩÔøΩ2ÔøΩ\u0007ÔøΩH\nÔøΩ%qiIÔøΩvÔøΩ;ÔøΩÔøΩnÔøΩgR…∑ÔøΩ\u0006ÔøΩ\u001ebÔøΩ#)ÔøΩƒ¥tx\u0005ÔøΩÔøΩE\u0001ÔøΩ\u000fÔøΩÔøΩÔøΩÔøΩÔøΩ⁄íÔøΩ@\u0004}ÔøΩz\u0019ÔøΩ\u0011ÔøΩ\u0007\u000bPÔøΩg\u0010ÔøΩ\u0026ÔøΩÔøΩÔøΩ(f?pÔøΩY{ÔøΩÔøΩÔøΩ\u0016ÔøΩdÔøΩ|~\u0015\u0000ds\u003c\u0017ÔøΩÔøΩxÔøΩvqÔøΩ+ÔøΩ\u0003ÔøΩ\u000f^\u003d\u0007ÔøΩ\u001fwÔøΩq[rÔøΩÔøΩÔøΩ{^ÔøΩÔøΩ\u0016ÔøΩnÔøΩGÔøΩÔøΩ’≠6ÔøΩ\u0001ÔøΩ\u003dÔøΩÔøΩÔøΩu\u003d\"—ô\u001ezÔøΩ\u001fÔøΩn’°ÔøΩÔøΩÔøΩÔøΩyRÔøΩp\u0006ÔøΩÔøΩ.ÔøΩ:ÔøΩ;oCFÔøΩiÔøΩ\u003cÔøΩ\u001cnÔøΩ‘¶|fÔøΩOa\u000bFÔøΩ”±a\"vÔøΩÔøΩÔøΩc4ÔøΩÔøΩÔøΩ6ÔøΩÔøΩ—ÅÔøΩ)ÔøΩ6eÔøΩÔøΩÔøΩ(ÔøΩ\u0013(ÔøΩ\u000ek4fÔøΩ\u0017ÔøΩ\u001bÔøΩÔøΩ\u0016ÔøΩ\\\u001aÔøΩo\u003eR\u001cÔøΩÔøΩÔøΩTÔøΩ$\u0018^h.ÔøΩÔøΩÔøΩ\u000e\u0011ÔøΩ\u0014yÔøΩ~ÔøΩÔøΩUÔøΩÔøΩ\u0004ÔøΩ\u0011MÔøΩÔøΩT_\"\u0018ÔøΩ-ÔøΩe\u000fÔøΩÔøΩ\u0014ÔøΩÔøΩ6ÔøΩÔøΩÔøΩÔøΩ#ÔøΩÔøΩ√≥ÔøΩÔøΩÔøΩ!ÔøΩÔøΩ.ÔøΩÔøΩnÔøΩ\u001dÔøΩFÔøΩÔøΩ\u001e[ÔøΩÔøΩÔøΩwÔøΩÔøΩ\u0010x|ÔøΩ#”´ÔøΩIÔøΩÔøΩÔøΩ_\u0013[IzÔøΩQÔøΩÔøΩnÔøΩÔøΩuÔøΩ5:lÔøΩÊªå+gÔøΩ\u000fÔøΩrÔøΩÔøΩN|ÔøΩ?FÔøΩ`\u001aÔøΩfQÔøΩÔøΩszÔøΩÔøΩ\u001a*#e7ÔøΩÔøΩÔøΩ\u0014MÔøΩ2UÔøΩÔøΩÔøΩ*ÔøΩ`\\YaÔøΩYÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩX\u0004wQÔøΩÔøΩ`QÔøΩÔøΩ3ÔøΩ.ÔøΩ~ÔøΩ\u000fÔøΩÔøΩVÔøΩZ\u0006ÔøΩÔøΩ%]t\u0006ÔøΩÔøΩÔøΩ\u0011LÔøΩÔøΩqÔøΩÔøΩ4\u001fÔøΩÔøΩ\u0015}ÔøΩ\u00027ÔøΩÔøΩÔøΩÔøΩhÔøΩ\u0027\n0/ÔøΩ\u001f-ÔøΩÔøΩÔøΩŒßK\n[?RÔøΩz-ÔøΩÔøΩ’≤ÔøΩgLÔøΩ\u003cÔøΩcÔøΩ:bÔøΩRÔøΩ÷óÔøΩfÔøΩOÔøΩ\u0014EÔøΩ\u001c\u000fÔøΩxc4#\u000b\u0011[ÔøΩÔøΩuÔøΩ\u0015\u001fÔøΩÔøΩÔøΩÔøΩ\u0016\u003e$ÔøΩÔøΩ€çÔøΩÔøΩÔøΩb9FÔøΩÔøΩÔøΩFÔøΩq)ÔøΩÔøΩÔøΩ5\u000b€øgÔøΩqÔøΩ:IH\u000ek\u001fÔøΩÔøΩVÔøΩqÔøΩ(JÔøΩ%ÔøΩoÔøΩÔøΩÔøΩ\u0019}√ø-ÔøΩ\u0012ÔøΩ\u0014XMz\u0005\u001d\u001c,ÔøΩeÔøΩoÔøΩÔøΩDm\u000fÔøΩÔøΩ`ÔøΩ$sIFÔøΩ_\bÔøΩ-ÔøΩrÔøΩFÔøΩ9ÔøΩÔøΩÔøΩt\u0016VwÔøΩÔøΩH|\fÔøΩÔøΩ\u0017-y\u0019/ÔøΩGÔøΩYÔøΩÔøΩ\\ÔøΩÔøΩÔøΩ\f)\u001ccÔøΩ*MÔøΩ;\u0015;ÔøΩÔøΩ\bwÔøΩÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ!ÔøΩÔøΩÔøΩ\\\u0000\u0027M#_ÔøΩ\u0026$ÔøΩAÔøΩÔøΩÔøΩKÔøΩÔøΩEÔøΩEÔøΩO\u0007\u000fÔøΩfÔøΩ\u0015\u0006vÔøΩ·Ö£ÔøΩmJGMÔøΩÔøΩ\u0011*ÔøΩqy\u0016ÔøΩ\u0016À©\u0014ÔøΩÔøΩÔøΩpÔøΩÔøΩR\n\u0002\u0017\u0026wÔøΩ@^ÔøΩ\t\u0026ÔøΩ\u0006ÔøΩj2WÔøΩ#ÔøΩÔøΩÔøΩÔøΩ\u0010ÔøΩÔøΩxX\u001d]xÔøΩÔøΩhS\u0011ÔøΩ[ÔøΩa -\u001b\u0010H\u0005ÔøΩÔøΩÔøΩÔøΩÔøΩaÔøΩ9\"Q1ÔøΩ;ÔøΩ∆òÔøΩ~ÔøΩÔøΩÔøΩBÔøΩÔøΩ0ÔøΩUgÃ£ zGÔøΩÔøΩ+ÔøΩÔøΩÔøΩÔøΩf!ÔøΩÔøΩ\u000fÔøΩ\u003c}h@ÔøΩY|ÔøΩÔøΩÔøΩ\u003c\u0000ÔøΩÔøΩÔøΩ’áÔøΩ\u0026\u001c\\ÔøΩÔøΩ\r]ÔøΩ ™ÔøΩŸî∆µ]T\u0016\u0005ÔøΩ!ÔøΩÔøΩÔøΩÔøΩkÔøΩyD1\u001eÔøΩtcÔøΩÔøΩÔøΩÔøΩÔøΩI+_ÔøΩ\u003cÔøΩ?ÔøΩ]ÔøΩﬂ™ÔøΩ\u0004gÔøΩÔøΩÔøΩw\tÔøΩnÔøΩÔøΩÔøΩ]ÔøΩc?\t~\u000fÔøΩÔøΩW\\œ∫KÔøΩÔøΩÔøΩ|\u0005BÔøΩ[`ÔøΩÔøΩÔøΩÔøΩÔøΩG\u003c?ÔøΩ[2ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ[ÔøΩÔøΩpÔøΩ\u001e\u001cÔøΩÔøΩ?/ÔøΩ?ÔøΩÔøΩÔøΩÔøΩÔøΩ\u000bÔøΩÔøΩÔøΩÔøΩÔøΩ\u0013BÔøΩÔøΩ1\u001aÔøΩ(ÔøΩ.ÔøΩ\rÔøΩÔøΩtÔøΩ3ÔøΩÔøΩVÔøΩgÔøΩPÔøΩÔøΩÔøΩQS“êÔøΩÔøΩh6ÔøΩ,)RÔøΩKÔøΩÔøΩœì%ÔøΩhÔøΩ\u000eÔøΩ4ÔøΩXi\u0027@ÔøΩÔøΩÔøΩ5l`6ÔøΩÔøΩ\u0007ÔøΩSﬂÜÔøΩ{+ÔøΩÔøΩ\u0018\\U;ÔøΩ5qÔøΩÔøΩBlPÔøΩl\u0000 ^UÔøΩoÔøΩÔøΩÔøΩÔøΩ\u001cÔøΩ4ÔøΩÔøΩ~ÔøΩPG~ÔøΩÔøΩ+DÔøΩÔøΩuÔøΩÔøΩÔøΩÔøΩÔøΩ\u0006ÔøΩÔøΩÔøΩÔøΩÔøΩBÔøΩ,ÔøΩ*eÔøΩMWÔøΩAÔøΩ\u0012‰ßªg;ÔøΩÔøΩÔøΩÔøΩ/]ÔøΩ≈¢ÔøΩÔøΩVVD~w\u001a\fÔøΩ\u0003iÔøΩ\u001a\u001c+ÔøΩKÔøΩÔøΩ\neX$ÔøΩÔøΩ(\u000e\u0014/ÔøΩÔøΩ?ÔøΩbuÔøΩ6\u0007ÔøΩMVwEÔøΩÔøΩ.YÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ^0FÔøΩÔøΩ~x}ÔøΩaÔøΩÔøΩ3H√áÔøΩXvÕâ|\u001aËæåÔøΩre3ÔøΩh\u0010ÔøΩ\"ÔøΩ]gÔøΩÔøΩjÔøΩ~`ÔøΩRÔøΩÔøΩÔøΩ\"ÔøΩÔøΩÔøΩUq\f[@Y,\u001e\bÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ~v\b›áÔøΩ\u000bÔøΩÔøΩÕº?\rÔøΩ~ÔøΩﬁ´5ÔøΩÔøΩvÔøΩÔøΩÔøΩWi*\bK\u0018ÔøΩÔøΩÔøΩÔøΩ ÔøΩÔøΩWÔøΩgÔøΩdÔøΩ\u0003ÔøΩAV}dÔøΩÔøΩDÔøΩ!\u0007ÔøΩC]qÔøΩÔøΩ2ÔøΩ\u0026\u001cp:NYÔøΩbÔøΩU:ÔøΩ(ÔøΩÔøΩVÔøΩÔøΩ Q\u0007ÔøΩylfÔøΩ…°ÔøΩƒ†ÔøΩ\u0014\u00131ÔøΩÔøΩpÔøΩÔøΩ!1¬ßEÔøΩ\fs\n/ÔøΩqÔøΩÔøΩ^\fÔøΩÔøΩÔøΩ√áÔøΩ]ÔøΩÔøΩ*l\u001c4ÔøΩÔøΩÔøΩ«®ÔøΩ|ÔøΩÔøΩ\u0014zÔøΩI/ÔøΩ\u001ek\u00001ÔøΩ?ÔøΩÔøΩ\u001e\u001cÔøΩBmÔøΩA\u001bÔøΩÔøΩ#ÔøΩ.‹±ÔøΩÔøΩ\u0006ÔøΩ0^ÔøΩÔøΩÔøΩ*L\u0000ÔøΩÔøΩÔøΩ\u001aB\u0018.myÔøΩÔøΩÔøΩÔøΩJuJAÔøΩÔøΩcjÍ£≤ÈÑ™ÔøΩÔøΩSÔøΩBS\u001cqH\nÔøΩ”†WD\nÔøΩÔøΩÔøΩ\u003cÔøΩfÔøΩ\u003cO\u001e1TÔøΩxÔøΩ\u0002ÔøΩÔøΩÔøΩ(DÔøΩÔøΩÔøΩ\nÔøΩ\u001cÔøΩÔøΩ~\u0027SQgÔøΩ*\u001c]ÔøΩÔøΩ\u0016OÔøΩ\u0001ÔøΩÔøΩ\u0002ÔøΩ\u0000ÔøΩ\f\u000fÔøΩ}ÔøΩ\u0005bÔøΩvÔøΩ`ÔøΩÔøΩ\u003eÔøΩHÔøΩÔøΩÔøΩÔøΩ\u0003ÔøΩÔøΩÔøΩnÔøΩAÔøΩ$ÔøΩ\u001e1]\rÔøΩ:\u003cÔøΩ\u001dÔøΩÔøΩƒΩÔøΩ:ÔøΩÔøΩÔøΩ\u0010v\u0001ÔøΩÔøΩ\rÔøΩIZ$\u0006ÔøΩZÔøΩÔøΩ«îÔøΩpÔøΩ1WeÔøΩÔøΩVŒ¨ÔøΩoÔøΩ\u0007)ÔøΩ2ÔøΩJÔøΩ/dsÔøΩ\u0003ÔøΩ\u0005#ÔøΩÔøΩÔøΩiFVÔøΩR\u0013ÔøΩt-ÔøΩÔøΩauvmÔøΩXÔøΩ\u000fu2VO\u001bvÔøΩ%ÔøΩ.6@ÔøΩqV%ÔøΩ\bWBÔøΩz-ÔøΩÔøΩÔøΩÔøΩjÔøΩÔøΩÔøΩÔøΩÓì¢, ÔøΩÔøΩÔøΩÔøΩjÔøΩqÔøΩhÔøΩ÷£ÔøΩÔøΩ\u0001nÔøΩÔøΩÔøΩOÔøΩ*„òóÔøΩÔøΩqÔøΩÔøΩÔøΩÔøΩAh\u003dqÔøΩnÔøΩ[\u0007q@ÔøΩÔøΩR\u001e(ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ#Emq,ÔøΩqÔøΩy\u000fV\u000bl\rÔøΩ~ÔøΩ~ÔøΩ\u001d\u0001ÔøΩj\u0012lÔøΩÔøΩÔøΩotÔøΩÔøΩÔøΩÔøΩvÔøΩÔøΩÔøΩ›∞*ÔøΩ\u0000ÔøΩÔøΩS9ÔøΩ gFÔøΩÔøΩ\u003cÔøΩÔøΩ\u0003+ÔøΩÔøΩ\fÔøΩÔøΩd(ÔøΩ)ÔøΩ\u0014ÔøΩÔøΩ$ÔøΩ2ÔøΩ\t@ÔøΩ\u0004DTJ\\\fMÔøΩÔøΩƒÉÔøΩ8ÔøΩÔøΩbUrJ\u003c\u0000\u0006ÔøΩ\r\u0007ÔøΩ\u0000Õ∑\u0000*+\u001eÔøΩZ^ÔøΩ!\u0001\u001dÔøΩsÔøΩÔøΩÔøΩ\u0007ÔøΩÔøΩu?lÔøΩÔøΩ5ÔøΩÔøΩ!ÔøΩp»µ\u003eÔøΩÔøΩ_\u001bÔøΩÔøΩU\u0017OÔøΩ\u0018z5ÔøΩ?ÔøΩVWÔøΩÔøΩ\u00067\u001eÔøΩ!jÂï≥ÔøΩWÔøΩÔøΩxÔøΩÔøΩ`ÔøΩÔøΩ\u001e≈ÑÔøΩÔøΩ.pO\u0017ÔøΩÔøΩH\u000fÔøΩÔøΩ\bŸ∂ÔøΩÔøΩÔøΩÔøΩ\u0017\u001f*\u001dÔøΩ\rÔøΩÔøΩ?%ÔøΩœÖ;\u003c}ZÔøΩ\u0015ÔøΩÔøΩÔøΩ6ÔøΩu\u0004|ÔøΩÔøΩÔøΩwÔøΩÔøΩÔøΩ\u001dÔøΩÔøΩPW\u0016\u0018KÔøΩÔøΩ\u0013]ÔøΩÔøΩ\u0011E0~ÔøΩ\u0018UÔøΩ⁄ù$QÔøΩ7ÔøΩ\u003dÔøΩEÔøΩÔøΩp3X\u001cÔøΩ\f\u0016ÔøΩÔøΩ\u0010s[ÔøΩÔøΩ*Qt\u003e\u001c\u0006)^[3ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩCÔøΩ{Uw\u001fÔøΩÔøΩ/\u0003ÔøΩ\u0010ÔøΩÔøΩÔøΩ^ÔøΩ\u0014(ÔøΩDÔøΩÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩhÔøΩÔøΩ*fÔøΩÔøΩsÔøΩÔøΩ\u0010ÔøΩÔøΩÔøΩ\u003eÔøΩEÔøΩ%QÔøΩn\u0018cÔøΩaÔøΩ)ÔøΩ5ÔøΩÔøΩÔøΩÔøΩÔøΩ00\u0006ÔøΩ\u0004\u0005ÔøΩÔøΩ\u0000X\u0016ÔøΩF\u0003\u0013ÔøΩ\u0015ÔøΩ…ßeÔøΩGÔøΩ\u0027ÔøΩs\u0005\u00020uÔøΩ\u0000\u0012XÔøΩÔøΩjiÔøΩ‹•w5\u0010ÔøΩÔøΩ\u0011ÔøΩÔøΩÔøΩZ\u0000ÔøΩ)ÔøΩ\f\u001e\u0012@\tÔøΩH+K%ÔøΩpËÇÑÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u0027rÔøΩÔøΩÔøΩﬁ∫ÔøΩÔøΩ?cÔøΩœøÔøΩ~ÔøΩÔøΩ\u0019ÔøΩœÖÔøΩg\u0005ÔøΩ\bR\u003eu›µÔøΩÔøΩÔøΩ-ÔøΩ7ÔøΩœä\u003dwQÔøΩOÔøΩ+ÔøΩÔøΩOÔøΩwÔøΩÔøΩÔøΩkÔøΩœøÔøΩ\u000fÔøΩ6ROÔøΩ\u0011√ù\u003coÔøΩ\fÔøΩÔøΩÔøΩÔøΩÔøΩ{ÔøΩA\u0004ÔøΩKQcÔøΩÔøΩe\u0015\u0002\u003edÔøΩÔøΩÔøΩlÔøΩÔøΩÔøΩÔøΩH\u0019aMÔøΩ1“ÇyZÔøΩÔøΩ{ÔøΩ\u00273ÔøΩfÔøΩ@ÔøΩÔøΩÔøΩÔøΩÔøΩZÒÑ≠¨ÔøΩÔøΩÔøΩ\"ÔøΩÔøΩ\u0001\u000bJÔøΩx\u0006oAÔøΩZ^`Í™™ÔøΩÔøΩ“©\nÔøΩÔøΩÔøΩa7ÔøΩÔøΩ\u0011ÔøΩÔøΩq$ÔøΩw\n#ÔøΩÔøΩ8 Ø8ÔøΩÔøΩ õS\u0014ÔøΩS8”ï⁄ÅÔøΩ0ÔøΩ\rÔøΩnÔøΩtÔøΩÔøΩ|ÔøΩ\u0017MQÔøΩ\u0012ÔøΩÔøΩÔøΩÔøΩ\\ÔøΩÔøΩ\u0026YÔøΩaÔøΩ0ÔøΩm\nÔøΩ\u0014xÔøΩE\u00114ÔøΩCÔøΩ][ÔøΩÔøΩ\nOÔøΩ1tÔøΩÔøΩÔøΩÔøΩJÔøΩÔøΩÔøΩÔøΩ\u001dÔøΩ\u0012,V\u0005F2ÔøΩÔøΩzÔøΩ2ÔøΩÔøΩÔøΩZ\u001dÍâ≤≈Æ[ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u0019\u0016ÔøΩÔøΩÔøΩÔøΩY*\u0014\u000fÔøΩÔøΩUBÔøΩÔøΩcÔøΩ\"a\u001eÔøΩ\u0002ÔøΩÔøΩbSÔøΩÔøΩ\rÔøΩ2ÔøΩÔøΩÔøΩQ\"LU?\u0011Y.ÔøΩpÔøΩ\u001fÔøΩÔøΩÔøΩb_ÔøΩÔøΩÔøΩ\nC_ÔøΩ/ÔøΩÔøΩÔøΩÔøΩa\u001aÔøΩÔøΩÔøΩoÔøΩ\u0013ÔøΩ6FÔøΩÔøΩÔøΩWÔøΩÔøΩv\u001eÔøΩ(Á¶∏ µ-ÔøΩiÔøΩ|ÔøΩ÷¢ÔøΩ\u0016S4\nÔøΩC\u0017ÔøΩJÔøΩÔøΩÔøΩ\u0010+{\u0014ÔøΩÔøΩtÔøΩÔøΩ…åÔøΩ\u001eÔøΩ{h-N\u0012ÔøΩ\u003dÔøΩÔøΩ@ÔøΩ\u001aÔøΩÔøΩÔøΩÔøΩ\u000f–•ÔøΩ\u001c\u0013q\u0019ÔøΩ\u0012ÔøΩÕîEÔøΩÔøΩ\u0004v\u0013ÔøΩ1MnÔøΩ\u000f\u00065–∞\u0019ÔøΩÔøΩ\u0017GQ5\fÔøΩpÔøΩ?ÔøΩC\u0007‹ÄD5*kÔøΩÔøΩNÔøΩÔøΩ@ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ”ÑÔøΩBÔøΩPÔøΩÔøΩC\u0006\u0015ÔøΩ$\u001bÔøΩ3ÔøΩYÔøΩÔøΩÔøΩÔøΩÔøΩ1ÔøΩC\u001cÔøΩ\u0015rÔøΩÀìz;ÔøΩ’û7%ÔøΩ,\u001eRÔøΩiÔøΩÔøΩÔøΩ~\u0012-%ÔøΩ\u0014ÔøΩÔøΩp2ÔøΩ \u0011ÔøΩMJlf@ÔøΩ\u0027@iÔøΩÔøΩj\tﬂ°ÔøΩz\fx \nÔøΩ%Ly\u0010$ÔøΩÔøΩ\u0018ÔøΩ`\\0\t7ÔøΩ^ÔøΩÔøΩ\f\u0007ÔøΩ-?ÔøΩ3ÔøΩÔøΩaÔøΩÔøΩÔøΩ\u001d5\u000fQ«Ä$ÔøΩ_ÔøΩ\u0000ÔøΩ\f\u000fÔøΩ\\ÔøΩÔøΩ\u0004:ÔøΩ5ÔøΩ?u{hÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u001f\u001dDÔøΩ\u0017\u0014ÔøΩÔøΩÔøΩ\u0013(ÔøΩÔøΩ]kÔøΩÔøΩÔøΩAÔøΩ5ÔøΩÔøΩ\u001e+\u0002y9ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ\u0015ÔøΩmÔøΩÔøΩbÔøΩV\u0007ÔøΩÔøΩ\u0016nÔøΩ\u0011\u0007\u0000\u000b\rHÔøΩ(ÔøΩÔøΩÔøΩÔøΩyCÔøΩ’á\u0003ÔøΩ\rÔøΩ;ÔøΩÔøΩÔøΩXÔøΩÔøΩ%H\u001fÔøΩÔøΩP:HsÔøΩÔøΩÔøΩv?5ÔøΩE(ÔøΩZÔøΩÔøΩcÔøΩY4ÔøΩÔøΩCÔøΩÔøΩ_N\u001dÔøΩQr+ÔøΩÔøΩ-ÔøΩ+ÔøΩÔøΩsÔøΩÔøΩÔøΩÔøΩÔøΩ\u0007ÔøΩ\u00029GÔøΩ$ÔøΩÔøΩU\u0011ÔøΩVÔøΩÔøΩÔøΩÔøΩ?ÔøΩÔøΩÔøΩl:ÔøΩÔøΩ+ÔøΩ}ÔøΩQ4ÔøΩkÔøΩHÔøΩ\tÔøΩÔøΩ\tÔøΩÔøΩ\u0014W!1Lx]ÔøΩIÔøΩ$xÔøΩÔøΩkUN?\u0019ÔøΩÔøΩ\u0027.ÔøΩOÔøΩ\u003dÀí$ÔøΩS\nÔøΩiÔøΩ’π\u0007ÔøΩb\u0005ÔøΩÔøΩ!`UZÏ¥õÁ≤õÔøΩxsRÏ¥£œ≤[ÔøΩQÔøΩÔøΩÔøΩÔøΩ$ÔøΩÔøΩÔøΩ\bdÔøΩÔøΩOfq1ÔøΩÔøΩsÔøΩ\u0001ÔøΩ3\u0003ÔøΩÔøΩ%ÔøΩÔøΩÔøΩÔøΩ\u00144$,QÔøΩ;ÔøΩ«∏IÔøΩ$~ÔøΩÔøΩFÔøΩÔøΩC≈õ\rÔøΩ\u001a–î\u0006ÔøΩV\u0005ÔøΩhÔøΩ\u003ewÔøΩ\u001a\u0013ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩnÔøΩÔøΩÔøΩGÔøΩÔøΩ\u0014WÔøΩÔøΩÔøΩ1ÔøΩrÔøΩÔøΩÔøΩ@ÔøΩ\u0007ÔøΩÔøΩÔøΩHÔøΩÔøΩ}L\u003e\u000fÔøΩÔøΩÔøΩÔøΩ6\u0002cÔøΩ»Æ“ëÔøΩ\u000fYdÔøΩ\u001c+6ÔøΩÔøΩÔøΩ:ÔøΩ,ÔøΩÔøΩÔøΩ\u003eNŸûaÔøΩi\u0007ÔøΩsÔøΩÔøΩ\u003cÔøΩk\u000bFÔøΩwp\u001bÔøΩW\u000e8TÔøΩÔøΩMÔøΩÔøΩLÔøΩÔøΩÔøΩNÔøΩÔøΩÔøΩNlÔøΩ\u0016ÔøΩ+ÔøΩÔøΩÔøΩ6hV\u001bÔøΩÔøΩÔøΩ\u0013bÔøΩ\u0003ÔøΩ~\u0013XÔøΩSÔøΩ:ÔøΩ9ÔøΩ[ÿòH;ÔøΩ‹ÖkÔøΩFÔøΩÔøΩÔøΩÔøΩS6ÔøΩ\u0012\u0003ÔøΩvÔøΩ\u0002;LÔøΩÔøΩ\u0015gÔøΩÔøΩÔøΩb\u0016@ÔøΩSÔøΩÔøΩ\"L\"ÔøΩÔøΩÔøΩhÔøΩÔøΩ\u0002ÔøΩÔøΩÔøΩÔøΩ^np4~ÔøΩÔøΩÔøΩÔøΩÔøΩ\u0011ÔøΩÔøΩiu0ÔøΩÔøΩ\u000eÔøΩÔøΩ]a€µÔøΩSÔøΩ\u0011.!ÔøΩÔøΩBÔøΩÔøΩÔøΩ\u0014ÔøΩNÔøΩÔøΩ ¶ÔøΩb\u003dÔøΩ7ÔøΩVtÔøΩZÔøΩ\u0017\u001dÔøΩÔøΩ\u0017.ÔøΩi% ÔøΩÔøΩ\u0010[7ÔøΩ22q\u0006ÔøΩZÔøΩtÔøΩ[o`√±\u003d–òR,ÔøΩ^)\u001bÔøΩcÔøΩ\u0015—ÄÔøΩÔøΩÔøΩ*uDƒØÔøΩy\u0027TÔøΩÔøΩ@ÔøΩy\u001eEÔøΩaÔøΩÔøΩq9ÔøΩÔøΩÔøΩrÔøΩÔøΩ\u0017ÔøΩLnE1JÔøΩÔøΩÔøΩ”ÇÔøΩ\u001arÔøΩtÔøΩ@wÔøΩb\u001aÔøΩ5ÔøΩÔøΩÔøΩ0zÔøΩnÔøΩÔøΩÔøΩ1ÔøΩÔøΩUNÔøΩÔøΩ\"\bÔøΩ!ÔøΩÔøΩÔøΩ\u0000ÔøΩZnSÔøΩ\u0000ÔøΩvÔøΩ‡¢øÔøΩÔøΩ\u0005ÔøΩÔøΩÔøΩÔøΩÔøΩL ëÔøΩÔøΩcm\u0007\tÔøΩÔøΩy\u000fÔøΩuÔøΩÔøΩÔøΩYd|ÔøΩ3ÔøΩ\u0002ÔøΩ|ÔøΩ(œûÔøΩÔøΩzÔøΩ≈©?*\u0019*\n3@]ÔøΩÔøΩ4FÔøΩT\u0004~8eÔøΩ\u0027ÔøΩaCÔøΩQÔøΩÔøΩÔøΩS—®ÔøΩÔøΩlÔøΩ\u0011vÔøΩ\"ÔøΩÔøΩ\u0006%ÔøΩÔøΩ\tGÔøΩ)ÔøΩÔøΩÔøΩ1\u00067)\u003cAÔøΩu ÖÔøΩ6ÔøΩDÔøΩÔøΩ#RÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩqÔøΩO\u001dÔøΩ\u0017~ÔøΩ\nÔøΩB9ÔøΩÔøΩÔøΩÔøΩÔøΩkÔøΩÔøΩÔøΩyÔøΩÔøΩ2ÔøΩÔøΩMIÔøΩÔøΩÔøΩ›êÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u0003ÔøΩÔøΩ~\tsÔøΩÔøΩ”ÖÔøΩÔøΩ\u0016ÔøΩ0ÔøΩ]ÔøΩAS\u000bÔøΩ{ÔøΩ\u0019ÔøΩa\bÔøΩÔøΩ\bÔøΩmCznÔøΩÔøΩPoÔøΩeÔøΩÔøΩ~\u003dbÔøΩ#\u000eÔøΩeMÔøΩRÔøΩÔøΩE|ÔøΩÔøΩÔøΩÔøΩ$xÔøΩ\u0027\u001dÔøΩNPJÔøΩ\u0019ÔøΩ)ÔøΩ\u001fÔøΩ\u0011\u0004p\u00195ÔøΩ\u001f\u0004ÔøΩÔøΩ*ÔøΩ+j ’Ñ\u0012vCÔøΩTÔøΩP~ÔøΩ\u000eÔøΩÔøΩ|\u0007ÔøΩlÔøΩÔøΩ\u0015*ÔøΩ\u00020\u001fÔøΩÔøΩ;ÔøΩ{J{ÔøΩ7ÔøΩuzÔøΩ}ÔøΩÔøΩKÔøΩÔøΩÔøΩÔøΩÔøΩ~~a~ÔøΩ\u003c?NT@\u0006\u003eÔøΩÔøΩ^ÔøΩMSZPÔøΩ/ÔøΩÔøΩPÔøΩ5ÔøΩUÔøΩ,ÔøΩ9ÔøΩzu\u0000ÔøΩ\u0001ÔøΩÔøΩÔøΩ\u0013ÔøΩÔøΩ\u001f\u000eÔøΩÔøΩ\bÔøΩ@cÔøΩ\u0011n\u003c\nÔøΩÔøΩÔøΩN#NÔøΩÔøΩÔøΩ\u000fÔøΩÔøΩ\u0002q\u001aÔøΩÔøΩÔøΩpÔøΩl\t\u0017gX\u0001ÔøΩlÔøΩP\u0005\u001bÔøΩk\u003cÔøΩ5\u0014NqÔøΩ,YÔøΩ\u0018\u0026\u0014NÔøΩk\u0019ÔøΩÔøΩ\u0013aGÔøΩÔøΩÔøΩmÔøΩÔøΩDÔøΩ\u001aÔøΩ\u0003O,v@sÔøΩYÔøΩUÔøΩÔøΩ\u0007ÔøΩ|-@ÔøΩWÔøΩÔøΩH◊ò-ÔøΩÔøΩeg\\ÔøΩ!\u0018;ÔøΩÔøΩÔøΩ\u000boÔøΩ\u0027ÔøΩj1*Ô≤ëXÔøΩÔøΩÔøΩÔøΩb\u0004\u0012ÔøΩ1\u0004ÔøΩ1ÔøΩ+xÔøΩÔøΩÔøΩQÔøΩJJe∆¢W\u0003ÔøΩ3D\u00007ÔøΩDqÔøΩj3\u0017ÔøΩÔøΩÔøΩÒ±õõÔøΩ*ÔøΩÔøΩj8\u0016ÔøΩÔøΩ_ÔøΩry\u001fÔøΩ+ÔøΩadÔøΩxÔøΩKUÔøΩoNÔøΩÔøΩ(ÔøΩ\u001fÔøΩoÔøΩMh]sl\u0012ÔøΩT√µÔøΩU\u001dÔøΩ\u001bq«ëD„üÄ/Qc\u0000ÔøΩÔøΩÔøΩh\u0004uÔøΩFÔøΩ%ÔøΩÔøΩÔøΩb_5ÔøΩÔøΩÔøΩc\u003cÔøΩÔøΩ8ÔøΩÔøΩA\u0011ÔøΩÔøΩzEÔøΩÔøΩÔøΩ\u0001wJQÔøΩFÔøΩnKÔøΩÔøΩÔøΩÔøΩ$ÔøΩ\u0018kÔøΩLÔøΩiYÔøΩa,ÃöÔøΩBÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÃçÔøΩX7ÔøΩÔøΩaÔøΩ\\,GÔøΩBÔøΩÔøΩhlÔøΩÔøΩnÔøΩÔøΩÔøΩ{\u0015:ÔøΩÔøΩ\u001b3ÔøΩCÔøΩÔøΩÔøΩYÔøΩ(6ÔøΩ/Zr\u0018ÔøΩÔøΩ\u0004ÔøΩÔøΩ\u0018\"ÔøΩb\u0010ÔøΩ5ÔøΩb\u0018ÔøΩ\u0007…Ü[ÔøΩaÔøΩ\u0026€ÉÔøΩÔøΩ\u0015n\u0026ÔøΩÔøΩsÔøΩ\u000b÷æÔøΩYÔøΩ,\u003c$ÔøΩksÔøΩ\u001eÔøΩÔøΩ~$‘ªÔøΩjÔøΩNÔøΩ⁄í\u003e\u0004-ÔøΩk3[ﬂüÔøΩaÔøΩÔøΩÔøΩo\u000fAMÔøΩkÔøΩÔøΩÔøΩÔøΩ\u0019\u003edÔøΩÔøΩ9FÔøΩ/?ÔøΩauÔøΩMÔøΩÔøΩÔøΩ!dÔøΩ;ÔøΩÔøΩ#\u001d.ÔøΩÔøΩ\u0013\u003etÔøΩKNÔøΩÔøΩ\u0012ÔøΩWÔøΩÔøΩÔøΩ\u0019ÔøΩ◊±ÔøΩbÎûüÔøΩ\u003dWÔøΩÔøΩ\u0000}\rÔøΩÔøΩÔøΩ∆äÔøΩÔøΩ\u0000\u0007ÔøΩÔøΩ2_[ÔøΩÔøΩÔøΩ]ÔøΩÔøΩ\nÔøΩo\u0015UAÔøΩ:%CÔøΩÔøΩ\nÔøΩ O\u0007\"OÔøΩ\u0013\u000eF)F,ÔøΩ\u0002^ÔøΩÔøΩÔøΩ1ÔøΩÔøΩgÔøΩÔøΩÔøΩÔøΩzÔøΩ\u003d?RTvÔøΩKÔøΩLÔøΩuÔøΩ\u0026ÔøΩQÔøΩ(#ÔøΩa@ÔøΩÔøΩ_ÔøΩ(ÔøΩ3\tÔøΩ~T#ÔøΩÔøΩ|ÔøΩzÔøΩÔøΩv\u0015zNwÔøΩY/¬µ\u0001ÔøΩÔøΩ%ÿò!ÔøΩi\u0007≈≤dÔøΩÔøΩY\u00138ÔøΩÔøΩÔøΩd\u0013\u000bÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩP:ÔøΩÔøΩ*ÔøΩCÔøΩ\u0014ÔøΩ\u0015\u003d*94\u0027ÔøΩÔøΩVÌáº7i\rÔøΩÔøΩmÔøΩ~ÔøΩÔøΩÔøΩnŒ°F\fÔøΩhÔøΩÔøΩU\u00073ÔøΩ\u001bSÔøΩÔøΩUÔøΩÔøΩ8ÔøΩD\u0014NÔøΩpt\u0018s”•N\u000f ÔøΩÔøΩÔøΩBÔøΩ0ÔøΩÔøΩSÔøΩÔøΩ\nÔøΩ\u0010ÔøΩÔøΩ\u003c.ÔøΩÔøΩS\u0026XÔøΩÔøΩXfN\u0014yÔøΩÔøΩ\u0001ÔøΩW{Ïô†ÔøΩUÔøΩ\u000eÔøΩÔøΩ\u0010\u000f+FÔøΩÔøΩrÔøΩÔøΩÔøΩÔøΩÔøΩvÔøΩUÔøΩÔøΩfÔøΩ≈µÔøΩW~ÔøΩÔøΩv\u0001ÔøΩÔøΩeÔøΩ\u001eÔøΩÔøΩtÔøΩe\u0006s^;ÔøΩ~ÔøΩ\u0027\u001duvÔøΩ?\u0002ÔøΩzÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ+#T«¨ÔøΩÔøΩÔøΩtU6\u0027r—±ÔøΩ\u001cWÔøΩl4z\u0018ÔøΩÔøΩÔøΩ\u0010ÔøΩgÔøΩSXÔøΩÔøΩÔøΩ6$ÔøΩ\u001aÔøΩc\u001c\u0012\u003c.ÔøΩ\t~ZÔøΩÔøΩ\u0007vÔøΩcÔøΩtÔøΩ8ÔøΩÔøΩ6ÔøΩk4)OÔøΩKÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ/ÔøΩÔøΩÔøΩ0_ÔøΩﬁÆÔøΩ»òÔøΩR·äçÔøΩ`SU\u0001Îò§![ÔøΩd{ÔøΩQ\u00192\u001cÔøΩÔøΩﬂ∑ÔøΩÔøΩÔøΩÔøΩG[ÔøΩzqÔøΩÔøΩÔøΩ\u0016/ÔøΩÔøΩÔøΩbaÔøΩÔøΩÔøΩÔøΩÔøΩUÔøΩ2ÔøΩÔøΩÔøΩ|ÔøΩ,\u0017#ÔøΩm_ÔøΩ-ÔøΩgÏ∂æ\u001fÔøΩÔøΩÔøΩÔøΩYÔøΩÔøΩdÔøΩ\u0003rÔøΩ\t-ÔøΩ\u0010]ÔøΩÔøΩÔøΩQ^ÔøΩNpÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩAkÔøΩ3\rÔøΩÔøΩÔøΩV4ÔøΩ\u0016WÔøΩÕ†ÔøΩ1ÔøΩ\u001a,ÔøΩ\u0001ÔøΩÔøΩ9`x.ÔøΩÔøΩ]◊ÜÔøΩÔøΩ\u0007]UÔøΩ\u0007Y?ÔøΩÔøΩÔøΩNÔøΩtÔøΩÔøΩP‘ÄÔøΩÔøΩÔøΩ\u0012f\u0015\u000bÔøΩYÔøΩ)ÔøΩÔøΩÔøΩ;ÔøΩÔøΩÔøΩxÔøΩÔøΩ.ÔøΩ\u0012+\u0026ÔøΩ]+ÔøΩ|UÔøΩ\u0006ÔøΩÔøΩ\u001bÔøΩÔøΩWÔøΩÔøΩ4„†ÄÔøΩtUÔøΩÔøΩÔøΩ7^:ÔøΩNÔøΩÔøΩÔøΩÔøΩ9ÔøΩÔøΩ5mÔøΩzq}ﬁêÔøΩÔøΩuÔøΩÔøΩÔøΩM/2⁄ªÔøΩQmsÔøΩÔøΩ\u0027ÔøΩÔøΩ`ÔøΩFÔøΩÔøΩyK\u001aFOÔøΩFÔøΩHÔøΩ\u0001JÔøΩÔøΩÔøΩ\u00038ÔøΩ\u0010\u0017*\n2ÔøΩÔøΩknÔøΩÔøΩ‹àÔøΩ2\u0003)ÔøΩdFÔøΩ ÔøΩÔøΩÔøΩHÔøΩ7ÔøΩ\u0017\u001e⁄ïÔøΩ[KÔøΩ\u0027a…âÔøΩpÔøΩÔøΩÔøΩÔøΩ\b\u001dÔøΩG\u0002À∂ÔøΩ\u0010ÔøΩXÔøΩxÔøΩTGe\u0018\u003dÔøΩs1ÔøΩ8ÔøΩ\u0005ÔøΩÔøΩ\"ÔøΩ\u0026ÔøΩ\u0011ÔøΩTÔøΩ\u000e#:‹úH\u0015PÔøΩÔøΩÔøΩ:ÔøΩc\u0019ÔøΩ\rL99ÔøΩÔøΩ\tuÔøΩX@\u001d#LiÔøΩ5ÔøΩNVÔøΩÔøΩ6ÔøΩÔøΩ~ÔøΩÔøΩr\u000bÔøΩÔøΩÔøΩ\u0013\u000f\u0017\u0015\u001dRÔøΩÔøΩ!XV-ÔøΩ4\u0026ÔøΩ8E0f\\ÔøΩ:ÔøΩ\r\u0006uÔøΩ\u0019ÔøΩÔøΩUb‰†üÔøΩÔøΩ!ÔøΩÔøΩÔøΩÔøΩM\u0015\u0010\u003d\u0026ÔøΩ\u0014\u0007\u0018ÔøΩRÔøΩ#ÔøΩÔøΩÔøΩÔøΩRTÔøΩ\u0026kÔøΩÔøΩbÔøΩÔøΩÔøΩÔøΩ\u003cÔøΩ(lÔøΩdHÔøΩ5aÔøΩÔøΩÔøΩL\tÔøΩÔøΩŸêÔøΩÔøΩÔøΩÔøΩÔøΩYIÔøΩÔøΩÔøΩ@z\tÔøΩÔøΩ\"ÔøΩÔøΩ+LW\u001d\u0003GÔøΩ[ÔøΩÔøΩP_,ÔøΩÔøΩ\tÔøΩ]jÔøΩ4ÔøΩ\u0026ÔøΩÔøΩ≈äÔøΩ*ÔøΩ\u0015ÔøΩxÔøΩÔøΩ\u0012\u0010yÔøΩtÔøΩÔøΩOÔøΩ\u0004)ÔøΩJÔøΩÔøΩÔøΩÌÖ´\u001bi.ÔøΩYÔøΩyJÔøΩ$‚ÜïÔøΩhÔøΩ\\%ÔøΩ\rÔøΩ\u001b\u0005ÔøΩ\u0017\u0016q÷ªÔøΩÔøΩÔøΩzP\u001b‘Öt_BÔøΩÔøΩrÔøΩÔøΩV\u0014ÔøΩ∆îÔøΩ?ÔøΩÔøΩ4ÔøΩÔøΩzÔøΩÔøΩ⁄ªÔøΩÔøΩÔøΩÔøΩ\u000eÔøΩo\u0006ZÔøΩ!ÔøΩ\tÔøΩÔøΩﬁæÔøΩvÔøΩÔøΩPÔøΩÔøΩ\u001eÔøΩM\u0017ÔøΩÔøΩllh!ÔøΩ)ÔøΩ/ÔøΩ\u0002~\\ÔøΩÔøΩÔøΩÔøΩd0ÔøΩ\u0026ÔøΩ\u0005ÔøΩG$ÔøΩ\u001f÷ØÔøΩ\t\u003dÔøΩK8ÔøΩÔøΩÔøΩ,ÔøΩ[ÔøΩÔøΩpeÔøΩÔøΩÔøΩdÔøΩÿ≥\u001e!DÔøΩÔøΩ^ÔøΩÔøΩÔøΩ\u0016ÔøΩ_ÔøΩÔøΩÔøΩÔøΩÔøΩ≈ÆÔøΩÔøΩbÔøΩ\\kÔøΩ}ÔøΩÔøΩ~\u003e}ÔøΩpÔøΩ(*ÔøΩ\nXV\u0007\u001e\u001a1ÔøΩ21ÔøΩaHÔøΩ\u0011j#ÔøΩÔøΩÔøΩ\u0015ÔøΩ\\ÔøΩÔøΩX\u001bÔøΩÔøΩL2ÔøΩÔøΩÔøΩÔøΩ‚åúÔøΩU\u001a?ÔøΩÔøΩ\u0016ÔøΩ\u0018ÔøΩÔøΩ\u00270ÔøΩÔøΩ\u0027$‘§`ÔøΩÔøΩaNt\u0007ÔøΩÔøΩ*frfÔøΩÔøΩÔøΩÔøΩÔøΩD1[ÔøΩ\u0015e\u0005ÔøΩaKÔøΩÔøΩÔøΩÔøΩ9VÔøΩÔøΩÔøΩ^ÔøΩÔøΩl\u001dÔøΩnÔøΩ\u0006xÔøΩ0\u0010yÔøΩ51\u0002ÔøΩÔøΩ^ÔøΩ\u0027M,\u0019u\u001dÔøΩÔøΩ1\f\u001ecÔøΩÔøΩ|@\u0017?X√Ä[\u000bÔøΩÔøΩer[VÔøΩ\u0003ÔøΩzÔøΩÔøΩ\u0006[0LÔøΩÔøΩÔøΩHÔøΩ*\tÔøΩb4\u000bPF}6ÔøΩ\u0010c\fÔøΩ\u0003\tÔøΩÔøΩ\u003dÔøΩÔøΩÔøΩ\u001bÔøΩCÔøΩÔøΩT2ÔøΩsXÔøΩÔøΩÔøΩÔøΩ\u000eÔøΩÔøΩmÔøΩÔøΩÔøΩBÔøΩÔøΩ6ÔøΩd`\u001c¬±ÔøΩÔøΩ{A\u001bÔøΩÔøΩ3ÔøΩÔøΩÔøΩÔøΩ\u0001LÔøΩŒüÔøΩ#ÔøΩ\u001aÔøΩÔøΩÀùhÔøΩ\\ÔøΩW\u0010SÔøΩÔøΩ@eI\u0011Mi\u0015ÔøΩÔøΩÔøΩÔøΩU\u000egÔøΩÔøΩÔøΩ-\u0012[;ÔøΩÔøΩ!CÔøΩ]3\\\u001f\u0001+ÔøΩvÔøΩ\u0004%ÔøΩ\u003cÔøΩÔøΩ\u000b*\u0027{0ÔøΩÔøΩÔøΩÔøΩ\u001b‹µÔøΩÔøΩÔøΩÔøΩ«†ÔøΩÔøΩP,ÔøΩÔøΩ`ÔøΩÔøΩxzÔøΩ^ÔøΩÔøΩÔøΩ\b\u0003\u003cÔøΩÔøΩ4ÔøΩ!\u001eNmsÔøΩYiÿ¥IÔøΩÔøΩ\u0011}ÔøΩÔøΩÔøΩ|\u0017,ÔøΩÔøΩq\u0015QÔøΩfÔøΩZ\u0017{Ÿä\u0006ÔøΩ,\u000eÔøΩcÔøΩÔøΩÔøΩ5ÔøΩÔøΩÔøΩDÔøΩzÔøΩu\u0018ÔøΩÔøΩgÔøΩ$ÔøΩÔøΩ\u0007ÔøΩÔøΩEÔøΩBÔøΩÔøΩÔøΩ4ÔøΩ@ÔøΩÔøΩq\u0010\u0004u6DÔøΩ\u0017n\u0003~\u0019\u001eIÔøΩ\rÔøΩc1K\u0000ÔøΩ\u0014]ÔøΩ\u0013ÔøΩÔøΩDCÔøΩÔøΩ~ÔøΩa\u001fÔøΩ8-qtÔøΩJÔøΩÔøΩXÔøΩJ\u001dÔøΩ:ÔøΩÔøΩg2Y%ÔøΩÔøΩA\u0001ÔøΩUNÔøΩ\u001aÔøΩÔøΩÔøΩVÔøΩÔøΩÔøΩKÔøΩÔøΩEÔøΩJÔøΩÔøΩP.NÔøΩÔøΩÔøΩÔøΩP\\ÔøΩÔøΩ1r1y\\ÔøΩÔøΩÔøΩ \u0019ÔøΩÔøΩO\u000foÔøΩÔøΩÔøΩ\u000f%ÔøΩt\u0010!ÔøΩ\u0002ÔøΩÔøΩb}ÔøΩ8\u000etIÔøΩTÔøΩÔøΩ`sÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ+\u0000\u001aÔøΩpÔøΩ\u0005zÔøΩ\fﬁâÔøΩÔøΩ∆êÔøΩÔøΩ,\u0011ÔøΩfÔøΩ\u0005ÔøΩÔøΩ\u0027ÔøΩ\nÔøΩÔøΩaÔøΩÔøΩÔøΩÔøΩ\u0000CÔøΩNÔøΩÔøΩÔøΩ\u0017RÔøΩJEÔøΩi\u001fÔøΩÔøΩÔøΩÔøΩÔøΩPÔøΩÔøΩmÔøΩPÔøΩÔøΩÔøΩ7ÔøΩÔøΩÔøΩ\u0017ÔøΩÔøΩ4rÔøΩÔøΩÔøΩ\u0006ÔøΩ3ÔøΩÔøΩ\f|*ÔøΩ.ÔøΩÔøΩ1zÔøΩ-ÔøΩÔøΩ“à\u0012\rÔøΩRÔøΩ\u0007`hÔøΩÔøΩ`ÔøΩÔøΩ\u001cÔøΩTf mÔøΩ\r\u0002ÔøΩÕçÔøΩÔøΩÔøΩÔøΩÔøΩ/ÔøΩrÔøΩ\u001eÔøΩ\u0014\u0006FÔøΩ2wÔøΩHÔøΩÔøΩÔøΩNÔøΩÔøΩjb`ÔøΩÔøΩ:o@\t)~ÔøΩJkwqÔøΩh3ÔøΩmÔøΩMÔøΩZfÔøΩ\u000b~/ÔøΩq\u001cÔøΩ—îÔøΩÔøΩÔøΩÔøΩÔøΩ\u001eÔøΩ\u0002ÔøΩl_*ÔøΩÔøΩÔøΩ\u0003\u0019DÔøΩ\fÔøΩyÔøΩJÔøΩ$ÔøΩkÔøΩÔøΩZÔøΩÔøΩ^ÔøΩ*ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ3ÔøΩÔøΩ\u0005dÔøΩm]ÔøΩÔøΩ^F;!ÔøΩÔøΩLÔøΩ\u0016ÔøΩÔøΩ\u003d\t\u0012ÔøΩ*\u0013ÔøΩ\u0016ÔøΩÔøΩ)ŸÇ2ﬂíÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u0010ÔøΩÔøΩÔøΩGl;\u0018ÔøΩÔøΩEUÔøΩ\u0002\u0027QÔøΩÔøΩÔøΩC_ÔøΩÔøΩ-ÔøΩ\u0011ÔøΩÔøΩ”∫7~ÀüÔøΩmÔøΩ_{ÔøΩSÔøΩ\tÔøΩ ÔøΩ5ÔøΩÔøΩÔøΩYÔøΩ\u0012pb\u003cÔøΩÔøΩXÔøΩÔøΩbÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ)\u003cÔøΩl\u0003LÔøΩF\u0001r*jNdtÔøΩ$.ÔøΩÔøΩ)ÔøΩeÔøΩÔøΩ\u001c#}ÔøΩTÔøΩ|ÔøΩ04CÔøΩÔøΩ\u000e`\u0015ÔøΩs,\u0012?}ÔøΩ$ÔøΩLÔøΩ0ÔøΩÔøΩÔøΩÔøΩÔøΩvÔøΩ\u0004ÔøΩYÔøΩ\u0003ÔøΩÔøΩ ÔøΩ(TÔøΩÔøΩÔøΩÔøΩ.ÔøΩÔøΩÔøΩÈ´¢ÔøΩC\u0004ÔøΩ\u0019gÔøΩRÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩN◊ïUAÔøΩYl]ÔøΩ*ÔøΩ\u0016+ÔøΩ\u0015\u0002ÔøΩ@\b4\u0003W\u0026€ÉÔøΩÔøΩnn\u0000ÔøΩAÔøΩqyÔøΩÔøΩÔøΩÔøΩ}sÔøΩ\u0001SÔøΩ?ÔøΩÔøΩL$wÔøΩ\u001aAÔøΩGÔøΩvÔøΩlÔøΩ!ÔøΩÔøΩa(\u00181\f?\rÔøΩ+ÔøΩÔøΩÔøΩ…úqPÔøΩ\t\buÎÄ¶\u0015ÔøΩNÔøΩÔøΩ#\u0007AÔøΩÔøΩ\u001cÔøΩ\u0014ÔøΩÔøΩ4DoÔøΩ@^ÔøΩ 7TdÔøΩ]ƒóÀ¨RÔøΩ\u0019\u0012\u001fg\u001d\nÔøΩ9ÔøΩÔøΩ\u0016)ÔøΩo;\u001aÔøΩÔøΩ(\bÔøΩ›∫ÔøΩÔøΩ\u001bÔøΩÔøΩÔøΩMWÔøΩ\u0004s\u0019N\u003eÔøΩÔøΩÔøΩnÔøΩÔøΩoÔøΩÔøΩ/ÔøΩÔøΩ\u0016(ÔøΩ\u003d5ÔøΩDÔøΩÔøΩÔøΩLœùÔøΩÔøΩ@NEÔøΩ!ÔøΩ\u003dÔøΩÔøΩÔøΩy\u001a%\u001e/@XUR|ÔøΩÔøΩœÉ\u0002ÔøΩ0kGUÔøΩ\u0006]ÔøΩ\u001e\nÔøΩvÔøΩUÔøΩ\u0003nÔøΩ\u0013\u0016ÔøΩm!\u001cÔøΩRÔøΩsÔøΩ\n00sÔøΩÔøΩ3ÔøΩqÔøΩÔøΩY5ÔøΩÔøΩ)ÔøΩIsÔøΩÔøΩÔøΩGÔøΩ\u003e’ùEÔøΩÔøΩÔøΩÔøΩ\u0027ÔøΩÔøΩÔøΩ\rp\u001aŒ≠[nxdÔøΩUÔøΩs\u00028ÔøΩ./ÔøΩ#U\u0001Ua9ÔøΩZqÔøΩÔøΩÔøΩÔøΩ*{ÔøΩÔøΩÔøΩGÔøΩ≈öÔøΩÔøΩ\u003c^Q\u003e)ÔøΩzÔøΩÔøΩ ÔøΩÔøΩÔøΩ\u0010ÔøΩÔøΩÔøΩ\u0007xÔøΩÔøΩÔøΩzÔøΩ\u0013sÔøΩ;ÔøΩÔøΩKÔøΩ\u0019MÔøΩÀùÔøΩ\u0010\u001c;2kÔøΩ\bÔøΩÔøΩ-.-\u001eÔøΩ1ÔøΩ3+ÔøΩÔøΩÔøΩÔøΩ\u0019ÔøΩÔøΩÔøΩGÔøΩÔøΩÔøΩÔøΩÔøΩNnÔøΩÔøΩÔøΩncÔøΩÔøΩqÔøΩl}VÔøΩÔøΩ\u0026ÔøΩÔøΩÔøΩÔøΩÔøΩ)ÔøΩ\"+ÔøΩÔøΩÔøΩÔøΩXÔøΩÔøΩ+UÔøΩÔøΩjw\u001d[ÔøΩTs\u00164:ÔøΩÔøΩÔøΩ\u0004\u001e\u0007tÔøΩfkÔøΩÔøΩOq÷ì.\u001d(–πÔøΩ!\u001eÔøΩÔøΩgVÔøΩ^ÔøΩÔøΩl`fÔøΩ÷ÉY[ÔøΩÔøΩ\f\u000bÔøΩÔøΩ€æSÔøΩR\u0007Sd\u001bÔøΩQZ0ÔøΩÔøΩ#\u0013\u0013ÔøΩ\u001dÔøΩ\u0019ÔøΩAn@ÔøΩÔøΩÔøΩÔøΩÔøΩ\u000eÔøΩ\u0027ÔøΩe\u000bÔøΩ\\ÔøΩÔøΩ\u001dÔøΩ1qÔøΩ\r\u001fÔøΩ|ÔøΩÔøΩMÔøΩÔøΩmÔøΩÔøΩÔøΩÔøΩ\u0001DÔøΩÔøΩ\u0001TÔøΩ\u0016ÔøΩ«íÔøΩzB\\HÔøΩEyŒèÔøΩÔøΩjÔøΩGÔøΩÔøΩÔøΩÔøΩRÔøΩqOÔøΩSÔøΩ\u000exÔøΩ\u0027ZÔøΩ!ÔøΩ—ûCÔøΩ5\u001cÔøΩÔøΩÔøΩTÔøΩ*ÔøΩ\tÔøΩV7ÔøΩ\u0013ÔøΩ5Àù0FjŒ≥[8ÔøΩrÔøΩQÔøΩ2…ñkÔøΩ\u0003ÔøΩÔøΩ6\u001d`_9:eÔøΩ\u0017V\u0017B\rj\"ÔøΩÔøΩ\u0019ÔøΩ_ÔøΩÔøΩ¬äuT%ÔøΩaQÔøΩÔøΩS âÔøΩ6\u001bÔøΩ\u0011ÔøΩMJ[)ÔøΩÔøΩ{%ÔøΩDÔøΩÔøΩWÔøΩb\" vÔøΩ,ÔøΩ\u0012ÔøΩ\u0026_5XZ6ÔøΩyÔøΩO≈É›®D(pÔøΩÔøΩ\u001dÔøΩÔøΩKÔøΩ\u0001ÔøΩ]jÔøΩ\u0010JvÔøΩÔøΩAÔøΩf}VÔøΩÔøΩ\u0003ÔøΩÔøΩAÔøΩÔøΩ.ÔøΩ*ÔøΩÃØ!yH\n\u0007ÔøΩdOÔøΩÔøΩ~5ÔøΩUÔøΩÔøΩÔøΩ{≈ãÔøΩÔøΩ\u001cÔøΩ\u003dÔøΩ”òÔøΩ\u0019i;\u003dzJ7ÔøΩ4ÔøΩÔøΩH\u001f\\ÔøΩ÷µÔøΩÔøΩÔøΩÔøΩÔøΩq\u0012@ÔøΩ\\,ÔøΩ\rr;ÔøΩÔøΩÔøΩX\u0006ÔøΩÔøΩ2ÔøΩÔøΩk8ÔøΩ\u001e({PSÔøΩ[ zÔøΩÔøΩ\u000fÔøΩÔøΩÔøΩÔøΩÔøΩ’ëMlÔøΩ⁄°ÔøΩÔøΩ\u0001`ÔøΩ\u0017k\u001b·ìΩT\u0002\u000bÔøΩaÔøΩ(ÒõµûÔøΩF\u001b\u0013”ä\u0018ÔøΩÔøΩ}ÔøΩ\u001aÔøΩ\u0018ÔøΩ\u001b{M\u001cÔøΩ\u001aa[ÔøΩÔøΩM\u001d\u0016\nMÔøΩÔøΩÔøΩa0ÔøΩ%ÔøΩ\fÔøΩÔøΩyY.ÔøΩÔøΩgÔøΩÔøΩÿáÔøΩ\r?\u001adÔøΩÔøΩgI\u003cÔøΩÔøΩ|ÔøΩLÔøΩ\u0017ÔøΩÔøΩ(ÔøΩQÔøΩ4\rAÔøΩ\nÔøΩ\u0012ÔøΩ\u0011\nDÔøΩI\u0005ÔøΩÔøΩ\u0006cÔøΩYÔøΩÔøΩb\rzÔøΩAOaVzÔøΩÔøΩ2\u0018ÔøΩ@3\u0026jÔøΩÔøΩkÔøΩÔøΩÔøΩÔøΩÔøΩ\u0016ÔøΩQÔøΩ,)ÔøΩÔøΩÔøΩ\u0000\rbÔøΩOÔøΩ\u00040ÔøΩÔøΩkÔøΩx?\"/ÔøΩÔøΩHÔøΩÔøΩnÔøΩÔøΩZ?4ÔøΩ5JÔøΩ\u0011ÔøΩr[ÔøΩIÔøΩÔøΩ\u0006ÔøΩ5«©0ÔøΩ\u0017!ÔøΩÔøΩQÔøΩ]WaÔøΩÔøΩRÓ∏à\u0019ÔøΩtÔøΩq\u001eMJ8\f)ÔøΩÔøΩ\u0004V\u0015ÔøΩ€äÔøΩmTÔøΩÔøΩÔøΩM*jUÔøΩÔøΩNtÔøΩ?\u001aÔøΩÔøΩ\u0012ÔøΩÔøΩtÔøΩ(ÔøΩÔøΩ\u0016kÔøΩÔøΩ\u001cÔøΩv«•FPÔøΩ\u0017\u0017ÔøΩ\u000b~ÔøΩÔøΩÔøΩE0ÔøΩÔøΩÔøΩÔøΩCÔøΩ*Y`\u0005[0gÔøΩ%z}»äÔøΩ/\u0017@ÔøΩ]ÔøΩÔøΩUÔøΩ⁄≥ÔøΩÔøΩ3ÔøΩÔøΩÔøΩ\u0007ÔøΩ\u0016N)–ùÔøΩÔøΩ,ÔøΩÔøΩuEÔøΩS\u000eÔøΩ3\nÔøΩÔøΩ\u003cj\u0007\rÔøΩ\u0014W\u0027ÔøΩÔøΩÔøΩÔøΩÔøΩ~ÔøΩ\u0005\u000fÔøΩÔøΩ^ÔøΩÔøΩ$(ÔøΩÔøΩAÔøΩ\u0003fj\\WÔøΩUk¬í:ÔøΩ\u00265|ÔøΩ\u000enhÔøΩ\u0003ÔøΩÔøΩ\u0006ÔøΩÔøΩÔøΩÔøΩjav“°4zÔøΩ7hm\u0006\u0001\u0007P«±ÔøΩÔøΩ\u0001ÔøΩH\u0014ÔøΩ\u0000∆ÜÔøΩ_ÔøΩÔøΩÔøΩ\u0015ÔøΩÔøΩ\u0011ÔøΩ÷≠ÔøΩÔøΩgg~+ÔøΩ\u001fc\nÔøΩÔøΩÔøΩT\u003e\tÔøΩd\u0002ÔøΩk\u0014NIÔøΩÔøΩ\u0002ÔøΩÔøΩIÔøΩ\u0014N9@[V\u0026ÔøΩÔøΩ\u0026»¶8`ÔøΩÔøΩÔøΩ1ZkÔøΩX\u0007ÔøΩ}ÔøΩÔøΩÔøΩs6s5ÔøΩ\fÔøΩÔøΩÔøΩÔøΩ)ÔøΩ\u003eÔøΩ ÔøΩLN/cZ6E;ÔøΩŸöÔøΩyPÔøΩR\u0019ÔøΩ6ÔøΩKzÔøΩ)ÔøΩ\u0005ÔøΩÔøΩÔøΩ8ÔøΩQÔøΩuÔøΩ\t\n;ÔøΩ;ÔøΩÔøΩÔøΩC\u003e\u0017nwÔøΩÔøΩÔøΩ\u003cÔøΩ\fÔøΩÔøΩ\u0002qÔøΩÔøΩS\u003e”ûÔøΩHÔøΩÔøΩÔøΩ\u0013ÎûëUÔøΩÔøΩÔøΩj\u0018LÔøΩÔøΩÔøΩz}o7ÔøΩk\u0003ÔøΩ\u001eÔøΩ(}bzÔøΩÔøΩ01ÔøΩÔøΩjI\u000e\u0001ÔøΩ\u001a\u0016ÔøΩ\u0002ÔøΩ\u0019eÔøΩ|ÔøΩ6dÔøΩlËõïÔøΩ;-\u001aÔøΩÔøΩ11kÔøΩi|ÔøΩÔøΩjHÔøΩ/#mÔøΩ\u00188ÔøΩ0ÔøΩ\u000fÔøΩÔøΩ{ﬁíU|ÔøΩS\u0018jÔøΩÔøΩ\u003cÔøΩÔøΩÔøΩÔøΩ\u0018ÔøΩ#ÔøΩÔøΩÔøΩÔøΩU\u0016ÔøΩ!2ÔøΩ\fÔøΩB:ÔøΩÔøΩG\u0003wÔøΩÔøΩÔøΩbVlÔøΩ\u000f@ÔøΩÔøΩPo\u001e8\u0007mKCÔøΩb\u003d\u0004\u003d/Z\u000eBÔøΩÔøΩ\u0013\u0006ÔøΩÔøΩÔøΩ!ÔøΩhÔøΩÔøΩ\"SjÔøΩNÔøΩÔøΩ@cxÔøΩfÔøΩ\u0010]ÔøΩQÔøΩÔøΩdOÔøΩM\n\n\u0017ÔøΩÔøΩÔøΩ8ÔøΩ?ÔøΩ6ÔøΩSÔøΩÔøΩÔøΩ”õÔøΩÔøΩ\u0026\b\u0017\u0000C1tfFÔøΩKÔøΩÔøΩÔøΩOÔøΩz\u001c\u0005EÔøΩÔøΩÔøΩÔøΩÔøΩ4x√õÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u001cÔøΩ\t\u0017ÔøΩ\nÔøΩJÔøΩ#ÔøΩ\u0006mÔøΩÔøΩ\u0000-ÔøΩ}ÔøΩTÔøΩÔøΩhÔøΩÔøΩPÔøΩ\u003d(EÔøΩ\tÔøΩÔøΩÔøΩ\u003dU–§ÔøΩÔøΩn tÔøΩ\u0001ÔøΩÔøΩ(ÔøΩ%ÔøΩb\u003c\rÔøΩÔøΩÔøΩÔøΩ\u003eÔøΩFw\u0003ÔøΩ|ÔøΩNÔøΩÔøΩ!:ÔøΩ:\u0016ÔøΩoÔøΩÔøΩÔøΩnÔøΩÔøΩÔøΩ\u001cÔøΩOÔøΩ\u0002ÔøΩÔøΩÔøΩ\u0016ÔøΩÔøΩZ\u0001ÔøΩjÔøΩÔøΩÔøΩÔøΩvCKRÔøΩ3\u003dÔøΩÔøΩgqRw1\u0007ÔøΩ2ÔøΩÔøΩ\u0026)\b}TY\u0011ÔøΩH6\u001bvj@ÔøΩrÔøΩmM\u0015ÔøΩÔøΩ\u003dÔøΩ;ÔøΩ_ÔøΩjÔøΩs.\u0016m\u0014ÔøΩÔøΩVLÔøΩcu0ÔøΩuÔøΩ\u0010?NÔøΩdÔøΩ\u000fÔøΩ!ÔøΩ*KÔøΩÔøΩ\u0004\u0006\u0005ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ~\u0011Ao8r[N0tÔøΩÔøΩ µÔøΩG\u0012)ÔøΩ\u0017|ÔøΩ\u0026ÔøΩ‘ø\u0005ZiÔøΩÔøΩÔøΩÔøΩÔøΩ$ÔøΩsÔøΩÔøΩÔøΩ\u001cÔøΩ1 òs4ÔøΩ\u00279.\u0010\u001aÔøΩÔøΩzÔøΩÔøΩ\u0015Y{ÔøΩÔøΩz\u0007ÔøΩ\u000eÔøΩP9ÔøΩÔøΩyE≈âÔøΩÔøΩÔøΩiƒ§ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩrÔøΩÔøΩ`ntÔøΩÔøΩ|ÔøΩÔøΩÔøΩ%ÔøΩxÔøΩfÓ°í\u0026ÔøΩxÔøΩ 0ÔøΩ]ÔøΩËûçhÔøΩiÔøΩK\u000fG\u000bRU7ÔøΩ7ÔøΩ_ÔøΩÔøΩÔøΩÔøΩÔøΩ\u001d4\fÔøΩsdÔøΩ:\u001cÔøΩY\u0017-CÔøΩl#ÔøΩÔøΩ{ÔøΩ)\u000eÔøΩ^ÔøΩTÔøΩÔøΩ\u0004ÔøΩhÔøΩ$ZÔøΩ√îœ∑ÔøΩ\u00148ÔøΩÔøΩhÕøÔøΩÔøΩÔøΩN4ÔøΩS2ÔøΩÔøΩ÷êe$\u0007ht\nÔøΩÔøΩ\u0016ÔøΩ‚à•\u000b}ÔøΩÔøΩ\u00107\"tÔøΩ\u0012~\u0006WÔøΩ\u001d\bÔøΩ\bÔøΩiÔøΩ2SÔøΩÔøΩÔøΩ.ÔøΩ#ÔøΩÔøΩÔøΩkÔøΩhÔøΩÔøΩÔøΩ\rÔøΩYeÔøΩUÔøΩÔøΩÔøΩ\u0005ÔøΩÕô\u0015#jÔøΩÔøΩ\u0000ÔøΩmÔøΩÔøΩgÔøΩfÔøΩsÔøΩU}\u003cÔøΩWCÔøΩ\u001dÔøΩÔøΩCÔøΩYqÔøΩ#ÔøΩmrÔøΩsÔøΩl@5ÔøΩÔøΩ-NÔøΩ\u001dÔøΩÔøΩ!HÔøΩÔøΩÔøΩÔøΩf«†ÔøΩÔøΩ.ÔøΩÔøΩÔøΩ\u0003QpÔøΩ#ÔøΩÔøΩÔøΩÔøΩ\u003du[TÔøΩÔøΩ_ÔøΩRÔøΩÔøΩU\u0005ﬁìCÔøΩHÔøΩÔøΩ|(ÔøΩrÔøΩ\u000f\u000eÔøΩÔøΩÔøΩ≈ñÔøΩÔøΩ*w\u0010ÔøΩ\u001dxÔøΩÔøΩ\u0027\u001c\u0013~ÔøΩBÔøΩÔøΩÔøΩÔøΩsÔøΩÔøΩNÔøΩyNÔøΩÔøΩÔøΩÔøΩcXKpÔøΩ›ú\u000f6ÔøΩÔøΩ\u003e{\u0010ÔøΩ ≥ÔøΩ\u001c\nÔøΩÔøΩuÔøΩ\tÔøΩ:]ÔøΩhÔøΩÔøΩÔøΩ)ÔøΩÔøΩÁ†ñÔøΩbYÔøΩÓåÉ\u0019a67ÔøΩÔøΩ\u001bÔøΩÔøΩÔøΩ1\u0016\bÔøΩÔøΩKQqa(ÔøΩÔøΩÔøΩ.jÔøΩÔøΩÔøΩx\u00049ÔøΩsESÔøΩÔøΩÔøΩÔøΩ∆Ω\u0002BÔøΩÔøΩ*:uÔøΩÔøΩ K\\\u0005\u0019PPvk+2KÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u003eÔøΩÔøΩÔøΩÔøΩÔøΩ?ÔøΩ@JÔøΩÔøΩÔøΩÔøΩ\u001c\bÔøΩzcÔøΩ\"\u0018\u0003n:XÔøΩÔøΩ{vÔøΩÔøΩ\u0006ÔøΩÔøΩ|ÔøΩncÔøΩÔøΩ\u00023ÔøΩ`ÔøΩgÔøΩ8LvÔøΩÔøΩoÔøΩÔøΩJÔøΩ\u0027ÔøΩMÔøΩÔøΩ6\tÔøΩÔøΩÔøΩÔøΩÔøΩTÔøΩ≈ÆHY\u0011ÔøΩÔøΩ\u001acmYÔøΩh\r\"2ÔøΩÔøΩ2,ÔøΩ\u0013ÔøΩÔøΩ—ØrÔøΩÔøΩ{I(ÔøΩÔøΩ(XN\u0019\u000eaYÔøΩ!ŒúÔøΩ\u0014ÔøΩ1◊êXÔøΩÔøΩÔøΩ\"ÔøΩ\u0005]\u0012).ÔøΩÔøΩ\tÔøΩrlÔøΩÔøΩ[OÔøΩEÔøΩ\u0019ÔøΩÔøΩI0ÔøΩ;ÔøΩ€ìU9{ÔøΩ\u0012\u000fqÔøΩQz\bÔøΩ\u001e\u0000CÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ)ÔøΩ\u0026\u0015%^\u003eÔøΩ^:\u0003ÔøΩÔøΩÔøΩÔøΩY\bÔøΩÔøΩCÔøΩÔøΩÔøΩÔøΩÔøΩ\"u\u0004ÔøΩÔøΩk‹ú”àÔøΩs\u0004jaÔøΩ9Rl]8_`«ÆÔøΩJÔøΩÔøΩÔøΩ2:ÔøΩÔøΩeÔøΩ5\u000fÔøΩZ\u0027\u0006ÔøΩ\u000e\u0017ÔøΩ^ÔøΩÔøΩ]ÔøΩÔøΩyÔøΩ^ÔøΩÍ∞â*ÔøΩÔøΩÔøΩÔøΩ_hÔøΩÔøΩ#IÔøΩEÔøΩÔøΩab\u0001mÔøΩ\u0012ÔøΩ\"DÔøΩÔøΩyÔøΩÔøΩ\u000fÔøΩ\u000eÔøΩÔøΩÔøΩÔøΩÔøΩ\u001eÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩwÔøΩÔøΩÔøΩ\u001fÔøΩÔøΩÔøΩLÔøΩ-~3ÔøΩÔøΩIÔøΩbÔøΩÔøΩÔøΩX\u00261ÔøΩÔøΩﬁ†\u0011ÔøΩm\bÔøΩF\u003eÔøΩÔøΩÔøΩ1hÔøΩ.ÔøΩ0ÔøΩÔøΩu\u000f\u003eÔøΩA5ÔøΩÔøΩI \u001fÔøΩÔøΩ\tÔøΩÔøΩ\u001bÔøΩÔøΩ%ÔøΩbÔøΩ”ö\u0000YÔøΩÔøΩÔøΩ_ÔøΩKKIÔøΩÔøΩÔøΩ\u000fx\u0015ÔøΩL≈ß\\\u0019JÔøΩU\u001aO0ÔøΩ.\u0002O\u001eÔøΩ\u0018\u0019ÔøΩÔøΩÔøΩÔøΩÔøΩ\u0004[\nÔøΩ\u001cÔøΩ*ÔøΩÔøΩ\u001db\u0005\u0014\u001f9yÔøΩÔøΩYÔøΩÔøΩ9ÔøΩaÔøΩNÔøΩÔøΩ\u003e ÔøΩxaÔøΩ\u0015ZrjIX{BÔøΩ\u0000G\u0026+ÔøΩ\u0003ÔøΩj\u0005\n_ 1yÔøΩÔøΩ$ÔøΩ\u0015ÔøΩÔøΩÔøΩU€¶ÔøΩ\u0019`~ÔøΩ\u0026\u001c\u0017ÔøΩÔøΩÔøΩÔøΩÔøΩk\u0016+ÔøΩ@ÔøΩÔøΩiÔøΩÔøΩdÔøΩÔøΩÔøΩ\\MkÔøΩfÔøΩÔøΩÔøΩ|.ÔøΩ\u0001\u0012\u001dÔøΩÔøΩqÔøΩ}Ïµ™\u003d.ÔøΩÔøΩjc9ÔøΩÔøΩYÔøΩÔøΩ9ÔøΩÔøΩCÔøΩÔøΩ.6ÔøΩ\u000ff\u0003sÔøΩ*ÔøΩ\fÔøΩÔøΩ\u000bWTNÔøΩÔøΩÔøΩ\\ÔøΩÔøΩ\bHÔøΩtU1mÔøΩÔøΩÔøΩÔøΩ5ÔøΩ#\u001fÔøΩx\u003cVÔøΩÔøΩÔøΩ\u000b\u0001mÔøΩÔøΩÔøΩJÔøΩPÔøΩ]ndIV0LcÔøΩh3\u00166ÔøΩS]ÔøΩ5b3?ÔøΩÕò\u0018ÔøΩÔøΩÔøΩ]\\ÔøΩ2ÔøΩÔøΩ,ÔøΩOÔøΩtÔøΩVTB8hz2ÔøΩG\u001aÔøΩÔøΩÔøΩÔøΩÚ£ë´ÔøΩÔøΩÔøΩÔøΩ~\u0012-K\u001fn7ÔøΩze\r[ÔøΩ ÔøΩÔøΩÔøΩ6P@ÔøΩÔøΩ\u0026*N1ÔøΩÔøΩcÔøΩÔøΩ)ÔøΩÔøΩqﬂ≠ÔøΩiÔøΩ!Áå∂ÔøΩÔøΩÔøΩ8ÔøΩÔøΩÔøΩ\u0010\u0016\u0019LÔøΩlÔøΩÔøΩFÔøΩÔøΩ\u0004ÔøΩÔøΩÔøΩÔøΩ\tÔøΩd\u0003_YÔøΩÔøΩÎ°ìÔøΩ:ÔøΩ{\u0013`BÓ∫ΩÔøΩotq-,,ÔøΩ\u0005\u0018ÔøΩ;kÔøΩÃÄÔøΩÔøΩÔøΩÔøΩsUZ\rÔøΩÓø†+ÔøΩ|ÔøΩZÔøΩ|^ÔøΩÔøΩhÔøΩ\u001c\"GÔøΩÔøΩm\u0015\u001bÔøΩÔøΩ›®ÔøΩ{ÔøΩÔøΩÔøΩAÔøΩ≈∑\u001fÔøΩÔøΩÔøΩÔøΩUt}ÔøΩYÔøΩœçÔøΩÔøΩ1ÔøΩ`#IkmoÔøΩÔøΩSZQÔøΩÔøΩ\u001dÔøΩÔøΩÔøΩXUÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\f\u0016ÔøΩAÔøΩRÔøΩ:}ÔøΩ#?ÔøΩÔøΩÔøΩÔøΩ?\u003c\u001dÔøΩ[ÔøΩÔøΩÔøΩÔøΩÔøΩYÔøΩPNÔøΩk\u001bÔøΩÔøΩÔøΩÔøΩ\u001fI\u003c\u001e,ÔøΩÔøΩ\u001c@FÔøΩÔøΩwÔøΩZjÔøΩzÔøΩ\u0016ÔøΩFÔøΩÔøΩÔøΩÔøΩ/ÔøΩ2ÔøΩ\u001cÔøΩWÔøΩÔøΩ\u0014ÔøΩSP\u0015ÔøΩxÔøΩÔøΩ\u0012 oÔøΩNÔøΩ/ÔøΩÔøΩÔøΩÔøΩÔøΩHT\u0005!_CﬁÖ\u0005*NÔøΩ\"e3ÔøΩq\u0006ÔøΩÔøΩ\u0010\u0007zÔøΩÔøΩ\bÔøΩ–àÔøΩ\u0016\u003dÔøΩÔøΩ\u0000ÔøΩÔøΩ$\"\u0002(ÔøΩj€éÔøΩsXÔøΩÔøΩÔøΩ\u001cÔøΩ,\u003eÔøΩ\u0006\u001eÔøΩÔøΩqUÔøΩZÔøΩÔøΩe#ÔøΩÔøΩÔøΩ\u003d\b~ÔøΩ ÔøΩ\u0011fÔøΩÔøΩi\u0026ÔøΩ\u0004ÔøΩ›¢\u0010\bÔøΩ:\boAÔøΩ\u000eÔøΩÔøΩ\u003cÔøΩÔøΩ(ÔøΩÔøΩ\n\u000eÔøΩ\u003dÔøΩÔøΩÔøΩÔøΩ+ÔøΩÔøΩ\u0003\tÔøΩÔøΩ5–ôÔøΩ\u0003\u0018\u000eJDÔøΩfÔøΩÔøΩÔøΩeÔøΩb+ÔøΩoÔøΩ$ÔøΩ5ÔøΩ\nu\u003cÔøΩLÔøΩÔøΩ(ÔøΩÔøΩOÔøΩLÔøΩÔøΩdÔøΩÔøΩÔøΩS ÔøΩÔøΩ…†rÔøΩSkÔøΩÔøΩÔøΩÔøΩÔøΩIk7NÔøΩ26ÔøΩVV(\u00166!ÔøΩÔøΩXÔøΩrTtÔøΩZÔøΩjÔøΩeYÔøΩ\u0012ÔøΩÔøΩ%ÔøΩY\u0005 ÔøΩÔøΩiÔøΩoÔøΩzar\u0017ÔøΩ¬óÔøΩÔøΩyXÔøΩÔøΩ\u001frÔøΩ\u0005ÔøΩ6ÔøΩ€®\u0027?+ÔøΩÔøΩg`ÔøΩ9EÔøΩ\u0016ÔøΩ\"Q÷æv*)ÔøΩÔøΩÔøΩ^ÔøΩÔøΩ]ÔøΩ\u0012rÔøΩQ4]MBÔøΩÔøΩ,ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ__ÔøΩ{;ÔøΩÈá∑o_ÔøΩÔøΩ\u000fÔøΩ\u001eÔøΩDÔøΩbÔøΩ[F-/ÔøΩ\"ÔøΩ\u001bO\u0003ÔøΩ2ÔøΩKÔøΩVÔøΩX\u0005ÔøΩ\u0015ÔøΩÔøΩ\u000b\u0001ÔøΩÔøΩ\u0026ÔøΩÔøΩÔøΩÔøΩN\u001bÔøΩ\u0012ÔøΩadÔøΩ^0\u001bÔøΩÔøΩÔøΩGÔøΩÔøΩÔøΩ\\8’≤GL+%hÔøΩT/ÔøΩÔøΩÔøΩ\u001f_ÔøΩÔøΩÔøΩ\u000fÔøΩÔøΩÔøΩ\u003eÔøΩÔøΩÔøΩv\u001aWÔøΩÔøΩ\bq\u000f`\\ÔøΩﬂÉÔøΩÔøΩÔøΩÔøΩ!\u001bÔøΩOÔøΩ\u000e÷∫ÔøΩÔøΩÔøΩÔøΩ*ÔøΩ\u001awdOW}\u0004ÔøΩtvÔøΩ^ÔøΩtÔøΩ\fTOÔøΩÔøΩ9ÔøΩ\"ÔøΩR#\u0013\u003eÔøΩÔøΩ\u0002 \u0015ÔøΩÔøΩÔøΩÔøΩM8ÔøΩÔøΩnxSÔøΩHYÔøΩ{ÔøΩÔøΩÔøΩÔøΩ+)ÔøΩ\"ÔøΩ\\ÔøΩ$ÔøΩq‰Ö≠ÔøΩD#\"yÔøΩ.W\u0027ÔøΩf\u0017\u0011ÔøΩÔøΩÔøΩC\u0010*!,MR5ÔøΩÔøΩTÔøΩTÔøΩ@ÔøΩ)ÔøΩÔøΩ@z\u003eÔøΩKÔøΩÔøΩÔøΩ]%ÔøΩ*|ÔøΩ\"ÔøΩ4;ÔøΩÔøΩÔøΩ#\b◊äÔøΩÔøΩC\u0007ÔøΩÔøΩ{ÔøΩ◊™„ñéÔøΩ”ä]ÔøΩ\u0013ÔøΩ\nKÔøΩZEÔøΩÔøΩ;\rQ(ÔøΩU\rÔøΩ\u0015QÔøΩg\u0014ÔøΩoÔøΩÔøΩÔøΩOÔøΩ\u0012TÔøΩÔøΩmÔøΩ#«™w}IÔøΩZGÔøΩ{RÔøΩ xÔøΩ\u0019|)\u0005\bFÔøΩÔøΩK\u001cÔøΩ\u0001btiÔøΩÔøΩ\u0019ÔøΩ3\n·¥§ÔøΩPS’åu9ÔøΩ/ÔøΩ\u003d\b\u0007[.ÔøΩÔøΩTÔøΩ_\u0017ÔøΩÔøΩÔøΩjÔøΩ[ÔøΩÔøΩÔøΩATÔøΩzpÔøΩ]rÔøΩÔøΩKÔøΩkÔøΩoÔøΩQaÔøΩz(e]ÔøΩlÔøΩÔøΩÔøΩÔøΩ\u0007ÔøΩ\u0002\u0014ÔøΩY{ÔøΩcGE\u0026ÔøΩ|\u0019ÔøΩ|p\u001d@{\u0001ÔøΩÔøΩÔøΩÔøΩ\u001b$ÔøΩ5\u0014ÔøΩÔøΩ4\u0017jÔøΩÔøΩÔøΩe4\u0001\fÔøΩwEÔøΩÔøΩÔøΩyT\u0000ÔøΩPu\rÔøΩ\"\u0007\u0015œ≤ÔøΩ\rÔøΩQÔøΩ^y:ƒß\u003eBWÔøΩ\u0003ÔøΩÔøΩ8\bÔøΩm@\u003e7\u0027ÔøΩ`5ÔøΩ5JÔøΩÔøΩÔøΩ+ÔøΩ;tÔøΩCPH;\boGÔøΩxÔøΩ»í\u0015\u001dÔøΩÔøΩoÔøΩÔøΩ\u000bvJÔøΩ¬´ŒìÔøΩ^ÀíwÔøΩ;ÔøΩ:ÔøΩÔøΩ \u001b:ÔøΩ8ÔøΩÔøΩÔøΩ[œôÔøΩzÔøΩ\nÔøΩÔøΩÔøΩ5ÔøΩÔøΩÔøΩ\u000bÔøΩo/ÔøΩ\u0005ÔøΩ|ÔøΩÔøΩ\u0001PK\u0007\bÔøΩÔøΩÃ∞ÔøΩO\u0000\u0000\u0015ÔøΩ\u0001\u0000PK\u0001\u0002\u0014\u0000\u0014\u0000\b\b\b\u0000/zÔøΩLÔøΩÔøΩÃ∞ÔøΩO\u0000\u0000\u0015ÔøΩ\u0001\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000course.jsonPK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u00009\u0000\u0000\u0000\u0010P\u0000\u0000\u0000\u0000"
          },
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    }
  ]
}